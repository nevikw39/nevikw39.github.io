[{"categories":["拉麵🍜"],"content":"好久沒有吃拉麵，週三系桌完跟高中朋朋去領 PCCA 的雞排結果已經發完惹，參觀一下交大十二舍時髦豪華的大廳與交誼廳，順便約惹拉麵。\n以前有吃過道樂商店的限定家系拉麵，而這家拉麵家最近也有在台中開分店的樣子。簡單來說，就是豚骨醬油的湯頭基底，加上菠菜作為標誌性的特色。\n這家店就在巨城附近，吃完以後我們順道去晃惹晃，把星巴克兌換卷用掉。\n🏬店名 横浜家系拉麵家 🏠地址 新竹市東區民生路 119 號 🔗連結 Facebook ","date":"Dec 23, 2022","img":"https://nevikw39.cf/images/ramenya.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/ramenya/","series":[],"smallImg":"","tags":["D7000📷"],"title":"横浜家系拉麵家"},{"categories":["競賽🏁"],"content":"一早醒來覺得喉嚨有點怪怪的頭還有點痛，應該是確診剛復原而不是前一天晚上喝太多吧。室友跟我出門時間抓得有點緊，台北又下雨因此不能騎 YouBike 要從古亭走到師大圖書館校區，我們還跑錯大樓結果好像是最後報到的。說實在今年動線真的偏亂，也沒有像去年一樣發行前通知。進入賽場之後，我們那間教室有夠擁擠，不知道別間情形如何。中午用完餐跟一些高中同學們打招呼後真的感覺扛不住，冒著雨在正式開賽前趕去師大夜市中的屈臣氏買普拿疼。\n由於題目尚未公佈而紙本已經散佚，這邊就先簡單寫寫日後再補吧\nUpdated on Feb. 12, 2023.\nB - Traveling Number# 這題是個水題，但 sample output 跟題目所說格式不同導致學長吃惹一個 penalty, 比賽後段我們有 request clarification 要求特判那個 submission 卻只有得到 no comment 的回應。假使不計這個 penalty 我們排名有可能往前，但其他隊伍也是同樣，最終我們就是認了。\n2 tries, 12 min\nA - Looping Cycle# 應該也是學長做的，一個有趣的數學題。事實上，循環節的長度不是 \\[8\\] 就是 \\[1\\].\n1 try, 26 min\nD - Maximum Profit Interval# 看起來只是輸入比較奇怪而已，應該就是對差分數列求最大區間和。\n1 try, 78 min\nC - Invest in Stocks# 這題像是高中 AP325 中的例題一次買賣，但賽中我一直想寫出 DP 轉移式。後來室友想出貪心法，我就乖乖刻貪心掃描線。\n1 try, 83 min\nN - Cluster PK Cluster# 這一題的敘述頗難懂，我跟學長討論一陣子才想通，後來學長就順利做掉。\n2 tries, 131 min\nL - River# 雖然手邊暫時沒有 L 的題目但我仍然印象深刻，這題可以作為團隊精神的最佳例證。首先隊友想到可以對值域枚舉，我想到每次可以用 DP 判斷，學長發現應該要用單調佇列。經過多次嘗試之後，我們終於憑藉著不放棄的精神才終於 AC!!\n在等待的過程我一度想說 AC 就吃掉題目還是後來是說撕掉，綠色 AC 出現那刻真的是太激動惹。\n3 tries, 277 min\n賽後# 最終我們做出六題，感覺算是不錯，晚上清大的選手們去吃佬 Pizza. 隔兩天後在計網概上課時我才發現正式計分版出爐，我們竟然排在第 \\(23\\) 名，也從預賽的清大第六進步到清大第四！！雖然跟去年一樣是佳作，但差四名就會有第四名的頭銜，倒是感覺有點可惜。\n","date":"Oct 15, 2022","img":"https://nevikw39.cf/images/ncpc-final-111.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/ncpc-final-111/","series":[],"smallImg":"","tags":[],"title":"111 學年度大專電腦軟體設計競賽 (NCPC) 決賽"},{"categories":[],"content":"9/28 打完桌球系際盃決賽之後，隔天才知道跟我雙打的學長確診武漢肺炎，當下快篩仍是陰性，週四那天還去國網中心參加 HiPAC 的頒獎典禮並接受採訪，期間脫下口罩的環節還不少。週五一起床之後就覺得喉嚨有一點點不太對勁，下來問室友聲音有沒有怪怪的還嚇他一跳。不過由於快篩似乎有兩天的效力，我只有先吃一些感冒藥壓一下。週六就開始有點發燒，後來週日線上家教完覺得喉嚨真的扛不住就篩惹，結果試液滴下去 C 還未出現 T 就先出來惹。\n本來這學期週五完全沒排課就是希望可以週四直接高歌離席，但開學後卻一直忙得回不了家，這下倒直接被學校趕回去惹。學期中很難得地可以待在家中一週，雖然雙十連假幾乎是報廢掉惹。回學校前，爸爸拿一支金門高粱紀念酒讓我送給國網比賽指導的教授，又給我這支清酒讓我好好消毒消毒，順便跟被我傳染的室友賠罪。\n這支清酒是日本相當知名、古老的月桂冠所釀造，屬於相對頂級的純米大吟醸，好像是免稅店特別款，年份大約是 2007, 爸爸是說這種酒放太久可能反而有機會走味。我在 NCPC Final 前一晚開來喝（翌日頭疼又是另一個故事惹⋯⋯），味道聞起來相當香，淺嚐一口有點像是麥茶的感覺，喝起來非常順口而溫潤。不過開封放比較久之後，感覺似乎真的會變得酸一些爾切有點醬油味。\n","date":"Oct 12, 2022","img":"https://nevikw39.cf/images/gekkeikan-jumai-daiginjo.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/gekkeikan-jumai-daiginjo/","series":["酒🥃🍷🍺"],"smallImg":"","tags":["D7000📷"],"title":"月桂冠 純米大吟醸"},{"categories":["競賽🏁"],"content":"去年 NCPC 校內預賽與免修考撞期，但我仍然誤打誤撞晉級決賽。今年當然就是乖乖腳踏實地地準備，暑假團練的時候去年隊友之一的楊學長被拉入其他隊伍，因此我找惹從大一剛入學就被我推坑競賽的室友，組成惹 NTHU DeBugCat Capoo Team. 預賽前一晚，我跟室友把那支紅酒喝完。\nA - Kuchiguse# 開賽就讓我開到一題水題，但我起初只單純地用 std::equal() 直接判斷 \\(K\\) 跟去除尾端標點的 \\(S\\) 的後綴是否相等，還好 submit 前有多想惹一下才發現，在 \\(K\\) 的前面補上空格才是正解。以一個水題而言，我的表現實在不太好。\n1 try, 20 min\nK - Sierpiński carpet# 有點煩的碎形圖，是室友寫掉的。\n1 try, 32 min\nD - Candies# 一開賽我就有注意到這題，顯然是個很裸的中國剩餘定理。雖然高中有練習過推導解法，但當時試一下發現實在沒什麼印象就先跳過。後來發現我們的 Codebook 雖然目錄沒有列出但其實有 CRT, 不過他的模逆元跟我習慣的推廣歐幾里得演算法不同，是用歐拉函數求的。照著刻一下模板之後就順利 AC 惹。\n1 try, 66 min\nG - Free Sushi?# 這一題是學長做的，好像是機率題，就沒有什麼印象。\n1 try, 76 min\nH - Yet Another Alice and Bob# 這題是個很瑣碎的實作題，是室友寫的，WA 幾次之後我跟他一起 debug, 最終終於過惹。後來這題變成競程一的作業，但我們都沒有想寫的意思。\n5 tries, 212 min\nB - Robot# 接下來學長忙著研究 E, 室友跟我則尋找其他可做的題目，B 這題做出的隊伍並不多，所以被認為可能是難題。室友後來想到一個解法，但我抱持著懷疑的態度，沒想到丟上去之後真的 AC 惹！！這件事情告訴我們，一定要相信自己跟隊友。\n1 try, 220 min\n賽後小結# 這次的餐盒不錯，整場比賽我們表現地應該也還行，當然還有一些可以改進的地方。開場開地算是漂亮，D, G 做完曾經一度佔據一陣子的第二名。最終，我們有點驚險地守住第六名，即使 B 沒做出來比較 penalty 我們還是可以順利晉級決賽。\n","date":"Sep 18, 2022","img":"https://nevikw39.cf/images/ncpc-pre-111.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/ncpc-pre-111/","series":[],"smallImg":"","tags":[],"title":"111 學年度大專電腦軟體設計競賽 (NCPC) 校內預賽"},{"categories":[],"content":"暑假結束前媽媽拿惹這支紅酒給我生日喝的，跟上次 Penfolds 一樣是澳洲生產，不過是另一家也算有名的酒莊 \u0026mdash; Wolf Blass \u0026mdash; 以 Cabernet 以及 Shiraz 兩種品種在南澳各個產區的葡萄混合釀造而成。\n這支酒的主要賣點應該是與 HBO 廣受歡迎的影集 Game of Thrones 的前傳 House of the Dragon 聯名，但因為我沒有在追劇所以對我其實沒什麼特別。\n四號參加 SITCON 完回到宿舍就聽到交誼廳有系上朋朋們在喝酒就加入惹，隔天晚上交誼廳有人就直接在我的寢室內開喝。這支紅酒味道和 Penfolds 的我聞不太出差別，畢竟兩者都包含 Shiraz 葡萄，不過喝起來口感就比較不同，沒那麼酸、而且又更好入口一些。後來有朋朋喝得很順，我自己也覺得比較不錯。\n","date":"Sep 5, 2022","img":"https://nevikw39.cf/images/wolf-blass-hod.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/wolf-blass-hod/","series":["酒🥃🍷🍺"],"smallImg":"","tags":[],"title":"House of the Dragon Cabernet Shiraz 2021"},{"categories":["拉麵🍜"],"content":"芳賀是台中享負盛名的拉麵店之一的七面鳥在今年夏天全新開幕，繼首家分店鮭の大助之後，同樣是走創新風格的三號店。自店名容易知道與貍匠的牛庵類似，台中又迎來新一家以牛為基底的拉麵。不過牛庵的特色是香料咖哩濃湯，芳賀則是白湯、醬油清湯等。\n由於對七面鳥和鮭の大助的印象及評價都很不錯，而且試營運期間就推出不少特別的限定，因此那時起對芳賀就很感興趣。不過有注意到 Google Maps 上的評價並沒有特別好而且有些負評，但畢竟是剛開幕難免有些手忙腳亂而未盡待改善之處。\n八月中有空就趕緊約惹朋朋去嘗鮮，因為剛好遇上限定款，我們都點惹貝出汁和牛牛骨清湯。端上來就見識到用料浮誇的份量，除惹和牛之外還有烤牛胸與舒肥叉燒，非常豐富多樣。出乎意料的是貝類竟然是大顆的，看起來像是貽貝之類的 (? 我其實不太清楚，但吃起來鮮美多汁。湯頭是含有大量蛤類鮮味的牛骨醬油清湯，不過本身已經有點油，再加上烤牛胸的油脂，雖然有貝類跟溏心蛋，還是會有點太膩。\n還有一個問題是店內的冷氣並不是很涼，七面鳥本店印象中也有這個問題，食慾也因而多少受到影響。因為肉給的非常多，我甚至一度打算放棄把麵吃完，不過最後還是默默不知覺地吃完惹。整體而言，我覺得還是滿不錯的，未來還是會想試試其他限定跟定番。\n🏬店名 芳賀牛骨拉麵 🏠地址 403 台中市西區英才路 413 號 🔗連結 Facebook ","date":"Aug 12, 2022","img":"https://nevikw39.cf/images/haga.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/haga/","series":[],"smallImg":"","tags":["七面鳥","D7000📷"],"title":"芳賀牛骨拉麵"},{"categories":[],"content":"進入大學之後，有著許多豐富的資源提供給學生們，因此如何妥善的利用，也是一門值得研究的學問。以下主要介紹計中的服務：\nEmail 帳號# 隨著科技發展，email 似乎也變得有些老氣，也許未來或現在的小朋友們甚至都不太認識呢。不過，在大學以及許多工作場合，Email 依然持續扮演著溝通的重要橋梁。教授的公布事項與學校的行政通知，往往都是藉由 email. 我自己覺得 email 比起通訊軟體，因為具備標題及內文等，結構更為具體完整。此外，在魚雁往返的過程中，脈絡也更為清晰。\n可是大家入學前想必都有自己的私人 email 惹，為何還要再申請學校 email 呢？？首先，個人的 email 信箱或許可能疏於整理，不利搜尋資料，將私事抽離更有條理；再者，學校信箱的 domain 帶有學校名稱，在處理正事的場合顯得更專業，而且有些服務以學校 email 註冊可以驗證學生身分、享有額外好處；最後，這些帳號往往都有附加服務。以下將介紹計中、Google 及微軟的帳號：\n計中 mail server (mx)# 在 Email 普遍商業發展之前，各大學通常早就建置惹自己的 mail server. 時至今日，功能或許相對比較陽春一些，而且不同的協定跟年份導致種種疊層架屋的伺服器們，但還是更可靠有保證，即使畢業後仍然存在，用來申請其他服務比較安心。相關資訊可以參考網路系統組的網頁。\n計中 mail 還可以在申請宿網時作為驗證；附帶的空間還可以作為 FTP 與個人網頁，只是現在應該都已經式微惹。剛才才發現 FTP 需要校內 IP address (VPN) 才能登入，畢竟 FTP 是明文的，難怪之前都失敗。\n使用方式# 平常 Webmail 就跟一般 email 差不多，如果要在 Mac / iOS Mail, Android Gmail 收發的話設定細節可以參考這篇說明，收信應該都是使用 IMAP 應該沒什麼人再用 POP3 惹，發信的話則是 SMTPAUTH 因為學校所稱的 SMTP 必須在校內才能使用。\n如果是用 Office Outlook 的話微軟真的是笨到不行，新版 Outlook 一般情況下新增帳戶就算選擇進階選項手動設定還是會一直卡住。必須關掉 Outlook 之後執行 outlook /manageprofiles \\(\\to\\) 電子郵件帳戶 \\(\\to\\) 新增才有傳統完全手動的選項，或是到控制台 \\(\\to\\) Mail (Microsoft Outlook) \\(\\to\\) 電子郵件帳戶 \\(\\to\\) 新增，這裡的手動才能真正的設定一切細節。\n設定別名# 計中 mail 的地址預設為 s\u0026lt;學號\u0026gt;@m\u0026lt;入學年度\u0026gt;.nthu.edu.tw, 可以至校務系統 \\(\\to\\) 計通中心相關服務 \\(\\to\\) 網路系統組線上服務 \\(\\to\\) 信箱服務選單 \\(\\to\\) 設定信箱別名，就可以設定比較習慣好記的別名，發信的部分 SMTPAUTH 的設定還是一樣，然後可以修改或新增 email 地址。\nG Suite for Eduaction (Google Apps for Eduaction, gapp)# 從小，中小學提供的信箱，多半是託管給 Google Apps, 除惹 email 以外，更重要的是其他 Google 服務，比如曾經的Meet 錄影、無限雲端硬碟等等。不過，在 Google 狠狠地養套殺之後，這項服務的未來確實堪憂。我相信學校肯定不吝於編預算花在確切的需求上，關心的同學們記得在每年都會有校園軟體問卷上表達意見。\n根據這篇公告，學校目前提供在校生的 Google 帳號是 Education Plus, 最重要的雲端硬碟容量將在兩年內從 \\(5\\text{TB}\\) 調降至 \\(20\\text{GB}\\).\n申請帳號的流程是校務系統 \\(\\to\\) 計通中心相關服務 \\(\\to\\) 網路系統組線上服務 \\(\\to\\) Google Apps 帳號申請，姓名與帳號名稱皆可自行決定，只是日後無法更改。\n我最近才知道 gapp 還有一個網域別名 cloud.nthu.edu.tw, 亦即 gapp 皆可以藉由 \u0026lt;同名\u0026gt;@cloud.nthu.edu.tw 收發信，具體做法跟信箱別名非常類似。\nOffice 365 (office365)# 學校提供的 Office 365, 雖然也是一個 \u0026lt;學號\u0026gt;@office365.nthu.edu.tw 的帳號，但畢竟我真的沒以這個地址收發信過，性質上比較類似授權軟體，因此是由學習科技組負責。當初最早好像是因為需要 Teams 才去申請，位置在校務系統 \\(\\to\\) 計通中心相關服務 \\(\\to\\) 校園授權軟體下載系統，需要校內 IP address (VPN) \\(\\to\\) Office 365 帳號申請，後來才發現原來還有附帶 \\(1\\text{TB}\\) OneDrive 跟 Office 授權，詳細細節就留待接下來的章節。\n學校的 Office 365 帳號還有一個有點意想不到的用處 \u0026mdash;- 稽查別人，因為帳號都是學號跟姓名，而且大部分人因為 Teams 跟 Office 都會申請。以學校的帳號登入 Outlook People 之後，如果對方存在帳號的話，就可以學號與姓名雙向互查。\n資工系計中也有自己的 mail server, 還可以作為工作站帳號，但線上申請的網頁似乎有點問題，聽學長是藉由紙本申請，如果我有空辦的話再作更新。\n網路服務# 接下來要介紹學校所提供的各式網路服務。雖然台灣的行動網路發展日臻成熟，許多同學家中甚至皆不裝設寬頻固網，但能夠使用 Wi-Fi 的場合我還是傾向於盡量使用 Wi-Fi, 畢竟手邊的裝置確實不少，包括手機、iPad 及 MacBook, 在宿舍還有 Mac mini, 行動網路在人潮聚集處免不了不穩定的問題，長期熱點分享也會造成手機過熱、傷害電池等。而清大作為國內頂尖大學之一，網路基礎設施相當發達，更是台灣學術網路 (TANet) 新竹區域網路中心之所在（隔壁交大是聽起來更威的新竹主節點），還可以屬於 \\(140.114.0.0/16\\) 的 IP address 上網。\n校園 Wi-Fi# 學校的 Wi-Fi 建置是很普及，但品質常為人詬病，在教育、圖書館與人社院就確實堪憂，台達、資電館一樓也不甚穩定，不過像小吃部就很順暢。\n申請方式# 詳如說明，在校務系統 \\(\\to\\) 計通中心相關服務 \\(\\to\\) 網路系統組線上服務 \\(\\to\\) 無線區域網路帳號，雖然也會得到一個形如 s\u0026lt;學號\u0026gt;@wlan.nthu.edu.tw 的帳號，但應該真的沒有信箱功能，注意密碼比較嚴格，好像需要大小寫數字或符號。\nWi-Fi 名稱種類# 學校 Wi-Fi 名稱種類個人覺得很複雜，特別是資工系有一堆 SSID 結果訊號還是常常很糟糕。大致的格式可以歸類如下：\nnthu-\u0026lt;dept\u0026gt;(-peap)(-\u0026lt;2.4|5\u0026gt;G) nthupeap TANetRoaming eduroam 基本上主要是由計中或負責的院系構成，有時會分成 \\(2.4\\text{GHz}, 5\\text{GHz}\\), 是否帶有 peap 則說明驗證的方式。一般的公共網路本身是沒有加密的，通常利用 captive portal 網頁讓使用者登入。而有惹 PEAP, 讓 WPA 也可以藉由帳號密碼等驗證。\n我覺得 nthupeap 是最方便的 Wi-Fi, 因為既可以於全校園通行無阻，而且 PEAP 可以讓作業系統記住密碼自動登入。注意到不論是 Android 或 iOS, 可能在登入時 Certificate 需要選 Not Validate 之類的。\nTANetRoaming 是台灣學術網路漫遊，讓國內學校師生可以藉由 captive portal 登入其他學校；eduroam 則是國際的漫遊，使用的是 PEAP 驗證。\n宿舍網路# 清大宿舍的每個床位都有一個網路埠，對映一個屬於 \\(140.114.0.0/16\\) 的固定 IP address. 如果有計中 mail 帳號就不必再額外申請宿網帳號。設定的部分比較麻煩，申請時就必須綁定 MAC (Media Access Control) address, 完成後會得到 static IP address, subnet mask, gateway 等資訊。高中寒訓有住過隔壁交大九十舍，他們是用 captive portal 來驗證，好像還是 DHCP, 相對比較彈性跟容易。\n雖然似乎有規定每人每日下載至多 \\(6\\text{GB}\\), 但其實下載系統更新或遊戲超過好像都沒怎樣。速度的部分我就無法提供什麼心得，因為我的骨灰路由器的有線還是 \\(10/100\\text{Mbps}\\).\n更# 這學年開始宿網不必再綁 MAC (Media Access Control) address 惹，申請好手動設定 static IP address 即可。\nVPN# 不少服務會限定僅有校內 IP address 可以使用，比如 FTP server, 校園授權軟體等等，但假若人在校外呢？？這時就可以連上學校的 VPN. 使用的軟體跟高中參加台大 NPSC 時一樣，是 Pulse Secure SSL VPN, 支援各種電腦與手機的系統。帳號不必額外申請，沿用校園 Wi-Fi 的，伺服器網域則是 nthu.twaren.net.\n上學期 NTHU Online Judge 好像曾經因為流量不堪負載而一度僅允許來自校內 IP address 連線。\n軟體授權# 最後的壓軸就是由學習科技組負責、最具價值的授權軟體們惹，這邊的軟體大部分在下載或驗證時都需要學校的 IP address, 如果在校外就需要剛才提到的 VPN.\nOffice# 學校提供的 Office 有兩種，一種是類似訂閱制的 Office 365, 另一種則是比較像傳統單機版的 KMS. 如果不曉得該選擇哪個的話，我覺得 Office 365 比較簡單一些。\nOffice 365 版# 申請的方式如前揭，事實上學校提供的是 Office 365 教育版 A3 方案，每個使用者可以在五部 PC / Mac 上安裝桌面版 Office 及五部行動裝置上安裝 Office. 安裝的方式建議先解除安裝任何 Office, 特別包括 Windows 內建的 Office 試用版，接著登入 Office Portal 後，右方偏上即有安裝 Office 365 App 的選項，下載並執行安裝程式後，登入學校 Office 365 帳號即完成。\nOffice 專業增強版大量授權 (KMS)# 這種是歷史比較悠久的授權方式，性質上比較接近一般買斷式的單機版，安裝後會顯示為 LTSC (Long Term Service Channel). 安裝前一樣建議先解除安裝任何 Office, 接著若在校外需要連上學校 VPN, 前往校務系統 \\(\\to\\) 校園授權軟體下載系統，下載並執行 Office 2021 (or 2019 / 2016 / 2013 / 2010) 的安裝程式。\nMac 的話只要在安裝後執行一次 VL Serializer 即可。如果是 Windows, 需要再到學習科技組的網頁下載版本所對應的 KMS 啟用批次檔，往後每 \\(180\\) 日需要以學校 IP address 啟用一次。\n我在 Office 2019 LSTC for Mac 有遇到一個問題，就是他不讓我跟其他同學及時共同編輯放在學校 OneDrive 的文件，還要我改用網頁版 Office, 所以我才改安裝 365 版。不過 KMS (Key Management Server) 有個好處就是基本上數量是不限的。\nWindows 企業版# 這個我目前沒有用過，驗證方法一樣是 KMS 大量授權，但學校特別說明授權只是升級版，需要有隨機版才能升級驗證成功。但據說其實只要安裝試用版就能升級？？如果下學期羅設實驗真的非得用 Windows 不可的話，我會再研究看看。\n更# 最後邏實應該還是想辦法用 Linux, 不過有學弟來問我筆電如果已預裝 OEM 家用版 Windows 如何在不重灌的前提下升級成學校的企業版，可以先輸入對應的臨時金鑰升級上去之後，再循 KMS 認證步驟啟用。\nSymantec Endpoint Protection# 防毒軟體的部分學校有買 Kaspersky 跟 Symantec, 我是裝後者。基本上就是到校務系統 \\(\\to\\) 校園授權軟體下載系統，下載並執行安裝程式即可。\n學校還有其他軟體就不逐一介紹惹，簡單列舉包括一些輸入法、MATLAB, 以及只支援 Windows 的威力導演、華康字型、PhotoImpact, Visual Studio 等等。\n","date":"Aug 4, 2022","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-guide-cc/","series":["清大新生參考"],"smallImg":"","tags":["清大"],"title":"清大新生參考：資源帳號篇"},{"categories":[],"content":"網路上往往調侃新竹為美食沙漠，已然成為一種梗，然而真實情況到底如何呢？？據我實際在新竹生活一年的經驗，這句話當然是誇大惹，但新竹似乎真的比較缺乏特別突出的店家，中上水準的店家比例也確實略低，稍有人氣的店家又往往容易大排長龍。不過每個人的偏好自然是非常主觀的，我自認口味並不太挑，反倒稍微傾向於注重整體用餐的環境與體驗，所以底下就隨意寫寫，參考參考就好。\n底下就來介紹清大三大學餐，每個月各店的店休都會輪替，營業時間可以至經營管理組的網頁。\n備註更# 9/1 入住宿舍之後發現學餐好像經歷不小的迭代變化，不過開學前閒閒地都跑出去校外吃，所以這篇文章就是參考參考。\n風雲# 風雲樓是比較顯眼的學餐，一樓是麵包店跟書店，據傳有想引進超市。學餐的部分，個人覺得大致上喜好的程度隨著樓層降低而遞減。\n四樓# 風雲樓四樓，或稱風四，原本整層都是 The Loft, 是跟其他學餐定位很不一樣的簡餐。空間氛圍很舒適輕鬆，靠窗座位毗鄰成功湖畔還可以眺望湖景風光。食材十分健康，會有菇類、茄子等配菜，主菜份量尚稱足夠。價格有給予學生的優惠，隔壁交大的朋朋也喜歡來吃。\n曾經一度是總務長的得意政績之一，屢屢在課堂上說每學期風四都不想繼續但被他說服，結果上個學期結束後真的不做惹。不過團隊裡似乎有人要承接下去，就等開學後看看囉。\n入住宿舍當天跟家人去吃的咖哩牛腩、泰式奶茶\n三樓# 風三有個通道直接連向宿舍區，餐廳大抵而言我都覺得還可以。\n牛肉先生# 我覺得不錯，是大約一週會想吃個一次的那種，不過反而比較常點豬排或唐揚雞，只是有時配菜不太喜歡。\n完顏# 這可以算是總務長的政績，是在下學期風雲樓整修完後新引入的。先姑且不論是否道地正統，在學餐以他的價格而言，口味、份量都算有一定水準。\n胖老爹# 這個就不必多說惹吧，不過我其實沒有很常吃。\n珍御品# 主要是賣粥、麵類，但我不愛粥，吃過意麵覺得份量偏少，有想試炒麵卻還沒吃過。\n莫尼捲餅# 一上還覺得不錯，餐點都會附水果。但風雲樓整修完之後漲惹 \\(\\$8\\) 就不會特別想吃，相較之下牛肉先生頂多漲 \\(\\$5\\).\n二樓# 風二我其實很少吃，因為位置卡在中間有點尷尬而且也不特別吸引人，所以就簡單列舉。\n蘇記牛肉麵# 也是風雲樓整修完後新引入的，而且麵類在學餐稍微相對比較少見一些。麵跟飯都還行，但是捲餅真的很盤，千萬不要點 ==\n漢城# 我應該有吃過一次都真的沒有什麼印象 QQ.\n家味燒臘# 跟小吃部燒臘比起來，配菜有四道而且可以自選，內用還有 （很淡的） 飲料。\n喜番咖哩# 份量很大、可以免費加飯，但咖哩沒什麼味道不夠濃。\n據我們總務長所說，風二即將引進熊本小火鍋，正式開幕之後究竟會怎麼樣呢？？還是先不要太期待好惹。\n水木# 水木生活中心其實有一二樓之分，但二樓我只有去過的影印店，沒去過那兩家咖啡廳。除惹底下介紹的以外，還有一些店，包括很知名的 (? 金展自助餐，不過我始終沒有勇氣嘗試就是惹。\n全家# 沒錯毋庸置疑的，全家就是水木最頂的代表。憑學生證可以打 \\(85\\) 折而且有一定的品質保障，再回頭看看其他學餐，怎麼能不選全家？？不過水木全家腹地比較小，所以品項也比較少，新開在綜四的全家雖然比較大但附近又沒有座位。\n每年的新生在開學後有一段時間可以免費領一支霜淇淋。學校的全家好像都只有營業到十點。\n小木屋# 濫觴在隔壁交大的學餐品牌，憑學生證可以打 \\(9\\) 折，不過也是有漲價過 QQ. 假日當早午餐其實還不錯。\n炸鷄大獅# 似乎是連鎖店，但第一次在清大看到，肉很大塊但就沒什麼蔬菜。下學期變相小漲價，不再附飲料 QQ.\n酷雞# 應該就是有點類似便當店，有附蛋在學餐算稀有，好像還可以免費加飯。\n三顧茅廬# 連鎖的滷味店，想要吃蔬菜時不錯的選擇。\n四海遊龍# 鍋貼速度非常快，但水餃可能會等很久，甚至超過十多分鐘，不過漲價後就很少吃惹。\n小吃部# 在我們入學之前小吃部整修惹好一陣子，這也是總務長的得意政績。以往小吃部的評價似乎不是太妙，整修後至少裝潢稍微追上交大的車尾燈。\n麥當勞# 麥當勞畢竟號稱新竹美食，每次中午排隊大概都要至少半小時。使用學生證可以享有單點 \\(9\\) 折以及甜心卡的優惠，常見的組合是單點漢堡再大薯送大飲，在漲價前相當於套餐有折價還免費升級大薯跟大飲，現在應該還是有比較划算吧。注意晚上只有營業至十點或十二點。\n7-11# 曾經在清交學生票選兩校學餐榮登第二，跟全家一樣憑學生證有 \\(85\\) 折優惠，但店面比起水木全家大上不少，不僅品項選擇繁多，也可以在校內領包裹（如果不必付款的可以寄到宿舍服務中心代收）。另外，小吃部的 seven 是二十四小時營業的。\n家園燒臘# 算是清大學餐中少數大排長龍的店家之一，但我其實覺得普普通通，口味還行、價格實惠。\n瑞斯飯糰# 一樣適合假日當早午餐，或是平常不餓的時候。\n允將食堂# 當初總務長跟學長們宣稱會有 \\(5\\text{cm}\\) 厚的生魚片，結果就…… 入住宿舍隔天跟高中朋朋們買去他宿舍實齋，要價 \\(\\$88\\) 的唐揚雞飯份量卻很少。不過下學期有天發現豬排飯有時會特價 \\(\\$70\\), 大部分 \\(\\$88\\) 的品項也都調降至 \\(\\$80\\), 所以偶而會考慮一下。\n家味鮮# 下學期才新增的店家，有賣滷味跟便當，可以自選配菜。好像有因為滷味價格的爭議上過 Dcard, 我買過一兩次是覺得他的算法很 random.\n此外還有一些餐廳散見於校園。圖書館的路易莎憑學生證可以打 \\(9\\) 折，綜二前面還有一家水樣餐廳評價不太好，吃過一次覺得很普。當然叫外送也是不錯的選項，清大跟隔壁的交大在最愛叫外送的大學排名可是榜上有名。\n同場加映# 除惹校內學餐之外，也順便介紹一下其他附近的餐廳。\n交大二餐# 隔壁交大的第二學生餐廳，其實距離清大的宿舍群不遠，而且還沒有上下坡的高度差。二餐的裝潢確實海放任何清大學餐，有著舒適柔和的燈光、整潔乾淨的桌椅，有些座位還有插座。另外二餐的 \\(7-11\\) 不認學生證，因此清大學生也可以享有折扣。\nSubway# 每次吃的時候都會覺得自己很健康，雖然有漲價不過好像在差不多的時候開始有餅乾問卷永動機，填問卷就可以在下次換一片餅乾，目前為止都還有繼續拿到問卷。\n火山丼# 也不是說外國的月亮比較圓，但就真的比清大學餐都還好吃。\n太祖魷魚羹、賈董的麵都還行，姊妹飯桶跟二樓的就比較普。\n校門 a.k.a. 清夜# 北校門的店家群落俗稱清夜，我個人對夜市是沒什麼興趣，但其實清夜根本不像夜市。下學期剛開學朋朋們常常去吃小火鍋，但我其實覺得很普，夜市牛排我就真的不太行。底下簡單挑兩家我覺得還可以帶別人去的。記得我來清大二階時吃的就是校門口的摩斯跟肯德基，時至今日我依然覺得他們無庸置疑就是當之無愧的清夜霸主。\n港島主麵# 有點小貴的港式料理，憑學生證可以免費加麵。\n溫州王# 餛飩、抄手以及麵食等等的小吃，也有滷肉飯。\n其他# 清大周遭真的是沒什麼吃的，市區火車站一帶有比較多選擇，比如東門市場就有許多店家，像是這兩家拉麵：大角拉麵、東商店。另一個方向上，關新路附近的麵屋吉光是很有人氣的排隊名店。\n","date":"Aug 3, 2022","img":"https://nevikw39.cf/images/loft.JPG","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-guide-dining/","series":["清大新生參考"],"smallImg":"","tags":["清大"],"title":"清大新生參考：飲食學餐篇"},{"categories":[],"content":"上惹大學之後，讀書當然還是一個學生很基本的要務。\n成績# 與國高中有著顯著的不同，在大學中，各科的評量方式很彈性，教授也有很大的權力。在校務系統 \\(\\to\\) 課程、成績 \\(\\to\\) 成績查詢可以找到大部分的資訊。原本學校好像會寄紙本成績單到家裡，現在則改成到校務系統 \\(\\to\\) 課程、成績 \\(\\to\\) 學士班學期成績通知單下載電子檔。\n等第制# 清大與國內外其他知名大學一樣，已經導入以等第制成績 (letttered grade) 為主的主流做法。所謂的等第制，就是指最終學期成績會被評為 A+, A, A-, B+, B, B-, C+, C, C-, D, E 等其中之一，有點像國小好像學期成績會分成優、甲、乙等等。而每個等第，都會對映至一個實數，稱為成績積分 (grade points). 不過有些教授依然習慣使用傳統的百分制成績，底下的表格列出百分制成績、等第制成績及積分的關係：\n百分制成績 等第制成績 積分 \\([90, 100]\\) A+ \\(4.3\\) \\([85, 90)\\) A \\(4\\) \\([80, 85)\\) A- \\(3.7\\) \\([77, 80)\\) B+ \\(3.3\\) \\([73, 77)\\) B \\(3\\) \\([70, 73)\\) B- \\(2.7\\) \\([67, 70)\\) C+ \\(2.3\\) \\([63, 67)\\) C \\(2\\) \\([60, 63)\\) C- \\(1.7\\) \\([50, 60)\\) D \\(1\\) \\((0, 50)\\) E \\(0\\) \\(0\\) X \\(0\\) 不過，百分制與等第制成績之間的關係並不是絕對的，畢竟教授可以直接輸入等第給分，有些教授會按照比例調整等等。而所謂的 GPA (Grade Points Average), 就是將一個學生，一段時間中所修各科的積分，對於各科學分的加權平均。近兩年內各個科目的積分平均與標準差，可以在校務系統 \\(\\to\\) 課程、成績 \\(\\to\\) 全校課程等級制平均值及標準差查詢找到。\nT 分數# T 分數是清大從我們入學那年開始自己玩的制度，像是棒球數據中的 ERA+, OPS+, 對於成績積分的標準化分數（z 分數）的伸縮平移，跟日本升學所採用的偏差是一致的算法，即 \\(T=50+10z_x=50+10\\frac{x-\\bar{x}}{\\sigma_x}\\), 其中 \\(x\\) 是學生原本的成績積分、\\(\\bar{x}\\) 是該課程成績積分的平均、\\(\\sigma_x\\) 是該課程成績積分的標準差。\n當初學校原先的立意是為惹解決部分學生追求所謂的「甜課」，導致 GPA 通膨等的現象，然而 T 分數的計算是基於等第成績積分而非連續的原始百分成績，相對離散的等第成績在經過一次處理之後，原始數據本身內秉的性質已經多少有所失真，又再經歷一次標準化之後，是否能夠精確地表達成績的分布程度，確實令人難以不有所懷疑。\nT 分數同樣也有對於各科學分的加權平均。需要注意的是，當前國內外各大學研究所，乃至於日後求職等，依然只有 GPA 是被廣泛地接受的。\n排名# 對於單一一個科目，校務系統上會列出該科排名以及人數，而所謂的修課相對成績，就是兩者的比值。這個修課相對成績，是在 T 分數之前學校所提出一個初衷類似的指標。注意到由於學校已經全面導入等第制，因此這裡的排名都是等第的排名，也就是說，所有 A+ 的人都是單科排名 \\(1\\). 所以這樣來看，修課相對成績也是很沒意義，因為同樣拿到 A+, 那麼修課人數越多，這個修課相對成績會成反比遞減。問題還是與 T 分數一樣，原始成績轉換為等第制，其分布情形已經被壓縮過惹。\n而對於每一學期的 GPA, T 分數平均及修課相對成績平均，會分別有班上與系上的排名，將在次一學期開學日提供暫排名，正式排名則是在三週內完成。此外，這三種平均還會有班上與系上的所有學期的累積排名。每個學期班上排名大約 \\(5\\%\\)（詳如教務處網頁）將會獲頒書卷獎，俗稱卷🈹卷姊。\n選課# 清大的選課制度相當極度自由、彈性，完全沒有內建任何預設課程，一切都要由自己安排。選課的限制很少，大概僅有以系為單位的優先保障。佔大多數的有人限課程是採用亂數，而非先搶先贏。\n必修與選修# 高一輔導課好像有被要求研究大學課程，不過我想大家都不會當一回事吧。直到錄取大學的暑假，我仍然對未來四年一無規劃，備審的讀書計畫都太虛無縹緲、不著邊際。\n若要快速認是系上選課規定，可以至註冊組網頁找到畢業學分表。校定的共同必修共有 \\(30\\) 學分，大學中文僅 \\(2\\) 學分，學測國文滿級可以免修、英文表定 \\(8\\) 學分，具體規定可以參考課務組；中文、英文學分若因故不必修滿則會變成自由選修學分。通識總計需要 \\(20\\) 學分，核心通識與選修通識須至少各 \\(8\\) 學分，其中核通四個向度須各修一門。體育需要修六個學期，包含一個學期以班為單位的大一體育，剩下則是自行選課的興趣體育；服務學習則是需要修滿 \\(60\\) 小時。\n至於更進一步地了解系上的必修與選修，可以到系上網站，比如資工系課程規劃、課程地圖。大抵來說，選課系統會先顯示該學期建議的必選修課程，基本上可以其為主，再根據個人能力跟興趣調整。\n前人心得評價# 選課之前找到過往學長、同學對於該課程的評價也是十分重要的事。本來有個 Chrome extension 可以收集大家的成績並在校務系統中顯示，但他的 backend 已經死惹一陣子，我發惹 issue 看起來學長是沒空 QQ.\n臉書上的清大通識課程平台是一個匿名投稿粉專，也有不少人會詢問或分享通識以外的課程。此外，也有些人會把修課心得發在 Dcard 的校板上。但臉書跟 Dcard 的搜尋其實不是很好，尤其是後者，也不見得會被 Google 索引到，而且閱讀的體驗並不太理想。\nptt 的 NTHU Courses 板相較之下資訊更有條理、介面更為簡單，而且更已累積約 \\(12,000\\) 篇課程心得。ptt 重新開放申請帳號好一陣子惹，沒有帳號可以趕緊去申請一下，快來分享更多修課心得啊！！\n選課、加簽與二退# 慶大的選課時程算是偏早，一般而言，次一學期的選課差不多在學期後段就開始惹，因此期中考過後差不多就可以稍微思考一下。\n三次選課期間，在校務系統 \\(\\to\\) 選課 \\(\\to\\) 網路選課，點選進入選課系，每日開放的時間是當日中午十二點至翌日早上九點。選課期間觀察待亂數人數與剩下名額很重要，選課系統開放時可以點選人數統計，非開放時可以至校務系統 \\(\\to\\) 選課 \\(\\to\\) 報表 \\(\\to\\) 人數統計。志願序的規則，可以參考課務組的網頁。迨選課期間結束翌日中午，才會完成亂數，可以至校務系統 \\(\\to\\) 選課 \\(\\to\\) 選課情形查詢。\n接下來就是加退選與加簽的階段，通常會持續到開學後一陣子。此時志願序不再適用，亂數會天天執行，也是無痛退選的最後階段。而所謂的加簽，就是當一個課程不符合資格或已達人限但還是想修時，經過教授同意加簽即可成功選課。在我們入學起學校已採用線上加簽系統，在校務系統 \\(\\to\\) 選課 \\(\\to\\) 加簽申請，選擇課程、陳述理由（通常還是建議捎封 email 較為妥當）後即可送出簽程。俟教授核可若無衝堂、超修等問題即自動完成，否則須退選等處力後進入 eForm 手動執行。\n至於俗稱二退的停修，則通常是在期中考後，可以放棄目前修的課。流程比較繁瑣一些，首先需要至校務系統 \\(\\to\\) 選課 \\(\\to\\) 停修申請單列下載、印出停修單的紙本，找到授課教授、導師以及系主任（去系辦找祕書蓋章），之後再送繳至課務組。二退後會在成績單留下紀錄，若造成低修也必須跟著申請。\n這裡我其實只是大略描述個人印象較為深刻的重點，相關規定在網路上應該不能找到，畢竟蒐集資訊也是大學生的基本技能。\n","date":"Aug 2, 2022","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-guide-courses/","series":["清大新生參考"],"smallImg":"","tags":["清大"],"title":"清大新生參考：選課學業篇"},{"categories":[],"content":"進入清大之後也讀惹一年惹，因為暑假也沒有太忙所以就簡單寫一下，作為一個新生可能會好奇、當初我也想要知道的各種關於清大事情。具體可以分成以下三篇，剩下一些小事就併為這篇。\n資源帳號篇 飲食學餐篇 選課學業篇 開銷支出# 大部分的人應該都是在大學後才首次離鄉背井，面臨起一個人生活的種種。其中，最重要的恐怕非合理控制開銷莫屬。\n若回顧我大一逐月的支出，最大宗的當然是飲食，若扣除掉不夠完整的月份，平均每月大約 \\(\\$4547\\). 大一一開學我延續暑假因為睡到中午就不吃早餐的習慣，早八的課基本上沒去，十點的就稍微隨便吃一點零食。一天大概只吃兩餐，加上週末不定期回家 蹭飯 ，所以如果食量跟我一樣不大每日餐費可以抓到 \\(\\$150\\). 另外就是如果出去吃比較好的，我是會記到休閒娛樂那邊。\n交通的部分每月花費約 \\(\\$778\\), 除惹回家之外還有去比賽，不過這邊沒有扣除比賽的補助。包括理髮、洗衣在內之類的一般開銷，每月則約 \\(\\$316\\). 學習相關大部分都是一次性的，普物課本直屬學長送我，我只有自己花錢買英文課本、微積分講義跟工程計算機，偶而會印報告或考試大抄。\n我沒有特別喜歡購物，每個月平均除下來大約 \\(\\$1072\\sim 1788\\), 主要是買耳機花比較多，其他大多是生活必需品吧。休閒娛樂的話，平均一個月大約是 \\(\\$1108\\).\n全部統計下來，我或許可以勉強稱得上節儉，每月平均大概支出 \\(\\$7598\\), 以上的計算都沒有很精準，畢竟學期初、末的月份部分是住家裡，五月還遇到疫情，整體應該是足夠由家教的收入負擔，不過家裡還是有給我零用錢。\n校內外交通# 清大校園在台灣可謂占地廣袤，自光復路上的大門起沿著十八尖山側的丘陵地勢爬升至寶山路上的南校門，整個校園儼然是座隱身於塵囂中的森林大學城。閒暇時四處漫步當然不錯，但趕課時就完全不是同一回事。\n校內與校區際# 目前學校只有在小吃部與台達館有傳統 YouBike 的站點，據說將來會引進 YouBike 2.0E. 我是把很久沒騎的腳踏車整理一下花 \\(\\$800\\) 托運到新竹，直接寄到宿舍服務中心被連環 call 叫我趕快領走。在校園中乘著微風騎腳踏車是很舒服，但路上的減速丘有點太多惹。我是都直接騎上去新齋，當然車子踏板有三段變速、後輪有重檔，而且多騎幾次就習慣惹。早上睡過頭的話遠在綜四的微積分溜下去只要五分鐘就可以趕到。\n清大繼隔壁交大之後也引進電動滑板車 Oloo, 但因為不是免費的，而且站點也很少，所以我還沒騎過。\n校本部也有環校的校車，分成順逆時鐘、從正門或綜二出發，部分有大型巴士班次，會經過半山腰的人社院與山上的科管院等，我覺得班次算多。大一的英文都選在人社院，我都搭校車上山，雖然徒步其實也不會太遠，下山時我就會散步。\n大一下修惹在南大的體育課，校區區間車的班次我個人覺得其實也不少，還滿方便的。此外，學校還有台聯大系統的校際聯合專車、中研院區間車、同步中心區間車等，不過我就沒搭過。\n校外# 新竹的公車並不太發達，清大到高鐵站只有 182, 還是差不多四十分鐘一班（隔壁交大有高鐵站校車），第一次回家雙十連假的週五在路上塞爆，平常 Google Maps 24 分鐘的路程直接超過一小時，然後就錯過高鐵補差價，從此就不搭高鐵回家惹。\n往火車站有好一點，藍線 1 區跟 5608 班距都還行。如果比較多同學要一起出去吃吃或玩玩，大家會叫黑車直接到學校裡面，在此之前我還真難想像白牌車，有時會擠很多人、往往不太繫安全帶，開起來又超兇，不過就是相對便宜又方便。\n國高中的時候跨縣市的交通我都搭高鐵 ，而且對客運有點不以為然 。上大學之後才發現客運也不差，而且清大門口就有客運站其實很方便，最大的好處是時間彈性很多，因此後來回家就常常搭客運。但今年由於校門口的工程，客運站暫時遷移至稍遠處，而清大工程毫不意外的又延宕惹。\n需要平板嗎？？桌機跟筆電怎麼選？？# 上大學之後每個人應該都會需要有一台電腦，不過也會常常看到有人問需不需要使用平板。平板當然不會是必須的，畢竟電腦基本上都能勝任絕大多數的場合。不過家裡有台多餘的 iPad Air 3, 所以就讓我帶去大學。過惹一年必須承認平板真的很方便，雖然我還是習慣手寫跟翻頁的感覺，但拿平板閱讀一些文件或簡報都很合適。最大的優點我覺得是輕巧便攜，不必打字的課我後來都帶平板而非筆電惹，\\(13\u0026quot;\\) 相較之下真的重到不想背出去。雖然 iPad 的功能還是有點受限，不過搭配 Mac 的體驗還不錯。\n桌機的話就真的比較少同學在使用惹。剛搬進宿舍時我也只有筆電，加上複合轉接頭跟外接螢幕。畢竟每天都需要花不少時間盯著螢幕，系上許多人也是這種組合。不過，轉接頭同時處理乙太網路跟 HDMI 轉 USB-C 的負載似乎偏大，幾週後就滿容易熱當。後來家裡幫買惹一台 M1 的 Mac mini, 小小台很適合宿舍，所以筆電就這麼被我冷落惹 QQ. 不過大二上要修羅設實驗，如果軟體真的只能給 Windows 用那我只能把筆電雙系統。我現在的組合是 M1 Mac mini + Intel MacBook Pro, 如果兩者 CPU 互換感覺可以更加利用各自的優點，是有點可惜。\n","date":"Aug 1, 2022","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-guides/","series":["清大新生參考"],"smallImg":"","tags":["清大"],"title":"清大新生參考"},{"categories":["拉麵🍜"],"content":"原本與吞山郎共用三民路上店面的牛庵，在七月底時公布搬遷至捷運文心櫻花站附近，趕在那之前我約惹一個不吃牛的朋朋順便回一中晃晃，還好他有唐揚雞咖哩飯。\n至於空下來的店面，竟然由貍匠體系原本遠在太平的激勵軒搬來取而代之，順便改名為鷄勵軒。由於地理因素加上我有點懶，之前激勵軒一直是我貍匠六家店中唯一尚未嚐試過的店。太平原址好像又是另一家豚骨一笑搬過去，但應該不是貍匠的。\n因此，當系上的同學們跑來一中商圈附近逛逛，想要找一間拉麵吃看看時，一定是趁機順便嘗鮮。我點的這碗是午骨白湯，一看到菜單還想說牛庵不是搬走惹嗎，原來是向牛骨白湯致敬啊，以雞白湯的基底，加上澳洲和牛與些許牛油點綴。雞湯本身確實足夠醇厚，甚至還有雞油漂浮於其上。而溏心蛋跟隔壁吞山郎同樣是有經過酒釀的。\n只能說一中學弟們真幸福，畢業之後貍匠才來開店。\n🏬店名 鷄勵軒 🏠地址 404 台中市北區三民路三段 75 號 🔗連結 Instagram ","date":"Jul 31, 2022","img":"https://nevikw39.cf/images/chicken-power.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/chicken-power/","series":[],"smallImg":"","tags":["貍匠","名店拉麵"],"title":"鷄勵軒"},{"categories":["拉麵🍜"],"content":"放暑假後本來約惹一些高中朋朋們去看捍衛戰士：獨行俠，但其中一位突然家裡因故而無法赴約。因此，兩週過後三個自高一起同班的就補約在他家附近的拉麵店。\n鮭の大助是台中相當知名的拉麵店之一的七面鳥的第二家分店，從店名容易知道與貍匠體系的麵本初同樣是以魚類作為主角的創作型拉麵店，人氣也不輸本店。雖然是在炎炎暑假平日中午而且開店前就到惹，我們還是等惹一輪、超過一小時才入座。有趣的是，中間還遇到一個高一班上也考至清大的同學。\n我從小就不太喜歡吃魚肉，但這陣子鮭の大助也沒有什麼限定，因此就點最標準的鮭白湯。湯頭確實有著鮭魚獨有的腥味，不過喝起來算是順口，搭配上一旁的柳橙，其實還不錯。除惹鮭魚及數個蛤蜊以外，還有豬叉燒與雞叉燒。最後一定要留一點濃郁的白湯淋上免費招待的一碗白飯。\n吃飽之後我們散步到附近的審計新村，其實小小的實在沒什麼好逛，買惹三支平均單價 \\(66\\frac{1}{3}\\) 的霜淇淋禎的是挺盤的 ==\n🏬店名 鮭の大助 🏠地址 403 台中市西區向上路一段 170 號 🔗連結 Facebook ","date":"Jul 13, 2022","img":"https://nevikw39.cf/images/sakenooosuke.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/sakenooosuke/","series":[],"smallImg":"","tags":["七面鳥","名店拉麵","D7000📷"],"title":"鮭の大助"},{"categories":[],"content":"競賽# ICPC 的賽季在上學期即落幕惹，這學期都是比較休閒的比賽，因此就不用單獨的文章惹。\nTTCPC# Tai-Tsing-Chiao Programming Contest 台清交程式設計競賽，今年是輪到我們清大舉辦。因為疫情的緣故，很早就知道只有餐盒，但實際見到餐盒本人是真的有點偏單調難過。前五名好像都被台大與交大包辦，我們這隊好像是第六，畢竟因為清大最強的兩隊沒有參加。\nABPC# All Beginners Programming Constest 是系上舉辦的新人賽，我是與室友及班上的朋朋一隊。因為疫情的緣故，比賽延期至 TTCPC 的隔天。相比之下餐盒實在好太多，除惹一個三明治之外還有泡芙跟巧克力蛋糕，賽中競程助教還打電話叫大苑子的繽紛水果茶。不過比賽的結果是燒雞惹，封版前還有前六的樣子但最後跌到八九名的樣子。\nHP CodeWars Univeristy Edition# HP CodeWars 原本是辦給高中生的程式競賽，過往都在南港一帶，並且保持著程式競賽的優良傳統 \u0026mdash; 附贈一件 T-shirt 及備有大量美食 \u0026mdash; 我高二的時候也曾參加過，今年則是第一次舉辦大學版的比賽。因為疫情的緣故，CodeWars 也是提供餐盒，但是是有雙主菜的那種飯店高級餐盒，跟上週的 TTCPC, ABPC 完全不在同一個等級。因為真的吃得太飽，晚上跟高中朋朋約在南港的貳樓我點惹一堆都吃不下。除惹標配的 T-shirt 之外，還送惹小袋子跟筆記本。獎品的部分則是跟高中時一樣，全部都是用抽的，我抽到一張君品酒店雲軒西餐廳平日兩客牛排吃到飽的餐券，最後在二手拍上以 \\(\\$1280\\) 售出，把交通費都賺惹回來。說回題目本身倒是讓人有些微詞。Constraints 不是很明確，題型偏向一些瑣碎的實作，競賽性反而感覺不如高二 CodeWars 2019, Online Judge 也很神奇，會把 compiler warning 當成 output 的一部分，但整題而言是很開心的體驗。\nAIPC# All Individual Programming Contest 是系上的年度個人賽，因為疫情的緣故，從六月初延至暑假，也因此開放今年新生參加。前一天的 AtCoder Beginner Contest \\(259\\) 我才嚴重燒雞，創下個人最悲劇的紀錄，A WA 四次直到四十三分鐘後才做出，B, C 也分別 WA 三、二次，倒是 D 一發 AC. 我不信邪想說很久沒打 LeetCode, 結果也是徹徹底底的崩潰。\nAIPC 也是過惹許久才發現簽到題 J, 而 C 看起來跟線段很有關係但我英文閱讀燒雞亂砸線段聯集一通，後來終於發現其實是線段交集。最後我好像排在系上十四、五名左右 QQ. B 開場想很久 DP 題還是沒做出來，很多人解的 E 也是可惜。\n當天下午還有 Google Kick Start Round D, 但我真的不敢打惹。晚上的 Codeforces Round \\(805\\) (Div. 3) 原本狀況不錯，甚至是我地首次在 Div. 3 做出 E, 一度被預測 rating 可以小漲，但我 C 用惹 hash table, 在 System Test 慘遭 hacked. 只能說這陣子真的狀況不甚好 QQ.\n疫情# 這學期起初由於微積分改至校門口的綜四上課（關於其諸多缺點，可參考 ptt NTHU_Course 板），少數的好處是比較有機會去校外走走、跟班上同學們吃吃學餐以外的食物。\nABPC 的隔週一，有鑑於五月初疫情升溫，學校過一陣子隨即宣布進行兩週遠距教學演練，我東西簡單收收隔天就回家惹。在交大宣布遠距至期末後，清大也隨之跟進，頓時有種這學期跟大一就這樣嘎然而止惹ㄇ的感覺。不過我倒是在這之後才回去學校一趟，領考卷、拿一些東西跟打一下系桌。那天早上一個室友才正回家，剩下兩個都還在，不幸的是他回家之後就快篩陽性確診，兩個室友都快篩陰性，但隔兩天還是被學校請出。我因為沒有直接接觸所以還是可以待在宿舍，不過打完系桌隔天趕緊就回家惹。\n接著再回到宿舍，就是由於部分維持實體的期末考惹。我修的邏設比較晚考試，因此也比較晚回學校。考完試之後就待在宿舍耍廢，甚至把超過三年沒完的 Minecraft 都載回來惹。為惹看、領考卷，再加上配合家裡時間，最終拖到押線退宿。\n","date":"Jul 11, 2022","img":"https://nevikw39.cf/images/abpc.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-cont/","series":["大學"],"smallImg":"","tags":["HP CodeWars"],"title":"大一心得小結 (cont.)"},{"categories":[],"content":"在清大的第一年，由於疫情的攪局，結束得十分突然。承上學期, 一如過往慣例寫寫這學期的生活．\n助教# 上學期導聚的時候跟導師聊到我是 APCS 組的、考過免修測試在修程設二，恰好導師下學期要開程設二而他缺一名負責出題的助教。當時其實我很訝異，因此也沒有馬上答應。我曾聽說過有些台大資工的大一也會擔任助教，但我不認為我能夠跟他們相比。上學期末的時候導師發 email 再次詢問我的意願，我問惹一下去年出題的情形。這畢竟是個很難得的經驗，猶豫惹一下我還是答應惹。\n導師其實去年才進入清大服務，很年輕長得高高帥帥的，專長是機器學習，下一個學期開設的機器學習好像是一選系上待亂數人數最多的課程。寒假初程設二助教群第一次開會，但我出門前被系上同學找去問程設一期末專案的一些問題結果遲到惹。事後有再特別傳訊息給教授，畢竟不能第一次就留下不好的印象啊。這學期事務組的助教都是學姊，可能是導師的專題生，叢集競賽的學長姐組員好像也將進入導師的實驗室。\n擔任助教的消息一開始只有告訴修隔壁程設的室友，可能的修課同學我也只知道一個高中社團朋朋，後來他還是加簽去隔壁班。不過開學後跟一群班上朋朋們去惹東門市場對面的居酒屋，我就順口說溜惹嘴，席間剛好有兩位修課同學。如果有個助教朋朋，他或許可能幫你快速 Debug, 回答問題 ，甚至偷看成績跟可能抄襲你的同學的名字。不過基本該有的職業道德，我肯定恪遵不渝。後來看惹一下名單，也有再認出幾個名字。\n程設二 Online Judge 出題的範圍主要是 linked list, 樹與圖的基礎、C++ 的新特性與 STL 的應用⋯⋯等等。負責出題的助教還有目前學校 ICPC 第二名那隊的李學長。我們出的題目被用於作業、小考與段考的部分，其餘則是事務組的學姊們選自 NTHU OJ 上的舊題庫或作業、小考。\n瑕疵# 高二擔任電研社教學時是曾有出些習題與舉辦兩次社內賽的經驗。但我這學期初的第一題就出包惹，一個 partial judge 題，原本期望以 \\(O(1)\\) 的空間判斷 linked list 是否為回文，許多同學開一個額外的陣列把 linked list 記錄下來就算惹，竟然有人只判斷頭尾是否相等的假解，測資亂數產生的技巧太糟被唬爛惹。發現之後我有補上 hacking 假解的測資，但我也想不到怎麼卡空間。更糟的是這題還被選為 lab 1, 我只能儘快告訴學姊這個狀況。\n另外一個致命的錯誤發生在某個物件導向的題目，我原本是在建構子與解構子分別 new[], delete[] 動態配置記憶體，但這引發一些奇怪麻煩事，後來改成 std::array\u0026lt;,\u0026gt; 並以 std::fill() 初始化，但考前幾天學姊說不要用 std::array\u0026lt;,\u0026gt;, 因此臨時再改成傳統的陣列，但我把 std::fill() 換成 memset() 時誤把後兩個參數給搞錯惹，其實學姊在 Windows 上的 Code::Blocks 就有發現 Segmentation Fault, 前一天晚上跑去電腦教室確實重現這個錯誤，但我因為自己電腦與 OJ 上都看似沒有問題而採用比較唬爛的假解，最後還是修課的朋朋告訴我才知道這題送分。\n我覺得自己出題都想不到有趣的敘述也沒搭配什麼梗圖，可能我真的是個無聊的人。題目的靈感不少也是來自網路，甚至是自己高中出的題目。第一次期中出惹一個偏難題，是從學長出的題目延伸並改編自高二參加的 TOI 入營考第二題，但我提示幾乎寫的跟敘述一樣長，最後只有一個人 AC, 教授還說這個難度不錯 (? 遠距的期末則是從去年 NCPC 決賽挑一題簽到題，這次有十多人 AC.\n最後是關於待遇的部分，我當初也多少覺得這應該是個有給職，朋朋知道後也多少都會好奇，父親甚至說這樣一來我就要繳稅不能被歸為撫養之類的。不過由於我的臉皮實在很薄，我一直沒有去問教授這個問題，直到開學後一陣子寄信給我。這學期我總共出惹十三題，算起來平均每題大約是 \\(\\$1000\\), 應該算是很不錯的。\n這學期的出題細節都在這個 repo, 我那時都還是自己寫 Python, shell script 生測資與檢查等等。未來假若還有機會，再試試看專業點的 \u0026quot;testlib.h\u0026quot;.\n課業# 這學期從選課開始就不太順利，第一次選課沒有選到系上中文的邏輯設計、核心通識，體育經過第二、三次選課依舊全部槓龜。後來直到線上加退選時，我有天驀然想起，首先填惹七個體育，包括跆拳道、空手道，甚至是一些水上活動的，最後很幸運的選上相對比較好的健走體適能，雖然在南大但也該滿足惹。隔幾天也亂數加選上評價好又熱門的核通 \u0026mdash; 論孟選讀。\n起初雖然僅僅修惹 \\(18\\) 學分，但過起來遠沒有上學期輕鬆。微積分與物理超出高中範圍太多，準備起來需要花上不少時間。邏設大概是這學期最令我頭痛的科目惹，第二次選課我就乖乖選英文授課，但後來才知道很多人都有加簽到 QQ. 前面開頭的布林代數是離散數學的基本，K-Map 在古代的高中資訊能力競賽筆試也多少或許會出現，但第一次段考就燒雞惹。進入一些組合電路後就開始覺得吃力惹，更不用說循序電路，我在第二次段考前才想到應該要看 OCW 的，最後還是有點悽慘。但是寫 Verilog 的 lab assignment 我覺得還滿有趣的，可以 ssh 到系上的工作站，第三次 pattern matching 跟 KMP, Z algorithm 也很相關。\n因為選上核通，開學後就因此把另一門英語授課的選修通識退掉。殊不知一切才沒有那麼順利。我確實在這門課不夠用功，以為會是像高中文化基本教材。期中考的題型是很開放的申論，只能說跟我頻率不合吧，而老師公佈成績的方式是下課時排隊問成績，其他的同學都是 \\(8, 90\\) 分，我卻只有 \\(60\\) 分，期中考又明文佔總成績的三成。那陣子接連在準備普物跟邏社的二段，還有叢集競賽的模擬賽，程設助教出包也是那時候的事。雖然我很不喜歡放棄的感覺，但最終還是選擇二退，這真的是個艱難的決定。有朋朋修同個老師的莊子，雖然期中考高達 \\(85\\), 但總成績只有 B+, GPA 跟 T 分數直接被送下去 QQ.\n因為上學期修惹程設二，這學期不知道要修什麼，為惹避免低修只好修資結。教授的英文是講得很好，但個人真的覺得偏無聊。不論是作業抑或小考的 OJ 題目，頂多是囉嗦、繁瑣又惱人的實作題，沒有什麼存在技術成分的難度。Partial judge 的題型我個人覺得應該要像 IOI, TopCoder \u0026amp; LeetCode 那樣，要求實作一個參數們與回傳值有意義的完整函式，而不是制定大量瑣碎的輸出入格式。兩次紙筆段考沒有考好當然是我自己的問題，但是修到一門學不了東西又令人煩躁的課，還被成績刷 QQ.\n上學期只有 \\(0\\) 學分的體育拿 A-, 結果這學期兩個 \\(3\\) 學分的必修拿 A-, 更只有 \\(2\\) 學分的英文 A+. GPA 如我所料，果真跌破 \\(4\\) 字頭大關，與上學期相比，幾乎退步惹將近一個等第。上大學後不管競賽、讀書或是生活好像都普普通通，暑假要乖乖看高等離散、線代跟計網概的 OCW.\nTo be continued\u0026hellip;\n","date":"Jun 25, 2022","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh/","series":["大學"],"smallImg":"","tags":[],"title":"大一心得小結"},{"categories":[],"content":"清明連假回家之後，從家裡帶一支昇恆昌平行輸入的 Penfolds Bin 128 Coonawarra Shiraz (2017) 去宿舍。Penfolds 是澳洲最著名的酒莊之一，這款 Bin 128 採用的是南澳 Coonawarra 產區的 Shiraz 葡萄。\n借放在朋朋的冰箱簡單冷藏一下，酒瓶的設計是沒有軟木塞而好開的金屬旋蓋。倒進杯子中，呈現的是深邃的石榴色，在光線的照射下杯緣則帶有紫紅色光澤。輕輕嗅一下，撲鼻而來的首先是葡萄本身固有與酒精的香氣，接著隱約可以感受到陳年法國橡木桶的氣息。\n酒精濃度為 \\(14.5\\%\\), 是屬於比較高的紅酒，整體的風味也非常濃郁強烈。葡萄的甜味並不特別突出，但單寧的苦澀感十分明顯，嚐起來還有些滑膩。有朋朋則覺得這已經是比較甜的紅酒惹。\n我們是在考完微積分期末的那天晚上開來品嚐，考邏設與普物的前一夜又被我拿來助眠。最終邏設期末有稍微板回一城，看來 bin(128)=0b'10000000 居功厥偉 (?\n","date":"Jun 13, 2022","img":"https://nevikw39.cf/images/penfolds_bin128.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/penfolds-bin-128/","series":["酒🥃🍷🍺"],"smallImg":"","tags":[],"title":"Penfolds Bin 128 Coonawarra Shiraz"},{"categories":["拉麵🍜"],"content":"上大學之後一直有想要約一個高一的朋朋吃飯，但他實在是偏難約，讀中興卻不住宿而每日通勤往返學校與南投，同時還在面對包括轉考在內的課業壓力。迨清大由於疫情全面遠距之後又經歷一些波折，我們好不容易終於約成功惹。\n這家拉麵店原先位處文心路上，時名風拉麵，而後喬遷至五權車站、千勝軒一帶，並更名為麵吉祥。\n我點的是辛味噌拉麵，雖然選的是中辣但其實感覺沒有很辣。這家店的昭和布丁也是一大特點，可惜的是我們比較晚到只剩下一個。事後有點越想越不對勁，就算只剩一個還是可以點來分著吃啊。\n🏬店名 麵吉祥 🏠地址 403 台中市西區樂群街 381 號 🔗連結 Instagram ","date":"May 27, 2022","img":"https://nevikw39.cf/images/mianjixiang.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/mianjixiang/","series":[],"smallImg":"","tags":["D7000📷"],"title":"麵吉祥"},{"categories":["拉麵🍜"],"content":"春假的最後一天原本預計跟高中同學回一中，但由於疫情台中市政府宣布校園停止對外開放。雖然隔天正是微積分期中考，但我仍然和同學約去吃拉麵。本來是想要去吃麵屋聚，但我沒注意看 Google Maps 上的休息日而撲空，因此我們就臨時改吃有囍拉麵，卻剛好遇上因為有囍下半月將整修的排隊人潮。\n考完微積分的晚上沒有演習課，因此跟朋友約去吃看看麵屋一鮫的另一派繼承者，近期新竹排隊最誇張的拉麵店麵屋吉光。我們大概四點半左右出發，五點多開始排隊。原以為或許六點半前就能吃到，誰曉得足足排好排滿超過兩個小時，七點後才終於得以入座。\n我點的這碗是溏心蛋醬油豚骨濃湯拉麵，比起蘭丸又更為濃厚，這次我的無法把湯喝完惹。比較遺憾的是當是店內已經沒有白飯惹，因此只能選擇免費加麵。原來選濃湯是想要加飯，早知道點清湯就好，連兩天吃拉麵的負擔其實有點大啊。下次得更早出門才有機會吃到濃湯泡飯。\n🏬店名 麵屋吉光 🏠地址 300 新竹市東區關新東路 138 號 1 樓 🔗連結 Instagram ","date":"Apr 7, 2022","img":"https://nevikw39.cf/images/kikkou.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/kikkou/","series":[],"smallImg":"","tags":["一鮫","D7000📷"],"title":"麵屋吉光"},{"categories":[],"content":"上學期去朋友房間喝幾次酒，但都是喝他們的酒。爸爸知道後，寒假結束前拿惹一支 Glenfiddich 十五年的酒廠限定版蘇格蘭單一麥芽威士忌🥃讓我帶去跟同學分享。\n這支威士忌以非冷凝處理，酒精濃度高達 \\(51\\%\\), 外觀看起來是呈現如深大麥般的煙灰金，在燈光下則顯現出晶瑩剔透的琥珀色光澤。\n開瓶以後，細緻的花香與奶油香首先立刻撲鼻而來。倒入杯中並加入少許冰塊，果香隨即被釋放而散發出來。輕輕淺嚐一口，我立刻被強烈而嗆辣的勁道給嚇惹一跳。與過往喝過的其他威士忌與烈酒存在顯著的差異，我的下巴感受到炙熱的灼燒感，完全猝不及防，差點沒吐惹出去。稍微含著一下，可以感受到酒精在舌尖上的顫動。吞下去之後，一股暖意自胃中油然而生並冉冉傳上，同時嘴裡留下香甜溫潤的餘韻。\n接下來的一陣子，失眠的夜晚我總會倒點威士忌來助眠。考微積分危機分⚠️的前一晚，當然也需要來點威士忌，威忌分🥃一下。\n","date":"Mar 27, 2022","img":"https://nevikw39.cf/images/glenfiddich-15yo-1.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/glenfiddich-15yo/","series":["酒🥃🍷🍺"],"smallImg":"","tags":["D7000📷"],"title":"Glenfiddich 15 y/o Distillery Edition Single Malt Scotch Whisky"},{"categories":["拉麵🍜"],"content":"拉麵豚鷄魚位於麵屋一鮫的故址，而麵屋一鮫原是新竹頗負盛名的拉麵店之一，卻於我考上清大的暑假歇業，其臉書粉專、Google 地圖與店內的販賣機皆由拉麵豚鷄魚所繼承。不過另有傳聞指出，同陣子在附近新開業的麵屋吉光也與麵屋一鮫頗有淵源，而且人氣更為驚人。\n這次和兩位交大應數的朋友約得很早，約莫五點左右即入座開始享用。我這次點的是期間限定的松露清湯拉麵，湯頭的確非常甘醇鮮美，但舒肥的叉燒有幾塊太硬惹有點可惜。\n這是第一碗用 raw 格式拍下的拉麵，風格的確與手機別有差異。回到學校以後還可以打一下系桌，然後又跟班上同學去東門對面的居酒屋續攤。\n🏬店名 拉麵 豚鷄魚 🏠地址 300 新竹市東區關新二街 133 號 🔗連結 Facebook ","date":"Mar 25, 2022","img":"https://nevikw39.cf/images/same.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/same/","series":[],"smallImg":"","tags":["一鮫","D7000📷"],"title":"拉麵 豚鷄魚"},{"categories":["拉麵🍜"],"content":"228 連假時，家裡剛好想吃拉麵。如果要找一間不太需要排隊、有停車場，而且最好是我一直想吃只是太遠的拉麵店，那麼滿足上面所有條件就是麵屋武藏台中首店惹。畢竟吃過北車跟高雄的麵屋武藏惹，卻一直沒吃過台中的反而有點怪。\n我點的這碗是台中限定的味玉角煮拉麵，大塊的角煮吃起來非常過癮，可以免費加麵吃得真的很飽。\n最後應要求感謝老爸贊助本文（Ｘ不過這的確是本站第一碗有人請的拉麵欸\n🏬店名 麵屋武藏 台中首店 🏠地址 407 台中市西屯區台灣大道四段 1038 號 2 樓 🔗連結 Facebook ","date":"Feb 28, 2022","img":"https://nevikw39.cf/images/menya-taichung.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/menya-taichung/","series":[],"smallImg":"","tags":["武藏"],"title":"麵屋武藏 台中首店"},{"categories":["拉麵🍜"],"content":"2022 年的大資盃桌球賽事於高雄舉行，我也趁著這個機會難得南下到高雄兩天一夜遊。出惹高鐵左營站後往台鐵的方向走上樓，雖然花一陣子才找到但就地點而言交通算是非常便利。\n麵屋武藏是來自日本的連鎖品牌，在台灣每間分店都各有特色。我點的這碗是味玉赤武骨拉麵，辣度非常足夠。不過以其價格而言，叉燒的份量實在是偏少。\n最後工系我們系桌最終獲得大會第四名的成績！！\n🏬店名 麵屋武藏 武骨 🏠地址 813 高雄市左營區站前北路 1 號 3 樓 🔗連結 Facebook ","date":"Feb 6, 2022","img":"https://nevikw39.cf/images/menya-kaohsiung.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/menya-kaohsiung/","series":[],"smallImg":"","tags":["武藏"],"title":"麵屋武藏 武骨"},{"categories":["拉麵🍜"],"content":"位於逢甲商圈的 MEN Monster 是有囍拉麵系列的第三家店，定位是創意、新穎的香料拉麵，品質同樣毫不遜色。\n放寒假回到台中後，一時興起就約惹高中同學，總算出門曬曬太陽，還順便坐了兩趟車。\n我點的這碗是經典香料奶油濃湯拉麵，湯頭起初並不那麼濃，隨著香料奶油塊受熱逐漸融化，整體風味的層次不斷改變。憑學生證可以免費加叉燒，還可以免費加藜麥糙米飯，淋上香料濃湯真的是非常享受。\n店內氣氛十分悠閒，是一場很驚豔的體驗。\n🏬店名 MEN Monster 🏠地址 台中市西屯區慶和街 32 號 🔗連結 Facebook ","date":"Feb 3, 2022","img":"https://nevikw39.cf/images/men-monster.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/men-monster/","series":[],"smallImg":"","tags":["有囍","名店拉麵"],"title":"MEN Monster"},{"categories":[],"content":"續 上篇,\n課業# 關於個別科目的心得，基本上我都有發在 ptt 的 NTHU_Course 板, 在此就不再贅述，有興趣可以自行參考。我並不算是極度在意成績的人，但由於我是循 APCS 組管道入學，清楚自己在學科上的基礎可能不若其他同學，因此上大學之後對於微積分、普通物理這類科目算是有認真在讀。\n到惹期末才發現或許是因為運氣好兩個通識都有 A+, 微積分與普物因為與高中的差別還不大也都有 A+. 可惜的是離散數學雖然前兩次期中都是九十幾但期末燒雞，以及資訊導論期末沒寫到最後一頁 QQ, 至於中文拿 A 就沒什麼懸念。因此我這學期的 GPA 以 \\(4.2\\) 坐收，確實是出乎意料地令我感到驚艷，在班上與系上的排名也分別是 \\(2/45,6/130\\).\n然而，正好是從我們入學這學期起學校引入惹 T 分數，伸縮平移後的標準化等第成績，即 \\(T=50+10z_x=50+10\\frac{x-\\bar{x}}{\\sigma_x}\\), 其中 \\(x\\) 是學生原本的等第制成績積分 (lettered grade point), \\(\\bar{x}\\) 是該課程的平均等第制成績積分，\\(\\sigma_x\\) 是該課程等第制成績積分的標準差。T 分數的出發點是為惹解決 GPA 通膨之類的問題，但學校採用等第制成績而非原始的百分成績來做標準化，這樣其實存在著成績失真的問題。假若教師給分傾向於集中在某一等第，則多數人的 T 分數都將趨向 \\(50\\) 或某值附近。如此的機制，根本是在變相懲罰修課成績分佈都很平均的學生。再者，T 分數並不僅僅操之於己，而是取決於其他同學；也就是說，光是自己努力還是不足以追求 T 分數的。這學期的 GPA 已經 \\(4.2\\) 惹，但我該如何提昇 T 分數呢？？難不成需要刻意去修平均不高的硬課？？要知道 T 分數是只有清大自己在玩的，未來不論推甄研究所抑或求職 GPA 才是真諦。\n好笑的是 2/18 的時候校務系統不知道初惹什麼毛病，我的 T 分數突然變成 \\(73.27\\), 這個高到不可思議的數字，連帶著排名也顯示為 \\(1\\), 當然有著暫排名的紅字警語。那時問惹很多朋朋都沒有遇到，我差點就要相信自己是天選之人。當然正式成績公布當天，一切都被校正回歸惹。我好像只有隨手拍限時動態，沒有校務系統的截圖。但那時候下載的 PDF 成績單也是如此，就留著作紀念吧。\n不幸的是系上跟隨學校採用 T 分數以決定書卷獎，我就這麼與書卷獎失之交臂。但拿不到獎當然是我自身的問題，遊戲規則訂惹對大家都是公平的。我的努力顯然還是不足，因為聰明優秀的同學們依然不受影響，只有我在這邊尋找藉口抱怨。追根究柢，我只不過就是剛好運氣不錯成績不錯，就對自己產生錯誤的期望與認知。我可能還是把成績看得重惹些，但讀大學畢竟還是有其他更重要的事。\n","date":"Jan 20, 2022","img":"https://nevikw39.cf/images/nthu-frosh-semester-cont.png","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-semester-cont/","series":["大學"],"smallImg":"","tags":[],"title":"大一上心得小結 (cont.)"},{"categories":[],"content":"進入清大資工的第一個學期轉瞬間就「登出」惹。讓我簡單隨意寫寫一些大一上學期的生活細節吧。\n宿舍# 資工新生住的宿舍是新齋，兩個資工與兩個動機新生一間寢室。新齋位處地勢較高的男宿區，正門經清齋為二一坡，後門則是長長的樓梯通往小吃部。\n新齋確實感覺是相對比較新一點的宿舍，因此有不少特點。整棟宿舍共有八層樓且有電梯但我住一樓因而享受不太到 QQ, 男生在低樓層而女生在高樓層。每四間寢室中間有個小交誼廳，每兩間寢室共用一套半獨立衛浴，熱水全天供應因此半夜三四點也可以洗個熱水澡。此外，飲水機、洗衣與晾衣的設備也都離寢室不遠很便利。\n最大的缺點就空間實在是偏狹小，感覺兩個人背對背的距離太近隱隱有些壓迫感，其他人甚至有可能不易通過，而門把就在我的桌子旁真的往往會被干擾。還有就是寢室內的灰塵不曉得哪裡冒出來得但真的多到很誇張，生態系的話除惹蚊子很多之外，大型怪蟲出現的頻率大約每學期一兩次其實比預期的低。\n另個有趣的點是其他寢室的大燈大概在半夜一點半以後會熄，但我們的卻不會，我一直到後期去惹別房串門子才得知這個事實。整題而言我對新齋的評價還算積極正面，跟高二寒訓住過的交大九十舍相比，雖然公共設施沒那麼豪華、沒有桌球室跟花俏的籃球機，但寢室內裝較新、有自己的桌子，都是上鋪且是有收納功能的階梯而不是傳統的爬梯。\n活動# 由於武漢肺炎疫情的緣故，新生營轉為線上舉行自然沒什麼參與感，宿營當然也就取消。\n第一個參加的活動是中區茶會，當天是週五晚上我原本應該要家教，但因為系學會有補助每人 \\(\\$150\\), 因此看在免費晚餐上還是報名惹。茶會現場的性別比印象中是極為誇張的二十幾比三、四吧，地點在公道五路上的熱炒店。經過一些尷尬的社交環節也差不多吃飽之後，我打算依照原定計畫中離，但學長說系學會是根據相片中的人頭銷帳，結果因此讓其他所有人暫時放下杯箸合影，然後我被灌惹幾口酒之後才趕回宿舍。\n下一個蹭食物的場合是在楓橋之夜說明會結束後的聯合家聚，好多家一起搭白牌計程車到大魯閣新竹湳雅店的涮乃葉。導聚則是選在感恩節當在西門出去、馬偕附近的涮肉亭，席間跟導師聊到我是 APCS 組且有一些競賽經驗，而導師下學期要開程設二又有缺出題助教因此說考慮找我。\n楓橋之夜是系上的一個傳統，每個新生班要上台表演戲劇。我對這種活動其實沒什麼興致，不過抱持著多認識班上同學的心態還是想說參加看看。而我們華班相較於其他兩班並沒有那麼投入於這項活動，最終成果也沒那麼出色，但我認為這確實是與班上同學變得更熟的一個關鍵契機之一。表演結束後，我們先跑去吃臭臭鍋，接著首次去惹機車塔對面的酒吧 JJ, 待到三點打烊之後還去永和豆漿續攤，隔天十點的微積分大家依然準時出席。\n萬聖節的制服趴宣傳稱說顏東勇的微積分會有穿制服加分的機會，但我們這屆都沒有遇到。年底的六系聯合耶誕晚會由於疫情的緣故，不開放飲食也因此沒有辦法暢飲。我發覺我真的很不適合這種場合，播放著震耳欲聾的音樂但我根本不知道該做什麼，只有滿滿的尷尬。\n續篇 在此。\n","date":"Jan 20, 2022","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-frosh-semester/","series":["大學"],"smallImg":"","tags":[],"title":"大一上心得小結"},{"categories":["拉麵🍜"],"content":"難得遇上元旦連假，由於週一我只有服學與遠距的離散，因此只要翹掉打掃就可以多放一天。下午去大慶搭區間快車，週一的人潮明顯少於週日，可以悠閒地坐到新竹車站。\n蘭丸是鷹流東京醬油拉麵旗下的品牌之一。因為中午沒什麼吃而且又排隊惹快半小時，腦波一弱就點惹濃湯肉肉。雖然只有加一次麵，但最終竟然把充滿油脂的湯也喝完惹。\n🏬店名 蘭丸 🏠地址 新竹市東區勝利路 102 號 🔗連結 Instagram ","date":"Jan 3, 2022","img":"https://nevikw39.cf/images/ranmaru.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/ranmaru/","series":[],"smallImg":"","tags":[],"title":"蘭丸"},{"categories":["拉麵🍜"],"content":"其實高三打完 TOI 入營考就曾經想去京都柚子豚骨拉麵中山本店，只是那時遙望長長的人龍就掉頭去吃松屋。\n而 ICPC 台北站賽事結束後，我跟兩位在台北讀書的高中同學約在台大、北科大中間的忠孝店。在捷運上就看到不少穿著 ICPC T-shirt 的選手，出站以後走在 Sogo 旁忠孝東路上被人搭訕（？我以為是廣告推銷完全不以為意逕自直行，結果她是好奇為何路上不少 ICPC T-shirt 但我只能繼續加緊步伐避免尷尬 ==\n我點的這碗是京都水尾柚子胡椒辣味豚骨拉麵，除惹有柚子果肉以外，最特別的莫過於那一大片的海苔天婦羅，不論直接脆脆的吃或是泡一下湯頭都很合適。難得的是店裡的客人並不多，吃飽後我們甚至暢聊許久才離去。\n🏬店名 京都柚子豚骨拉麵 🏠地址 台北市大安區忠孝東路四段 17 巷 4 號 🔗連結 Instagram ","date":"Nov 28, 2021","img":"https://nevikw39.cf/images/yottekoya.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/yottekoya/","series":[],"smallImg":"","tags":[],"title":"京都柚子豚骨拉麵"},{"categories":["競賽🏁"],"content":"就定位而言，ICPC Regional Contest 旨在選出參加 Word Final 的隊伍，有點類似高中的 TOI. 但因為有兩天的賽程與 T-shirt，我認為比起 NCPC 決賽更有高中全國決賽的等級。今年由於疫情的緣故，沒有外國隊伍參加。這兩年的台北站都由北商大主辦，隔著一條街就是成功高中，因此我約惹地頭蛇表弟跟表哥在附近咖啡廳簡單寒暄，結果趕到北商的時候學長們已經等一陣子惹，真是不好意思。\n報到之後領惹名牌、T-shirt、背包與手冊之後拍惹隊伍相片就上去會場惹。隊伍的名牌上的 Asia 被拼成 Aisa, 據說去年就是這樣惹；此外，連 \\(46^{th}\\) 都被誤植為 \\(65^{th}\\). 聽完致詞、說明，測機並放好模板及吉祥物之後，又領惹一盒麵包，清大的隊伍就準備前往旅社。\n我想高中全國決賽跟台北站最大的差別就是官方沒有提供住宿 (X, 或許是系上經費真的十分拮据，首先我們徒步自北商走到在懷寧街上、二二八新公園後的青年旅社。兩隊六人擠一個房間，位在四樓而沒有像樣的電梯且樓梯非常詭異之難走，浴室小到比宿舍還可憐許多，突然覺得高中全國決賽師大安排住在中華電信板橋會館好像沒那麼差。晚上就寢後，房外還不時傳來陣陣低頻短音，我大概一點以後才睡著。隔天的早餐有摩斯的培根雞蛋堡與紅茶，助教他們還要徒步走到北商，我們就自己搭捷運過去。\nM - Escaping the Foggy Forest# 題目應該是給定一個布林矩陣，已知目前所在位置、前方及右側之真假值，求所有可能所在位置之座標。\n1 try, 24 min\nA - Ice Cream# 這題是個超級水題，全場所有隊伍都做出來那種，但是我搞砸惹。內容其實有點像 UVa 11150 或 10346 那種，但是我爛到連這種題目都 WA. 接著換楊學長做這題，但他也被我的蠢感染，我們又吃一個 WA. 最後是張學長重寫才 AC.\n3 tries, 46 min\n因為我超雷，到這段時間我們一直落後於對面高科大的隊伍。\nB - Maximum Sub-Reverse Matching# 一開始是由我負責看這題，但我直接誤會這題的意思，原本是問反轉一字串某個區間使得兩字串相等的位置最多，我以為是配對之後二進位制最大。因此我們直接浪費許多時間，後來楊學長才發現並想出 DP 解。\n1 try, 106 min\n這時有點接近午餐時間，除惹原本桌上的零食以外，陸續送上每人兩個類似洪瑞珍那種三明治。\nJ - Transportation Network# 這題是由楊學長觀察並討論出所有 cases 然後做掉。\n1 try, 216 min\nI - Seesaw# 這題同樣也是由楊學長利用 bitset 搭配一些神奇的技巧做掉。\n1 try, 260 min\n賽後# 最終我們這隊做出五題，剛剛好是第 \\(30\\) 名，有驚無險地壓線獲得 Silver Award, 我要再次感謝兩位學長！！可惜又是由於疫情的緣故，過往主辦單位提供晚宴的傳統被取消惹。\nD - Largest Remainder# 補充這題心得的原因是這又是我超弱的一個鐵證。起初我又想出錯誤的做法，讓我們浪費超多時間。賽後才知道原來這題是位元 DP.\n至於這場比賽我的表現真的燒機，只能說實在是頗糟 QQ\n","date":"Nov 28, 2021","img":"https://nevikw39.cf/images/icpc_taipei_2021_silver.JPG","largeImg":"","permalink":"https://nevikw39.cf/posts/icpc-taipei-2021/","series":[],"smallImg":"","tags":[],"title":"2021 ICPC Asia Taipei Regional Contest"},{"categories":["拉麵🍜"],"content":"ICPC 台北站第一天的行程結束後，或許是因為系上經賽拮据，我們從北商大徒步至位於二二八公園附近的青年旅社下榻，房型還是六人一間。（奇怪的是隔天早餐是摩斯漢堡配上紅茶）\n旅社的地點位在捷運台大醫院與西門站的中間，我跟兩位國中同學在西門町附近的拉麵店中，約的是發源自舊家士林基河路上的這家道樂商店。沿著衡陽路走惹一下才到，排隊的人龍著實不少，直到將近九點才入座。\n我點的是冬季限定的家系拉麵，好像是第一次吃限定，不過算是比較平凡。店內有提供柚子水，挺特別的。\n🏬店名 道樂商店 🏠地址 台北市萬華區成都路 27 巷 12 號 🔗連結 Instagram ","date":"Nov 27, 2021","img":"https://nevikw39.cf/images/dourakubaiten.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/dourakubaiten/","series":[],"smallImg":"","tags":[],"title":"道樂商店"},{"categories":["拉麵🍜"],"content":"麵屋雞金是頗為知名的「五之神製作所」的另一個品牌，主打的就是雞白湯。\n由於兩位優秀的學長，我得以有幸北上參加 ICPC 台北站賽事，第一天中午就來到北科大對面、三創附近的拉麵店。\n這碗是辛味噌雞白湯拉麵，可以選擇免費加麵或肉。辣味噌很特別也很開胃，我把湯都喝光惹。\n🏬店名 麵屋雞金 🏠地址 台北市中正區新生南路一段 6 號 🔗連結 Instagram ","date":"Nov 27, 2021","img":"https://nevikw39.cf/images/torikin.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/torikin/","series":[],"smallImg":"","tags":[],"title":"麵屋雞金"},{"categories":["拉麵🍜"],"content":"東商店是除惹大角拉麵以外，另間隱身在東門市場中的拉麵店。相較於大角，嘟商店的位置好找許多，從中央路的三信行旁一進去的左手邊即是。\n早上比完 TOPC (ICPC Asia Taiwan Online Programming Contest) 後，搭公車趕往東門市場。我似乎很幸運地點到最後一碗拉麵，選的是與大角類似的柚子醬油拉麵，自然免不了比較一下惹。這碗的湯頭柚子味明顯更為濃郁，甚至可以吃到柚子果肉。\n有點匆忙地吃完後我又去趕車惹，還好最終來得及上普悠瑪。另外，這張照片好像是我用單眼拍的第一碗拉麵喔。\n🏬店名 らぁ麵 東商店 🏠地址 300 新竹市東區大同路 86 號 東門市場 #1160 🔗連結 Instagram ","date":"Oct 23, 2021","img":"https://nevikw39.cf/images/higashihouten.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/higashihouten/","series":[],"smallImg":"","tags":["D7000📷"],"title":"東商店"},{"categories":["競賽🏁"],"content":"某種程度上來看，如果說 NCPC 決賽像是大學版的能力競賽決賽而 ICPC 台北站像是 TOI 選訓營，那麼 TOPC 倒可以做為 \\(1!\\) 入營考。NCPC 決賽的前幾名可以直接晉級台北站，其他隊伍則需要參加 TOPC 以獲得資格。\n本來以往清大的隊伍似乎會一起聚在電腦教室，然後外頭備有零食點心可以享受。但是由於疫情的緣故，今年就不能如常比照辦理。不過我們這隊還是決定到資電館 323, 也有看到其他隊伍在 325.\nA - Olympic Ranking# 就是給定一些國家的金牌、銀牌及銅牌數量，輸出依照金、銀及銅多寡排名最大者。賽中我寫一個 \\(O(N\\log N)\\) 的排序，後來學長才說我中毒惹 \u0026ndash; 求第 \\(k\\) 大只要 \\(O(N)\\) 啊！！\n1 try, 17 min\nJ - JavaScript# 這題就是簽到水題，如果兩字串都是數字則輸出其和，否則輸出 NaN.\n1 try, 20 min\nB - Aliquot Sum# 看起來是判斷一個數是盈數、完美數或合數，實際上就是如此。但是我們看到有 \\(T\\leq10^6\\) 個 \\(\\leq10^6\\) 的數的輸入就很擔心直接實作會不會 TLE, 然而看看這題很多隊伍通過，而且發現這題時限是八秒。WA 一次好像是因為 \\(1\\) 的 special case.\n2 tries, 38 min\nD - Drunk Passenger# 這是一題數學機率題，張學長好電推一下就 AC \u0026gt;\u0026lt;\n2 tries, 75 min\nC - A Sorting Problem# 對於一個陣列，每次可以交換其值相差為一的元素，問最少交換次數使得陣列被排序。我們花惹一點時間才證明通靈出這題與求逆序對 (inversion pair) 數量是等價的，理由是把 index, value 互換之後原問題即轉化為交換相鄰元素使得陣列被排序。我那陣子剛好有教人 merge sort, 但合併還是寫爛惹一下子 QQ.\n1 try, 98 min\nE - Eatcoin# 這是一個奇怪而且偏複雜的大數題，楊學長用 Python AC 掉 \u0026gt;\u0026lt;\n1 try, 141 min\n最終我們總共作出六題，以第 \\(29\\) 名（清大第二）獲得參加 ICPC 台北站的資格。\n這場比賽我自評表現算是差強人意喇。\n","date":"Oct 23, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/topc-2021/","series":[],"smallImg":"","tags":[],"title":"2021 ICPC Asia Taiwan Online Programming Contest"},{"categories":["競賽🏁"],"content":"上惹大學後，似乎沒有理由不繼續參加競賽（？其實高中就有想寫一些心得，只是一直沒有付諸實行。因此，趁著還有點印象，趕緊留下一點紀錄並養成習慣。\n大學競賽有兩條主線，分別是教育部主辦的大專電腦軟體設計競賽 (National Collegiate Programming Contest, NCPC) 及 ICPC Foundation（古代為 ACM）主辦的 International Collegiate Programming Contest (ICPC), 可以對應到高中的資訊學科能力競賽及 International Olympia in Informatics （IOI). 其中，不一樣的是 NCPC 只有初賽及決賽，減少惹高中時期的地區複賽；此外，ICPC 的規模比 IOI 盛大許多。\nNCPC 的初賽原則上是採網路形式統一舉行，但前一年度排名前三的學校（通常是臺、交、清）可以自行推選六隊代表逕入決賽。而今年清大校內初賽的日期與免修測試不巧撞期，由於已經繳費，我本來想說天意如此。沒想到，校內初賽告一個段落之後的某天，突然有位張學長私訊我，說他們那隊只有兩個人，雖然可以晉級但缺一個人。於是，我就非常幸運地加入 Dkjistra（關於隊名的八卦，是因為學長在寫 Dijkstra 時常因為 std::priority_queue 搞混，很巧的是清大另一隊 Disixtra 也是不約而同），獲得參與 NCPC 決賽的機會。\nNCPC 決賽像 TOI 入營考一樣，分為南北兩地同步舉行。因此，我再度前往師大圖書館校區。決賽賽程僅有一天而且沒有送 T-shirt, 感覺等級輸高中全國決賽一截。早上測完機之後，中午只有簡單的便當可以吃。由於疫情的緣故，也沒有提供下午茶點心。以下就簡單說說解題的過程：\nC - Distribution Distance# 我們這隊開賽的速度都不快，直到將近一小時 \u0026ndash; 比賽經過五分之一 \u0026ndash; 才拿到第一個 AC. 現在事後看看這題，其實就是給兩個長度相等的陣列，選取某些元素使得前者減掉後者最大。\n1 try, 59 min\nA - Perfect Power# 接下來的時間楊學長先寫 B 但 WA. 我看惹一下 A, 題目是對於一個 \\(n\\) 找到 \\(m, k\\) 使得 \\(n=m^k\\) 且 \\(k\\) 盡量大。我突然想到在高鐵上翻 IOICamp 的講義，剛好看到其中一段說區間開根號操作的 lazy propagation 可以記錄區間是否都是 \\(1\\), 因為任何數開很多次跟號很快就會變成 \\(1\\).\n雖然沒有什麼關係，但我因此得到一個差不多 \\(O(1)\\) 的解：從 \\(i=63\\) 開始遞減，看看 \\(m_i=\\left\\lfloor\\sqrt[i]{n}\\right\\rfloor,{m_i}^i\\) 是否等於 \\(n\\).\n1 try, 77 min\nB - Promenade Dance# 其實這題就跟今年 TOI 入營考 C一樣，是的沒錯，就是一個 LIS 的包裝題。但冥冥之中又出事惹，丟上去吃惹兩個 WA, 而且我們都找不出 bug. 後來換成張學長重寫一遍才終於 AC.\n3 tries, 134 min\nJ - Shortest Paths with Unvisited Sightseeing Spots# 這題也有不少隊伍做出，題目是要求無向圖上兩點最短路徑中，最多能經過幾個特定頂點。Dijkstra 的過程中，同時記錄現在這個頂點經過多少特別的頂點，\n1 try, 147 min\nE - Archery at the Summer Opymlic Camp# 這是一個偏噁心的幾何題，僅僅七隊做出。內容是給定 \\(n\\) 個凸多邊形及其分數，且 \\(\\forall i \u0026lt; j, C_i\\supset C_j\\), 對於 \\(m\\) 個點，根據其在多少個多邊形內計算得分。\n我們的模板剛好有帶到判斷點是否在多邊形內，所以再配合二分搜即可求解。只是在二分搜的過程中出惹一點小問題，最終我改成跳躍式的並開 long long 終於 AC.\n這題做出來時理應已經封版，但我們還是得到一顆氣球。\n2 tries, 256 min\n賽後# 我們最終以第 \\(28\\) 名（清大 3/6）做收，獲得惹佳作。拿到一之鄉的餐盒是有點空虛。離開賽場之後才知道原來當天下午開始下起大雷雨，清大的選手們一起去師大附近的瑪莉珍披薩聚餐。因為清大有一隊竟然棄賽沒參加，所以我們獲得加菜金。\nG - Assigning Frequencies# 雖然這題只有八隊解出，但最後剩下半小時的時候我有想試試看這題，因為看起來就像是模擬著色的過程即可。但我寫爛掉惹，連範測都沒過。時隔一陣子我重寫然後丟上 ITSA 然後就 AC 惹 QQ.\nL - Majority Vote# 賽後看到記分板上這題不少隊伍做出但我卻沒什麼印象，讀一下題目發現就是一個 \\(O(K\\log K\\times N)\\) 的排序題，丟上去之後卻吃惹一個 WA. 跟學長討論後才發現沒考慮到偶數個選民可能有兩個候選人排名相等的情況，改成 stable_sort() 就 AC 惹。\n總而言之，我自評自己在這場比賽的表現還算可以喇。\n","date":"Oct 16, 2021","img":"https://nevikw39.cf/images/ncpc_final_110.JPG","largeImg":"","permalink":"https://nevikw39.cf/posts/ncpc-final-110/","series":[],"smallImg":"","tags":[],"title":"110 學年度大專電腦軟體設計競賽 (NCPC) 決賽"},{"categories":[],"content":"雖然由於疫情延後一週，我的清華資工大一生活於九月十八日週六入住宿舍以後差不多正式展開。因為延後入住的緣故，當週恰好就是中秋連假。因此，我留在學校，這是首次不在家的中秋節。\n清大的環境十分自然且清幽，儼然是座遠離塵囂的森林大學城，鮮少有任何光害，夜晚只要仰首往往看得見星空。\n吃過晚飯以後，一時之間突然想起我有帶著家中塵封已久的 Nikon D7000 而起惹興致，拿起單眼相機，自己胡亂抓一下參數，在 M 模式以 405mm 的鏡頭與 ISO 100, \\(f\\)8 以及 1/200s 來拍攝望月，效果感覺還行，倒也拍得煞有其事。\n由此觀之，單眼的感光能力與手機確實完全不在同一量級。即使是十年前的老古董單眼配上我這個攝影的門外漢，仍舊可以輕易地拍出月球表面的地貌。這種先天硬體條件上的懸殊，是手機無論如何宣傳 AI 計算攝影皆注定無法企及的。\n","date":"Sep 21, 2021","img":"https://nevikw39.cf/images/nthu-moon-festival.jpeg","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu-moon-festival/","series":["大學"],"smallImg":"","tags":["D7000📷","清大"],"title":"清大中秋節隨手攝月一幀"},{"categories":["拉麵🍜"],"content":"吞山郎是台中知名拉麵體系貍匠品牌的第五家店，與牛庵位於同一地址，不過開幕消息似乎較早一點傳出。\n本店主推二郎風格拉麵，只是食量小如我很有自知之明，並沒有輕易挑戰。\n因此，我點的這晚是「珠貝鹽味雞清湯拉麵」。首先湯頭是很香醇順口的雞湯，加以五六顆小珠貝的點綴。舒肥叉燒有兩個部分，包括雞腿及炙烤過的雞胸，份量十分足夠。溏心蛋有使用酒類醃漬，吃起來別具風味。湯裡還有一顆小蕃茄，似乎有糖漬過。\n🏬店名 吞山郎 🏠地址 404 台中市北區三民路三段 75 號 🔗連結 Facebook ","date":"Aug 26, 2021","img":"https://nevikw39.cf/images/tunshanlang.jpeg","largeImg":"","permalink":"https://nevikw39.cf/ramen/tunshanlang/","series":[],"smallImg":"","tags":["貍匠"],"title":"吞山郎"},{"categories":["拉麵🍜"],"content":"這家拉麵與附近的七面鳥相同，皆是原訂一中畢業考中午要跟同學去吃的，孰料疫情實在來的太突然，在畢業考取消後、內用禁令發布前我還去吃惹七面鳥，但麵屋零一拖就隔惹三個月喇。\n這碗是濃厚醬油拉麵，湯頭就是很單純的醬油，另外還吃得出一點鹽味，叉燒則有四大塊。\n換新手機後拍的第一次拉麵，碗的顏色是後來在 Mac 上的 Photos 調白平衡之後跑掉的。\n🏬店名 麵屋零 🏠地址 403 台中市西區向上路一段 245 巷 9 號 🔗連結 Facebook ","date":"Aug 22, 2021","img":"https://nevikw39.cf/images/zero.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/zero/","series":[],"smallImg":"","tags":["名店拉麵"],"title":"麵屋零"},{"categories":["程式💻"],"content":"我們宣告的變數事實上皆有各自的生命週期，簡單來說原則上變數始於宣告、終於其宣告時最接近之 { 對應之 }. 當程式離開該大括弧的區塊以後，理論上我們就不應嘗試存取它。請留意，在不同的作用域宣告相同名稱的變數是會覆蓋的。以下將由小到大介紹各變數作用域。\n區塊變數# 宣告在條件分支與迴圈控制區塊中的變數是為區塊變數。如果我們在大括弧外使用區塊變數的名稱，編譯器會不認得它而說 identifier is undefined.\n然而，技術上來說，我們其實可以透過指標在區塊變數的生命週期外嘗試存取它，因為區塊變數與區域變數都位於函式的堆疊。\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n, d; cin \u0026gt;\u0026gt; n; cout \u0026lt;\u0026lt; \u0026amp;n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; do { int m = n * 87 + 69; d = \u0026amp;m - \u0026amp;n; cout \u0026lt;\u0026lt; \u0026amp;m \u0026lt;\u0026lt; \u0026#34;\\n\u0026amp;m = \u0026amp;n + \u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } while (0); int *ptr = \u0026amp;n + d; // cout \u0026lt;\u0026lt; m \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; indentifier `m\u0026#39; is undefined cout \u0026lt;\u0026lt; *ptr \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 區域變數# 一般我們宣告在函式中的變數及函式的參數屬之，與區塊變數同樣位於函式的堆疊。因為區域變數的生命週期只到函式結束，因此當我們有需要回傳指標時，不應回傳區域變數的指標，而應該透過動態配置記憶體取得在堆積的空間。\nstatic 變數# 如果函式在每次執行過程中，需要共重複使用某一變數之職，可以宣告為 static 變數，將會儲存在堆積，且每次結束後其值將會被保留。\n#include \u0026lt;iostream\u0026gt; using namespace std; void foo() { int n = 0; cout \u0026lt;\u0026lt; \u0026#34;foo(): \u0026#34; \u0026lt;\u0026lt; ++n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } void bar() { static int n = 0; cout \u0026lt;\u0026lt; \u0026#34;bar(): \u0026#34; \u0026lt;\u0026lt; ++n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } int main() { for (int i = 0; i \u0026lt; 10; i++) { foo(); bar(); } return 0; } 由於程式執行過程中字串長度可能小於最大程度，因此我們用 \u0026#39;\\0\u0026#39; 表示字串的結束。 全域變數# 基本上變數只活在它所在大括弧中，那當我們將變數宣告在所有大括弧外呢？？可以這樣嗎？？當然可以。根據上述的法則，我們不難猜測，這種所謂的全域變數，其生命週期原則上就是整個程式的執行時期。全域變數儲存在比較彈性但比較慢的堆積。\n雖然使用全域變數非常方便，許多競賽選手十分愛用，但濫用全域變數是很不好的行為，在業界是不被歡迎的，比如 MISRA-C 標準甚至強烈不建議。\n","date":"Aug 18, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/scope/","series":["C++ 入門"],"smallImg":"","tags":["C++","function","variable","scope"],"title":"[C++ 入門] 4.1 變數作用範圍"},{"categories":["程式💻"],"content":"C++ 中的函式與數學中的函數有些類似，但也卻存在一些差異。事實上，先前我們的程式碼就包含惹 main() 這個最基本的函式。撰寫程式的過程中，如果有某些片段經常重複使用，或是有其他需求比如強調或是遞迴，就可以考慮宣告成函式。\n#include \u0026lt;iostream\u0026gt; using namespace std; long long foobar(int x) { return 1LL * x * x; } int main() { cout \u0026lt;\u0026lt; foobar(87) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; foobar(69) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 上例中，我們宣告一個名為 foobar() 的函式，其回傳型別為 long long, 並接受一個 int 的參數。當然，實務上的函式往往複雜許多，可以包含輸出、條件分支、迴圈控制、呼叫其他函式，能做的事就跟以前我們在 main() 做的一樣，甚至還可以呼叫自己。比較特別的是，函式可以沒有參數，還可以沒有回傳值，即回傳型別為 void.\n參數的傳遞# #include \u0026lt;iostream\u0026gt; using namespace std; void foobar(int x) { x = 69; } int main() { int x = 87; foobar(x); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 猜猜看，上面的程式碼其輸出結果為何？？ 如果你覺得是 \\(69\\), 恭喜答錯惹。原因是，C++ 在呼叫函式時，預設是將參數的值複製過去，也就是說，foobar() 中的 x 與 main() 的 x 可謂風馬牛不相及。那如果我們真的有需要在 foobar() 修改 main() 的 x 要怎麼辦呢？？還記得先前介紹的指標與參考嗎？？\nCall by Value# #include \u0026lt;iostream\u0026gt; using namespace std; void foobar(int x) { cout \u0026lt;\u0026lt; \u0026amp;x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; x = 69; } int main() { int x = 87; cout \u0026lt;\u0026lt; \u0026amp;x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; foobar(x); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 就是預設情形，foobar() 的 x 是拷貝的副本。\nCall by Pointer# #include \u0026lt;iostream\u0026gt; using namespace std; void foobar(int *ptr) { cout \u0026lt;\u0026lt; ptr \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; *ptr = 69; } int main() { int x = 87; cout \u0026lt;\u0026lt; \u0026amp;x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; foobar(\u0026amp;x); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 如果使用指標，我們就可以在 foobar() 修改 main() 的 x, 但要留意 \u0026amp;, * 的語法。\nCall by Reference# #include \u0026lt;iostream\u0026gt; using namespace std; void foobar(int \u0026amp;x) { cout \u0026lt;\u0026lt; \u0026amp;x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; x = 69; } int main() { int x = 87; cout \u0026lt;\u0026lt; \u0026amp;x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; foobar(x); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 參考的版本給你參考。\n函式指標# 什麼！？指標已經夠討厭惹，函式還有指標啊？？是的，依照 von Neumann 架構，函式在被執行前需要先被載入記憶體，有惹記憶體位址當然就有指標。詳細情形等以後提到函式物件在說個清楚吧。\n#include \u0026lt;iostream\u0026gt; using namespace std; void foo() { cout \u0026lt;\u0026lt; \u0026#34;foo\\n\u0026#34;; } void bar() { cout \u0026lt;\u0026lt; \u0026#34;bar\\n\u0026#34;; } int main() { void (*func)() = foo; func(); func = bar; func(); return 0; } ","date":"Aug 16, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/function/","series":["C++ 入門"],"smallImg":"","tags":["C++","function"],"title":"[C++ 入門] 4. 函式"},{"categories":["拉麵🍜"],"content":"千勝軒也是離家不遠的拉麵店，有空就趕緊去踩點一下。價格以拉麵而言算是平價，叉燒份量少惹點。豚骨湯頭夠濃郁，所以我後來又加點白飯配著吃。\n🏬店名 千勝軒 🏠地址 40343 台中市西區三民路一段 29 號 🔗連結 Instagram ","date":"Aug 11, 2021","img":"https://nevikw39.cf/images/chikatuken.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/chikatuken/","series":[],"smallImg":"","tags":[],"title":"千勝軒"},{"categories":["拉麵🍜"],"content":"先前武漢肺炎疫情正盛之時，卻傳出惹貍匠拉麵品牌系列第五家分店吞山郎的展店消息。而在疫情疫情逐漸降溫後，貍匠拉麵旋即又決定在同一地址、吞山郎的隔壁開新店喇。\n從店名不難猜測，這家店的主打顯然是牛。我點的這碗是咖哩牛骨濃湯拉麵，雖然以往我一向認為咖哩就是只能配飯，對於咖哩炒麵之類的時常興致缺缺，但這碗拉麵實在讓我太過驚豔。首先湯頭並不是典型的日式咖哩，醇厚的牛骨味中富含各式香料，再加上蕨類的點綴及檸檬片進一步提升層次。特別的是不像常見的溏心蛋，我咬破半熟的溫泉蛋之後吸惹一下蛋汁，接著又將其打進湯頭。此外，由牛肉製成的叉燒也十分新奇。\n千萬別急著把湯喝盡，免費加點一碗白飯，倒進濃湯後就搖身一變，化成咖哩飯上菜喇。這種一湯兩吃的體驗真的好過癮！！旁邊還有附上吐司切丁，同樣是可以用以沾湯的。\n貍匠拉麵的兩家新店直接讓一中附近的美食相形見絀，唯一可惜的是在畢業之後才開始營業。我想牛庵未來無法避免成為排隊名店吧。\n🏬店名 牛庵 🏠地址 404 台中市北區三民路三段 75 號 🔗連結 Instagram ","date":"Aug 9, 2021","img":"https://nevikw39.cf/images/moann.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/moann/","series":[],"smallImg":"","tags":["貍匠"],"title":"牛庵"},{"categories":["程式💻"],"content":"字串是程式當中相當重要的議題，我們從 hello, world 就接觸到它，但我們始終用一種敷衍的態度點到為止。在變數型別中，提到字串其實就是字元陣列。如今我們學過陣列，終於可以好好的討論一下字串惹。\n與陣列相似，C++ 的字喘也有傳統 C 風格與現代 C++ STL 兩種。雖然競賽實務上往往用 C++ STL 方便許多，但傳統 C-style string 的設計有許多巧思，值得了解。\nC-style string# 既然字串是字元陣列，那就直接宣告來用看看吧：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char str[] = \u0026#34;hello, world\u0026#34;; cout \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(str) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } \u0026#34;hello, world\u0026#34; 這段字串明明只有 12 個字元，為何長度卻是 13 呢？？ 這是 C-style string 的一個特殊規則：每個字串的結尾都必須是 '\\0' 這個特殊字元。這樣有何好處？？我們在遍歷字串時就可以這麼寫：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char str[] = \u0026#34;hello, world\u0026#34;; for (int i = 0; str[i]; i++) cout \u0026lt;\u0026lt; str[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 這在字串長度為之時尤其方便，我們很快就會遇到惹。現在考慮我們接受字串的輸入，那麼問題就出現喇：字元陣列要宣告多長？？如果是在解題，題目通常會說明最大長度，我們就宣告這麼長再加一（想一想為什麼），如果是在實務場合，可能就需要一些動態配置記憶體的技巧。\nptt 的 ID 長度上限為 \\(12\\), 我們可以寫出以下程式接受輸入：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char id[12 + 1]; cin \u0026gt;\u0026gt; id; for (int i = 0; i \u0026lt; sizeof(id); i++) cout \u0026lt;\u0026lt; id[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 我們使用最常見的陣列遍歷方法遍歷字串。但這個程式有點問題，試著輸入 ID 越短越好，會發現輸出可能怪怪的，原因是 C/C++ 宣告基本型別變數及陣列時不會初始化，電腦給我們的記憶體可能還留有上個程式的資料。正確的寫法應該是這樣：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char id[12 + 1]; cin \u0026gt;\u0026gt; id; for (int i = 0; i \u0026lt; sizeof(id) \u0026amp;\u0026amp; id[i]; i++) cout \u0026lt;\u0026lt; id[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 現在你知道為什麼字串的結尾必須是 '\\0' 惹。 由於程式執行過程中字串長度可能小於最大程度，因此我們用 \u0026#39;\\0\u0026#39; 表示字串的結束。 這個概念挺有意思的，對照先前所說陣列的左閉右開的特性，右端點就是 '\\0'. 往後我們遇到 STL 容器的迭代器， .end() 扮演的角色就有異曲同工之妙。\n字串的操作# 由於字串就是字元陣列，而我們知道陣列不能直接複製、比較 \u0026hellip;, 因此有函式庫 \u0026lt;cstring\u0026gt; 幫我們寫好這些功能，比如 strcpy() 用以複製、strcmp() 用以比較、strcat() 用以串接等等，這些函式都離不開指標，有興趣請自行研究，這裡就姑且略過不提惹。\nstd::string# 看完上面半篇暈惹嗎？？還好 C++ STL 有提供 string 這玩意兒。基本上你可以把 std::string 之於 C-style string 對應到 std::vector\u0026lt;\u0026gt; 之於 C-style array. 也許有人好奇 std::string 為何少惹 \u0026lt;\u0026gt;?? 原因是 std::string 其實是 std::basic_string\u0026lt;char\u0026gt;. 實際用起來就是這麼簡單：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string s; s = \u0026#34;QQ\u0026#34;; cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; cin \u0026gt;\u0026gt; s; cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 別管什麼最大長度或動態配置記憶體惹，C++ 幫我們處理得好好的。std::string 亦可使用 [] 取得某個字元，而我們可以用 .lrngth() 取得字串長度：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { string s; cin \u0026gt;\u0026gt; s; cout \u0026lt;\u0026lt; s.length() \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; for (int i = 0; i \u0026lt; s.length(); i++) cout \u0026lt;\u0026lt; s[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 字串的操作# 與 vector\u0026lt;\u0026gt; 類似，我們可以直接用 = 來複製字串、用 == 來判斷兩字串是否相等，我們甚至可以用 + 來串接兩字串：\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; int main() { string a = \u0026#34;AAA\u0026#34;, b = \u0026#34;BBB\u0026#34;; char c = \u0026#39;c\u0026#39;; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; a + b + c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; a + \u0026#34;XXX\u0026#34; \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#39;Y\u0026#39; + b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 注意在 C++ 中 \u0026quot;...\u0026quot; 仍是 C-style string, 因此 \u0026quot;AAA\u0026quot; + \u0026quot;BBB\u0026quot; 是錯誤的。\n注意到平常 cin 以空白分割輸入，如果輸入的字串可能包含空白，必須使用 getline(cin, s);. 呼叫前須留意如果先前有使用過 cin, 必須 cin.ignore();.\n類題演練# ZeroJudge a001 ZeroJudge b968 ZeroJudge c185 ZeroJudge c186 ZeroJudge c659 ZeroJudge c716 ZeroJudge c717 ZeroJudge c726 ZeroJudge e051 ZeroJudge e456 GreenJudge b006 GreenJudge b007 GreenJudge b008 GreenJudge b009 GreenJudge b010 GreenJudge b011 GreenJudge b012 GreenJudge b013 GreenJudge b014 ","date":"Aug 8, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/string/","series":["C++ 入門"],"smallImg":"","tags":["C++","C","string","array","pointer","IO"],"title":"[C++ 入門] 3.2 string"},{"categories":["拉麵🍜"],"content":"疫情警戒降回二級的第二天，我終於又再次於店內享用拉麵的美味。儘管政府已開放內用，但有不少店家還未準備好。隱身在熱鬧西區中的寧靜小路公正路上的渡山樓，符合實聯制、體溫量測、出入店消毒、梅花坐與隔板等等的防疫措施，因此是少數提供拉麵迷解饞的內用服務。\n我點的是雞豚濃厚雞白湯，一端上來真的是開心感動極惹。湯頭的部分就典型的雞白湯，中規中矩的。叉燒的部分有雞有豬，以 \\(\\$210\\) 的價格而言算是給得非常大方，留待免費加麵一次配著吃都還足夠。此外比較特別的是還有附檸檬片，我是等到替玉之後才加，檸檬汁的點綴下雞白湯的層次就更豐富惹。\n在此時此刻能有一碗內用拉麵，我覺得真的非常幸運。我們真的要好好感謝所有奮戰的醫護以及其他前線人員、中央與地方政府的共同努力，當然還有全民團結的合作。在解封放風的同時，絕對切莫忘記依然要繼續恪遵防疫規範。\n🏬店名 渡山樓 🏠地址 40360 台灣台中市西區公正路 170 號 🔗連結 Facebook ","date":"Jul 28, 2021","img":"https://nevikw39.cf/images/dushanlou.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/dushanlou/","series":[],"smallImg":"","tags":[],"title":"渡山樓"},{"categories":["拉麵🍜"],"content":"狸匠拉麵的本店離我家也不遠，一直是我想嚐試的店家之一。本來想說畢業之後會有許多時間開發新店，無奈武漢肺炎爆發打亂一切。所幸台灣疫情逐漸降溫受控，在降回二級前夕我訂惹一碗深夜拉麵的外送以慶祝，只是送達時已經降級惹 XD\n這碗是激辛豚骨大盛，湯頭十分醇厚順口，最後我直接喝完；不愧是大盛，叉燒不僅大片亦很足夠。此外，溏心蛋的水準也是不錯。總結來說，真是完美的宵夜啊！！\n目前四家狸匠體系已經集滿三家，就剩下在太平的激勵軒。希望外來都能自由無慮地在店內享用拉麵。\n🏬店名 狸匠拉麵 - 深夜拉麵 🏠地址 402 台灣台中市南區建成路 1053 號 🔗連結 Facebook ","date":"Jul 27, 2021","img":"https://nevikw39.cf/images/zhongxiao.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/zhongxiao/","series":[],"smallImg":"","tags":["貍匠","名店拉麵"],"title":"狸匠拉麵"},{"categories":["程式💻"],"content":"C-style array# 有時我們會需要紀錄大量同樣型別的變數，比如 GreenJudge c041, 題目輸入 \\(N\\) 及 \\(N\\) 個人的現金，那我們要怎麼儲存呢？？我們可以使用陣列 (array):\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; int arr[n]; // ... return 0; } 第九行的 int arr[n]; 宣告整數型別的陣列，其長度為 n. 之後，我們就能以 arr[0], arr[1], \u0026hellip;, arr[n - 1] 陣列中的元素 (element) 來存取陣列中的元素。回頭看看 GreenJudge c041, 我們容易知道最小的現金流動會是 \\(\\frac{1}{2}\\sum{|a_i - \\bar{a}|}\\), 其中 \\(a_i\\) 是第 \\(i\\) 個人的現金： 現在讓我們稍微深入一點的討論。所謂的陣列，就是一塊連續的記憶體空間。那我們要怎麼存取一塊連續的記憶體呢？？\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int arr[5] = {4, 3, 2, 1, 0}; // int arr[] = {4, 3, 2, 1, 0}; cout \u0026lt;\u0026lt; arr \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 我們先宣告一個長度為 \\(5\\) 的 int 陣列，並用 {...} 初始化，然後直接輸出 arr, 有沒有發現結果跟輸出指標類似？？其實它根本就是指標啊！！ 本質上，C 風格的陣列就是指標。 前面我們介紹過指標可以用 * 運算子來解析，其實指標本身還可以做 +, - 運算，代表指向後一個或前一個單位的地址。指標也可用關係運算子來比較所指向記憶體位址的前後。 上面的程式碼中，我們先以典型的方式賦值予陣列，接著故意以指標的方式輸出其值。事實上，對於編譯器而言，arr[i] 會被視為 *(arr + i), 更進一步說，我們知道加法有交換律，也就是說，arr + i 等價於 i + arr, arr[i] 亦與 i[arr] 完全等價。\n遍歷陣列# 陣列的用途為紀錄大量同樣型別的變數，我們自然往往會需要對他們進行類似的操作，這時迴圈就是絕佳的拍檔。以下我們用讀入十個數字在依序寫出這個例子來示範常見的遍歷方法。\nfor \u0026 array index# 最典型的存取方式，就不多做說明。\nfor \u0026 pointer# 稍微進階一點的方式，也是指標的應用。注意到我們在輸出時特別用的是 const 的指標，由於第二個 for 我們沒有修改值的必要，因此我們告訴編譯器，避免不小心修改。當然，不加 const 其實也無所謂，但第一個 for 輸入時加上 const 編譯就會報錯，可以自行試試。\n以上兩者是 C 當中皆有的基本方法。\nC++11: range-based for# Range-based for loop 是 C++11 的新功能，很類似 Python 的那種 for. 其實作的方式相當於以 iterator（算是包裝過的 pointer）迭代遍歷過容器，在 C++ STL 中十分方便。注意到有 for (int i : arr), for (int \u0026amp;i : arr) 等形式，前者的 i 為 arr 當中元素的複製，即修改該 i 並不會修改到 arr 內的元素；後者之 i 則為 arr 當中元素的參考，即修改該 i 會修改到 arr 內的元素。此外，加上 const修飾的作用就如同以指標遍歷。\n同場加映：輸出入 stream iterator# 這邊示範以 C++ \u0026lt;iterator\u0026gt;, \u0026lt;algorithm\u0026gt; 當中的函式優雅的寫法跟你分享供你欣賞，有興趣可以自行深入研究。\n可變長陣列# 我們一開始舉的例子宣告長度為 n 此一變數的陣列，是所謂的可變長陣列 (variable length array), 我認為翻譯成變數長度陣列比較好，在早期的 C 當中是不支援的，必須以 malloc() 等動態配置記憶體的手段。在 C99 及大部分編譯器實作的 C++, 我們是可以把陣列長度宣告為變數，但這其實還不是動態長度的陣列，更多現代的功能，改用 vector\u0026lt;\u0026gt; 會比較理想。\n多維陣列# 有時資料不只是一維的，會是二維會是更多維的，我們一樣可以宣告成陣列。比如說今天我們要處理 \\(2 \\times 3 \\) 的矩陣：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int matrix[2][3] = {{87, 69, 19}, {64, 89, 92}}; return 0; } 我們宣告惹 \\(2 \\times 3 \\) 的二維陣列，也可以說是一個長度為 \\(2\\) 的「長度 \\(3\\) 陣列」陣列 (2-legnth array of 3-length array). 多維陣列還是陣列，只是它每個元素都也是陣列。大部分程式的多維陣列是 row-major 的，也就是說與數學上類似，是先 row 再 column. 操作的方法同樣離不開迴圈，有幾維就幾層迴圈。\n類題演練# GreenJudge b001 GreenJudge b002 GreenJudge b003 GreenJudge b004 GreenJudge b005 vector\u003c\u003e# C-style array 的本質是指標，相較於其他現代語言的陣列，許多方面麻煩不少，比如若要比較兩個陣列，arr0 == arr1 的意義是判斷兩者所指向的位址是否相等，而非元素是否一致；欲複製陣列中的元素，亦無法直接使用 =. 因此，在 C++ 我們有 STL 提供的容器 vector, 它的行為比較類似其他現代語言的陣列。STL 當中的容器都應用惹 C++ 物件導向及泛型這兩的特性，日後有機會再作說明。vector 的基本用法如下： 首先第二行我們 #include \u0026lt;vector\u0026gt; 才能使用 vector. 接著第九行我們先只介紹四種初始化的方式：\nvector\u0026lt;int\u0026gt; 的 \u0026lt;int\u0026gt; 代表我們這個 vector 是 int 的，此為泛型之語法\nv0(5) 表示我們宣告的這個 vector 初始長度為 \\(5\\), 且值都為 \\(0\\). 有兩點值得注意：\n這裡要用 () 而非 [], 技術上來說我們是在呼叫 vector 的建構式，否則變成宣告 array of vector 其實 C-style array 不會初始化，也就是說 int arr[5]; 一開始 arr 的值可能會是別的程式殘留的值，但 vector 會初始化為 \\(0\\) v1(5, 87) 跟 v0(5) 不同之處，在於初始化的值改成我們指定的 \\(87\\)\nv2 = {4, 3, 2, 1, 0} 類似於 arr[] = {4, 3, 2, 1, 0}, 稱為以 initializer list 初始化，C++11 後才支援，編譯器會自己計算長度\nv3 = v2 就是把 v2 的內容複製給 v3, 但注意 C-style array 是不能 arr1 = arr0 的，原因是 C-style array 並非可修改的 lvalue\n然後，對應到先前介紹的四種遍歷方法，我們依序用 for 搭配 vector 的 index, for 搭配迭代器 (iterator, 可以視作 STL 容器的 pointer), range-based for loop, 以及 output stream iterator 來遍歷四個 vector. 礙於篇幅限制，本文目前只教到將 vector 代替 C-style array 使用，未來在以專文介紹。\n","date":"Jul 24, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/array/","series":["C++ 入門"],"smallImg":"","tags":["C++","C","array","pointer","for","vector"],"title":"[C++ 入門] 3.1 C-style array \u0026 vector"},{"categories":["程式💻"],"content":"在開始前先看一段程式碼：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a = 87, b; b = a; a = 69; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 猜猜看，以上程式碼的輸出為何？？ 可能會有人以為是 69 69, 但實際上是 69 87, 原因是我們宣告 a, b 兩個整數變數，他們分別儲存在記憶體的不同位置，而我們強調過： 程式語言中 a = b; 的涵義為將 a 的值設定為 b. 第八行 b = a; 將 b 的值設為 a 當時的值也就是 \\(87\\), 之後第九行將 a 的值設為 \\(69\\), 此時對 b 的值毫無影響。那麼假如我們真的有綁定變數的需求，要如何實做呢？？\n指標# 指標向來被視為 C/C++ 中令人聞風喪膽的魔王 (? 其實我覺得沒那麼恐怖。簡單而言，一個變數的指標，就是其在記憶體的地址。看看下面的例子：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n = 87, *ptr = \u0026amp;n; cout \u0026lt;\u0026lt; \u0026#34;n = \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34;, \u0026amp;n = \u0026#34; \u0026lt;\u0026lt; \u0026amp;n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;ptr = \u0026#34; \u0026lt;\u0026lt; ptr \u0026lt;\u0026lt; \u0026#34;, *ptr = \u0026#34; \u0026lt;\u0026lt; *ptr \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 注意到第七行 int *ptr = \u0026amp;n, 我們在變數名稱前加上 * 宣告一個整數的指標變數，透過在 n 前方加上 \u0026amp; 取得 n 的記憶體位置並使 ptr 指向 n. 接著第八行我們輸出 n 值與其記憶體位置，最後輸出 ptr 指向的位置及利用 * 取得其指向的內容。 這次我們修改 n 的值，會發現連帶地 ptr 所指向的值當然也隨之變化。所以指標第一個麻煩的地方，就是，* 既拿來做為宣告指標，又用作解析指標的內容。\nconst T\\*, T\\* const, const T\\* const# 前面我們有介紹過常數變數，不知道還有迷有印象？？沒有也沒關係喇 這邊就隨便帶一下，const T\\* ptr0; 是常數變數的指標，它自身指向某個常數變數，但它不是常數，所以它可以被修改，指向別的常數變數；T\\* const ptr1; 是變數的常數指標，它自身是常數，因此它初始化指向一個變數後，就不能再指向其他變數，但那個變數當然還是可以被修改；const T\\* const ptr2; 是常數變數的常數指標，它自身是常數，因此它初始化指向一個常數後，就不能再指向其他常數，而且那個常數當然不能被修改。\n到這邊暈惹嗎？？舉個例子好惹： 這邊可能需要慢慢體會。\n指標的指標的… \u0026 MISC# 指標除惹指向整數、浮點數、字元等等基本型別，當然還可以指向另一個指標，怎麼樣，好玩吧？？\n注意到各種整數、浮點數、字元、指標的指標等等其實殊途同歸，本質上是一樣的，都是關於記憶體位置的變數，你可以用介紹過的 sizeof() 確認看看。非常危險地，它們彼此之間是可以互相轉換的，更概括的說，所有指標都可以被視為 void *, 需要強調型別的原因是因為不同型別記憶體儲存的內容當然不一樣，錯誤的解析會引發 Undefined Behaviors.\n另外，當我們宣告一個指標，在確定它指向誰之前，不應該去嘗試存取它的值，這同樣是非常危險的。C 傳統上以 NULL 這個巨集表示空指標，通常會被展開為 0, 但還是需要小心使用；C++11 新推出的 nullptr 是個好東西，請多愛用它。\n最後，指標還有許多妙用，是陣列、字串及動態配置記憶體的基礎，也是 C++ STL iterator 的精神，等到我們遇見函式在來介紹函式指標吧。\n成大教授好文推介。\n參照# 指標這種直接碰觸到記憶體的操作，是比較底層、低階的，雖然非常方便同時也十分不安全，因此現代高階語言多半使用參照這個技巧，或譯為參考。\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a = 87, \u0026amp;b = a; a = 69; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; b = 426; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 在 int \u0026amp;b = a; 這行，我們用 \u0026amp;b 表示 b 是個參照，參考到 a 的值，因此當 a 修改時，b 也會隨之更動；同樣地，當 b 修改時，a 也會隨之更動。\n實務上，參照的實作通常就是指標，雖然比較安全，但也少惹許多彈性，包括一定要立即初始化且無法改參考其他的變數。\n另外 C++11 新增惹 r-value reference, 不過我們應該很久以後才會討論它。\n","date":"Jul 24, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/pointer/","series":["C++ 入門"],"smallImg":"","tags":["C++","C","pointer","reference"],"title":"[C++ 入門] 3. 指標與參照"},{"categories":["程式💻"],"content":"學完 if-else, while, for 之後我們已經可以解決許多問題惹。作為程序流程的最後一篇，今天介紹一個幾乎很少使用的語法：goto.\n如果妳有寫過 batch 或 bash script 的經驗，應該不會對 goto 感到陌生。我們可以在程式碼當中的任意處加上 label:, 再用 goto label; 跳轉到該label:. 乍看之下很方便，但是在程式碼當中大量濫用 goto 將會肇致許多麻煩，因此被多數人視為洪水猛獸，包括 MISRA 等機構建議不要使用，有些人或許甚至沒學過。\n事實上，if-else, while, for 等程序流程在編譯後，於組合語言當中，也都是各式各樣的跳轉指令 (jxx), goto 就是太過於底層一些。然而，偶而使用 goto 還是可以帶來好處。比如先前我們介紹 break; 時舉的線性搜尋數列的例子，如果今天變成二為版本呢？？break; 一次只能跳離一個迴圈，因此我們需要多用一個變數：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n, m, k; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; k; for (int i = 0; i \u0026lt; n; i++) { bool found = false; for (int j = 0; j \u0026lt; m; j++) { int a; cin \u0026gt;\u0026gt; a; if (a == k) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#39; \u0026#39; \u0026lt;\u0026lt; j \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; found = true; break; } } if (found) break; } return 0; } 如果我們善用 goto: 可以看到我們省掉一個變數 found 與 \\(O(n)\\) 次 if. 當然這兩個例子因為很單純，其實能直接 return 0;, 以後遇到更複雜的狀況，也可以另外寫個函式 return, 只是另外寫函式還要考慮傳值的問題。俗話說水能載舟亦能覆舟，goto 提供的方便與帶來的隱憂，這就是自己要取捨的部分惹。\n成大教授好文推介。\n變數作用域# 在程序流程這章中，我們介紹許多用大括弧包起來的區塊陳述。我們看過在 for 中宣告變數：for (int i = 0; i \u0026lt; n; i++), 那麼我們可以在迴圈外使用 i 這個變數嗎？？ 動手手試看看，在迴圈外使用迴圈內宣告的變數。 很遺憾的是，答案顯然為否。閱讀一下編譯器的錯誤訊息，看起來式編譯器並不認得它。原來，我們宣告的變數都有其作用域，簡單來說一個變數被宣告後原則上只活在它所在的大括弧中，離開後編譯器就不認得惹，我們也不該使用奇怪的方式嘗試去存取它。\n那如果我們把變數宣告在大括弧之外呢？？沒錯，我們可以把變數宣告為與 main() 同一階層，是為全域變數。全域變數很方便沒錯，許多競賽選手都喜歡大量使用，但這在業界也是同樣不被歡迎的。當然有時我們非得用全域變數不可，比如宣告很大的陣列或是遞迴很深時，因為全域變數儲存在 heap 而非 stack.\n最後注意 C/C++ 可以在不同的區塊宣告同名的變數，這可能會導致麻煩，比如在 main() 宣告 int x; 再 while 中又宣告 int x;, 這時在 while 中的 x 都跟外面的 x 毫無關係，不可不慎。\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int x = 87; do { int x; x = 69; } while (false); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 動手手試看看，以上程式碼的輸出為何？？ ","date":"Jul 20, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/goto/","series":["C++ 入門"],"smallImg":"","tags":["C++","control flow"],"title":"[C++ 入門] 2.2 程序流程：goto 跳轉與其他"},{"categories":["程式💻"],"content":"我們現在會輸出一行字串，對吧？？如果要輸出兩行呢？？複製貼上，搞定。可是要是是 \\(100, 1000\\), 甚至是 \\(n\\) 次呢？？電腦的專長除惹計算，還有做重複的事，這時我們可以運用迴圈。\nwhile# while 的語法有點像 if:\nwhile (condition) { // ... } 與 if 的不同在於 while 會重複執行大括弧內的陳述，直到 condition 為零。來看個範例吧 這個程式首先模擬丟擲一顆骰子，產生閉區間 \\([1, 6]\\) 內的偽隨機數為 val, 之後讓使用者輸入 n, 當 n != val 就讓使用者繼續猜。第二、八、九及十行前半是產生亂數的方法，可以先不理它。而第十行後半的 n = 0 很重要，它是一個變數初始化的作用，當我們宣告一個變數卻未賦予它值，存在一個極低的機率它的值剛好會是 val. 動手手試看看，我們同樣在第十一行前方點一下設置中斷點，偷偷觀察我們骰子擲到的 val, 按 F10 Step Over 逐步執行，看看下一行會跳至何處。 回到本文開頭的引子，如何寫出輸出 n 次字串的程式？？ 還記得遞減運算子嗎？？這裡我們應用一個小小技巧，對於一個正整數 n, 經過 n 次 --, 其值會變為 \\(0\\). 但注意 n 最終的值會是 -1 原因是當 n 為零時還會進入 while(), 判斷的時候又會 --. 如果你現在一頭霧水，顯然還沒是沒有學好遞減運算子，不過也沒關係，等下用 for 迴圈改寫比較直觀易懂。\ndo-while# do-while 的語法如下：\ndo { // ... } while (condition); 與 while 的不同在於 do-while 會至少執行一次大括弧的內容。我們的擲骰子程式可以這樣改寫： 注意到因為我們在取 n 的值判斷 n != val 前必定執行過 cin \u0026gt;\u0026gt; n 賦值，因此第十行不予初始化也是安全的。\n例題解析# GreenJudge c046 這題要求小數點後前 n 位，就用迴圈模擬我們的長除法 GreenJudge c040 一樣是模擬題，即使沒聽過輾轉相除法也沒關係，照題目說的就對惹 類題演練# GreenJudge a021 GreenJudge a022 GreenJudge a023 GreenJudge a024 GreenJudge a025 GreenJudge a041 GreenJudge a043 for# for 也是迴圈流程，它做得到的事其實 while 也都做得到，某方面而言算是一種語法糖。\nfor (initial; condition; afterthought) { // ... } 其中，initial 是初始化的陳述，C++ 跟現代的 C 允許在此宣告變數；condition 跟 while 一樣，變成 \\(0\\) 就會離開迴圈；而 afterthought 是每次執行完大括弧內陳述之後會做的運算。我們的輸出 n 次字串的程式 for ver.: 我們外加一個小功能，就是輸出這是第幾遍，順帶一提， for 中的 i 是 index 編號的意思。 動手手試看看，你能不能寫出 while 版本而且帶有編號的程式？？ 動手手試看看，我們於第九行前方點一下設置中斷點，按 F10 Step Over 逐步執行，看看下一行會跳至何處。 0-indexed numbering# 到這裡裡可能很納悶，我們的 for 怎麼不寫成 for (int i = 1; i \u0026lt;= n; i++)?? 其實這樣當然也對，但在程式設計中我們傾向使用 0-indexed numbering, 包括先前我們看過 int, long long 的值域的表達，往往都是用一個左閉右開的區間 \\([a, b)\\)，是因為有這些好處：\n區間長度即為 \\(b - a\\), 沒有討人厭的國小植樹問題 將區間一分為二時可以輕易地得到 \\([a, \\frac{a+b}{2})\\), \\([\\frac{a+b}{2}, b)\\), 不用再 \\(+1\\) 還記得國二數學等差數列與級數嗎？？ \\(a_n = a_1 + (n - 1)d,\\ S_n = \\frac{n}{2}(2a_1 + (n - 1)d)\\), 如果我們改用 0-indexed numbering, 公式變成 \\(a_n = a_0 + nd,\\ S_n = \\frac{n+1}{2}(2a_0 + nd)\\), 是不是漂亮許多？？ 歷史上 \\(0\\) 這個概念於人類文明中算是比較晚的突破性創新，至今我們甚至都還不是很習慣它。等到後面進入陣列與指標之後，相信會對 0-indexed numbering 更有感覺。發明最短路徑演算法的 Dijkstra 寫過一篇短文可以看看。\n例題解析# GreenJudge c004 因為這題我們需要知道是迴圈第幾次，所以用 for 而非 while. 注意到這題的數字都擠在一起沒有空白，因此我們用讀入字元的方式，再減去 0 的字元值就可以轉回整數。 類題演練# ZeroJudge a005 ZeroJudge b791 ZeroJudge c184 ZeroJudge d010 ZeroJudge d498 GreenJudge a026 GreenJudge a027 GreenJudge a028 GreenJudge a029 GreenJudge a030 TCIRC Judge c003 break \u0026 continue# 考慮下面的問題：\n給定一數列 \\(A\\) 及一整數 \\(K\\), 求 \\(K\\) 最早出現的下標，保證 \\(K \\in A\\), 注意 \\(K\\) 可能重複出現多次。\n輸入的第一行有兩個整數 \\(N, K\\), 其中 \\(N\\) 為 \\(A\\) 的長度，接著一行有 \\(N\\) 個數字，分別是 \\(A_0, A_1, \u0026hellip;, A_{N-1}\\). 試輸出一整數，為 \\(K\\) 最早出現的下標。\n寫個迴圈讀 \\(N\\) 個數進來判斷是否等於 \\(K\\) 對我們而言不難，關鍵在於需要避免重複。我們可以使用 break; 語句跳離當前的迴圈： 我們在 switch-case 就遇過 break; 惹，而它也可以用在 while, for.\n接著考慮另一個問題。小時候大家都會數數，不過在某些地方某些數字很敏感，需要被屏蔽。示範一下從 \\(0\\) 數到 \\(99\\), 並用 continue; 跳過敏感數字： 巢狀迴圈# 與 if-else 相同，我們當然可以結合多個迴圈。注意巢狀迴圈執行順序，是由外而內，再由內而外。底下示範印出九九乘法表： 由於乘積有一位數也有兩位數，因此我們使用 \u0026lt;iomanip\u0026gt; 中的 setw() 來做排版。\n類題演練# ZeroJudge c418 ZeroJudge c419 ZeroJudge c420 ZeroJudge d649 GreemJudge a046 GreemJudge a047 GreemJudge a048 GreemJudge a049 GreemJudge a050 Online Judge 的輸入# 在此之前我們做 Online Judge 的題目大多是只有一筆測資，但有些題目可能有一次多筆測資，我們就需要應用迴圈。底下列出兩個系列題讓大家感受一下，之後做題都要看清楚題目敘述。\n格瑞哥里的煩惱 ZeroJudge d067 ZeroJudge d069 ZeroJudge d070 ZeroJudge d071 ZeroJudge d072 公平的戰役 GreemJudge a036 GreemJudge a037 GreemJudge a038 GreemJudge a039 GreemJudge a040 ","date":"Jul 19, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/loop/","series":["C++ 入門"],"smallImg":"","tags":["C++","control flow","while","for","debugger"],"title":"[C++ 入門] 2.1 程序流程：while \u0026 for 迴圈控制"},{"categories":["程式💻"],"content":"先前我們的程式很單純，就是順順得執行下去。再來的幾篇文章要介紹的陳述能讓我們的程式多些變化，並解決更多問題。\nif-else 條件判斷# 還記得1.1 的範例嗎？？我們寫惹個程式，允許使用者輸入兩個整數，而我們輸出兩者相除之商與餘數。然而，如果今天有人很 87 輸入87 0, 那麼會發生什麼事？？ 動手手試看看，讓電腦除以 0 會怎樣？？ 電腦會爆炸嗎？？顯然不會。如果你在 VS Code 按下 F5 偵錯，這時程式回停下來告訴你 Exception has occurred. Arithmetic exception. 如果直接在終端機執行，會輸出 floating point exception 之類的。總之，程式不正常得提前結束惹。\n這邊我們稍微補充一下，平常我們 main() 函式都 return 0; 代表正常結束，但這次會回傳 136, 確認的方法是在終端機輸入 echo $?. 原因是當我們的程式發生例外而不處理時，會觸發若干 Signal, 像是執行到一半按下 ⌃Ctrl + C 會觸發 SIGINT (2) 使程式中斷、程式被 abort （比如 assert 沒過）會觸發 SIGABRT (6), 錯誤地存取記憶體會觸發 SIGSEGV (11), 而本例致命的算術運算錯誤觸發 SIGFPE (8). 這些都是日後我們常遇到的錯誤。發生例外回傳值就不為 0, 而會是 128 + (n). 其它的 exit code 包括 126 權限不足、127 command not found, \u0026hellip;\n回過頭來我們的問題。在設計程式時，必須盡可能考慮一切狀況，畢竟使用者是沒有下限地 (? 因此，我們需要檢查除數不可為零。if statement 派上用場惹。首先看看它的語法：\nif (condition) { // ... } 其中 condition 是個表達式，如果表達式非零，就會執行大括弧的內容，否則直接跳過。因此我們可以改進我們的除法計算器： 如果大括弧內只有一個 statement (1 semicolon) 可以偷懶省略。其實在 C/C++ 中，非零就是 true, 因此也能寫成 if (b) cout \u0026lt;\u0026lt; ..., 就是省略 != 0 的部分。現在再執行一次，故意輸入 87 0, 程式不再發生錯誤，但直接結束好像有點怪怪的怪怪的欸？？所以我們可以應用 else:\nif (condition) { // ... } else { // ... } 如果 condition 非零，就會執行 if 大括弧的內容，否則執行 else 大括弧的內容，最後繼續執行下去。我們再次改進我們的除法計算器： 這次再有 87 輸入 87 0, 就會告訴他除數不可為零惹。當然我們的 condition 不見得只是一個關係運算式，還可以結合前一篇介紹的邏輯運算子等等。我們可以一樣在第十行前方點一下設置中斷點，這次不要急著按 F5 繼續執行，改按 F10 Step Over 逐步執行，看看下一行會跳至何處。\n類題演練# ZeroJudge d064 GreenJudge a011 GreenJudge a012 GreenJudge a013 多重與巢狀 if-else# 你以為 if-else 就這樣？？不不不。我們的 if-else 還可以跟 if-else 自己結合，當然也可以跟下篇介紹的迴圈結合。自己結合的方式有並排的也有巢狀的：\nif (condition_0) { // ... } else if (condition_1) { // ... } else { // .. } if (condition_0) { if (condition_1) { // ... } else { // ... } } else { if (condition_2) { // ... } else { // ... } } 這邊應該都還很好理解，就給各位自行體驗惹。做些例題可以確認自己是否真的了解惹。\n範例解析# GreenJudge c032 大家應該多少有聽過學年學分制，本題輸入兩學期成績，要求計算所得學分數。簡單的想法是先計算兩學期平均是否大於六十，再判斷各自是否大於六十，但注意的整數的除法，所以我們可以移項。 另解甚至根本不用 if-else, 歡迎細細品味 GreenJudge c014 這題最單純的想法就是乖乖照題目的條件列式，注意 b 有可能小於 a 這邊同樣提供不用 if-else 的另解 類題演練# GreenJudge a014 GreenJudge a015 GreenJudge a016 GreenJudge a017 GreenJudge a018 GreenJudge a019 GreenJudge a020 TCIRC Judge c002 switch-case 分支結構# switch-case 感覺比較少用，但還是介紹一下。舉例來說高三上開始一週補習四天，每次想晚餐吃什麼這個大哉問實在太痛苦惹，於是我們決定週二吃 SUKIYA、週三吃那個那個飯、週四吃癡麵、週日吃 Burger King. 現在寫個程式，輸入一個整數代表是週幾，其中 0, 7 皆表示週日，輸出晚餐要吃什麼。\n我們現在會 if-else, 當然可以寫出以下程式：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int day; cin \u0026gt;\u0026gt; day; if (day == 2) cout \u0026lt;\u0026lt; \u0026#34;SUKIYA\\n\u0026#34;; else if (day == 3) cout \u0026lt;\u0026lt; \u0026#34;那個那個飯\\n\u0026#34;; else if (day == 4) cout \u0026lt;\u0026lt; \u0026#34;癡麵\\n\u0026#34;; else if (day == 0 || day == 7) cout \u0026lt;\u0026lt; \u0026#34;Burger King\\n\u0026#34;; else cout \u0026lt;\u0026lt; \u0026#34;No cram school today.\\n\u0026#34;; return 0; } 但這樣有點囉嗦，是吧。所以我們可以用 switch-case 改寫之： 程式碼的可讀性好惹一些，只是注意每個 case 結束後如果沒有 break; 預設會進入下個 case. 另外，C/C++ 的 switch-case 僅支援整數包含字元。乍看之下用 switch-case 程式碼似乎比較冗長，但理論上執行時，if-else 在最糟情況下會遍歷 \\(n\\) 個判斷，時間複雜度是 \\(O(n)\\) 線性的，但 switch-case 編譯時可能使用 jump table, lookup table; 達到 \\(O(\\log n)\\) 對數的甚至 \\(O(1)\\) 常數的時間複雜度。當然大部分情況下差異微乎其微，只是 switch-case 還有許多妙用。\n類題演練# TCIRC Judge c005 另外 gcc 有提供 case range 可以這樣用：\nswitch (n) { // ... case 69 ... 87: cout \u0026lt;\u0026lt; \u0026#34;skr skr\\n\u0026#34;; break; // ... } 跟 __int128_t 一樣，macOS 如果用蘋果的 clang 應該無法使用。\n","date":"Jul 18, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/branch/","series":["C++ 入門"],"smallImg":"","tags":["C++","control flow","if-else","switch-case","debugger"],"title":"[C++ 入門] 2. 程序流程：if-else 條件判斷 \u0026 switch-case 分支結構"},{"categories":["程式💻"],"content":"其實在正式介紹之前，其實前面我們就有偷偷用過運算子惹，沒錯就是熟悉的 +, -, *, / 喇。接下來趕快來看看還有哪些運算子！！\n算術運算子# +, -, *, /, % 屬之，就不多說惹。\n指派運算子# 這對新手是比較需要注意部分。在多數程式語言中，= 的意義與數學中的等號不同，一個表達式 a = b; 的涵義為將 a 的值設定為 b. 請在心中默念十六遍，開始！！ 程式語言中 a = b; 的涵義為將 a 的值設定為 b. 簡單舉個例子：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a = 87, b = 69; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; a = b; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 執行後的輸出應該是這樣：\na = 87, b = 69\na = 69, b = 69\n複合指派運算子# 既然 a = b; 的涵義為將 a 的值設定為 b, 那麼看看下面這個式子：\n\\[n = n + 92;\\]\n你可以接受嗎？？數學家馬上暴跳如雷，將 \\(n\\) 移項消去得到 \\(0 = 92\\), \\(n\\) 根本不存在！！如果這麼想，那麼你應該在唸十六次： 程式語言中 a = b; 的涵義為將 a 的值設定為 b. 事實上，n = n + 92; 在程式語言當中的涵義，就把 n 的值設為 n 原先的值再加 \\(92\\). 實際執行一次吧！！\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n = 0; cout \u0026lt;\u0026lt; \u0026#34;n = \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; n = n + 92; cout \u0026lt;\u0026lt; \u0026#34;n = \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 希望你搞懂惹。而由於這樣寫有點麻煩，所以我們有這些複合的指派運算子：\n+= -= *= /= %= \u0026amp;= |= ^= \u0026lt;\u0026lt;= \u0026gt;\u0026gt;= 簡單來說 a _= b 相當於 a = a _ b, 其中 _ 是某種二元運算子。\n遞增、遞減運算子# 複合的指派運算子是拿來偷懶的，可是這樣還不夠。程式執行的過程中變數往往需要 +1, -1; 一堆 c += 1, c -= 1 還是好煩喔，所以我們有遞增、遞減運算子分別是 ++, --; 特別的是 ++, -- 可以放在變數前也可以在後，但作用會有些許不同：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int c = 0; cout \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;c++ = \u0026#34; \u0026lt;\u0026lt; c++ \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; c = 0; cout \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;++c = \u0026#34; \u0026lt;\u0026lt; ++c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 注意到第九、十四行我們將運算式輸出，這是合乎語法的，你也可以試試 cout \u0026lt;\u0026lt; c += 92;. 觀察上下兩者有何不同，細細品味一下。++ 後置時，先回傳原本的值才將變數遞增；前置時則先遞增再回傳遞增後的值。-- 同理，不多做說明，可以自己動手試試。\n如果這樣你就很頭痛的話真是抱歉，但以後我們可是要寫出 if (!--ht[*itr]) --k; 之類的程式碼喔 o\u0026rsquo;_\u0026lsquo;o\n關係運算子# 介紹關係運算子與邏輯運算子是在為下一篇 if-else 條件判斷 鋪路。數學上我們有 \\(\u0026gt;, \\geq , =, \\leq , \u0026lt;, \\neq\\) 等關係運算子，對於 \\(87 \u0026gt; 69\\) 這個式子我們會說它是真的，而 \\(92 \\leq 64\\) 顯然是錯的。在程式語言中，我們也能寫出各式各樣的表達式，它們或真或假。C++ 關係運算子的結果是布林型別，即 true or false, 只是 cout 預設只會輸出 1 or 0, 所以我們可以丟給 cout boolalpha 這個 manipulator.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; boolalpha; cout \u0026lt;\u0026lt; \u0026#34;87 \u0026gt; 69 is \u0026#34; \u0026lt;\u0026lt; (87 \u0026gt; 69) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;92 \u0026lt;= 64 is \u0026#34; \u0026lt;\u0026lt; (92 \u0026lt;= 64) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 要特別注意的是，上面說過 = 是拿來賦值的，判斷 a 是否等於 b 要用 a == b，而不等於則是 a != b. 程式語言中 a = b; 的涵義為將 a 的值設定為 b. 程式語言中判斷兩數是否相等要用 a == b 如果你怕會忘記，趕緊多唸幾遍。\n類題演練# ZeroJudge d058 ZeroJudge d063 ZeroJudge d064 ZeroJudge d068 邏輯運算子# 程式語言中，我們也有數學上的邏輯運算，像是一元的 \\(\\neg\\) (not) 為 !, 二元的 \\(\\land\\) (and), \\(\\lor\\) (or) 分別是 \u0026amp;\u0026amp;, ||.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; boolalpha; cout \u0026lt;\u0026lt; \u0026#34;!true is \u0026#34; \u0026lt;\u0026lt; !true \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;!false is \u0026#34; \u0026lt;\u0026lt; !false \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true \u0026amp;\u0026amp; true is \u0026#34; \u0026lt;\u0026lt; (true \u0026amp;\u0026amp; true) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true \u0026amp;\u0026amp; false is \u0026#34; \u0026lt;\u0026lt; (true \u0026amp;\u0026amp; false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;false \u0026amp;\u0026amp; false is \u0026#34; \u0026lt;\u0026lt; (false \u0026amp;\u0026amp; false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true || true is \u0026#34; \u0026lt;\u0026lt; (true || true) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true || false is \u0026#34; \u0026lt;\u0026lt; (true || false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;false || false is \u0026#34; \u0026lt;\u0026lt; (false || false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 出於 encoding 相容的緣故，C++ 也支援以 not, and, or 替代關鍵字，意外的好處是比較好閱讀。值得留意的是多數程式語言存在短路運算的功能，即對於 a \u0026amp;\u0026amp; b 如果 a 已經是 false 則 b 的值完全不予計算，同理 a || b 如果如果 a 已經是 true 則 b 的值亦完全不予計算。\n類題演練# ZeroJudge d460 位元運算子# 位元運算與條件運算可能算是最鮮為人知的基本運算子。位元運算子與二進位制息息相關，共有六種：~ (bitwise not, 1\u0026rsquo;s complement), \u0026amp; (bitwise and), | (bitwise or), ^ (exclusive-or, xor), \u0026lt;\u0026lt;, \u0026gt;\u0026gt;. 其中前三種皆能與邏輯運算子對應，差別在於位元運算子的作用對象通常是兩個整數，而且是對於兩者的二進位制形式，逐位元去運算。\n比如說 \\(87 = 1010111_2\\), \\(92 = 1011100_2\\); 則 \\(87 \\\u0026amp; 92 = 84 = 1010100_2\\), \\(87 | 92 = 95 = 10111110_2\\); \\(69 = 0000000001000101_2 \\Rightarrow \\sim 69 = -70 = 1111111110111010_2\\). 至於 XOR 大家可能稍微比較陌生，其真值表如下：\na b a ^ b 0 0 1 0 1 0 1 0 1 1 1 0 因此，\\(87 \\verb|^| 92 = 11 = 0001011_2\\). 而 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 是左移與右移運算子，對於整數的二進位制形式往左或右位移幾個位元，比如 \\(69 \\ll 1 = 138 = 10001010_2\\), \\(69 \\gg 1 = 34 = 100010_2\\). 在十進位制中，如果我們把 \\(69\\) 左移一位並補零會得到 \\(690\\), 相當於乘以十；而將 \\(69\\) 右移一位並捨去會得到 \\(6\\), 相當於除以十的商。同理，在二進位制中我們可以使用位移運算子來實現 \\(* 2^n\\) 與 \\(/ 2^n\\).\n此外，我們知道所有的偶數可以寫為 \\(2n, n \\in \\mathbb{Z}\\) 的形式、而奇數可以寫為 \\(2n + 1, n \\in \\mathbb{Z}\\) 的形式；因此，我們可以知道所有偶數最低位元必然是 \\(0\\), 所有奇數最低位元必然是 \\(1\\), 換言之我們可以用 x \u0026amp; 1 判斷 x 是否為奇數。再更進一步，我們知道 x \u0026amp; 1 == x % 2, 甚至可以導出 \\(x \\pmod{2^n} \\equiv x \\\u0026amp; (2^n - 1)\\).\n注意到這裡的 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 與先前我們在 cout, cin 所用的毫無關聯，如果你是用 VS Code, 應該會觀察到 cout, cin 的 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 與整數的 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 顏色有所不同。技術上來說，cout, cin 是物件，他們重載惹 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 運算子，賦予其完全不同的意義。\n位元運算還可以實現很多高效運算，比如取絕對值、取最大最小值等等，其他奇技淫巧就留給各位慢慢研究惹。當然上面舉的例子不少不用位元運算也可以達成，只是用位元運算理論上效率較高，而且顯得你很潮。\n成大教授好文推介。\n條件運算子# 條件運算子是唯一的三元運算子，因此也常常直接用以指代。其語法是這樣：condition ? value_if_true : value_otherwise. 其中，condition 是個表達式，如果它非零為真則回傳 value_if_true 的值，否則回傳 value_otherwise. 某種程度來說，它是我們下一篇要介紹的 if-else 條件判斷 的簡化特例版。\n它還可以再簡化成 a ?: b, 這在處理指標時很有用，比如：\ntreap *merge(treap *a, treap *b) { if (!a || !b) return a ?: b; if (a-\u0026gt;pri \u0026lt; b-\u0026gt;pri) { a-\u0026gt;tr = merge(a-\u0026gt;tr, b); a-\u0026gt;pull(); return a; } else { b-\u0026gt;tl = merge(a, b-\u0026gt;tl); b-\u0026gt;pull(); return b; } } 類題演練# ZeroJudge d066 運算子優先順序和結合性# 數學上我們有先乘除、後加減，C++ 中的運算子亦有一定優先順序。如果我們用的有點問題，通常編譯器會提醒可能需要加個括弧。\nPrecedence Operator Associativity 1 () [] . -\u0026gt; ++ -- suffix ⤇ 2 ! ~ ++ -- prefix + - sign * dereference \u0026amp; address​ ⤆ 3 * / % ⤇ 4 + - ⤇ 5 \u0026gt;\u0026gt; \u0026lt;\u0026lt;​ ⤇ 6 \u0026gt; \u0026gt;= \u0026lt;= \u0026lt; ⤇ 7 == != ⤇ 8 \u0026amp; ⤇ 9 ^ ⤇ 10 | ⤇ 11 \u0026amp;\u0026amp; ⤇ 12 || ⤇ 13 ?: ⤇ 14 = += -= *= /= %= \u0026amp;= |= ^= \u0026gt;\u0026gt;= \u0026lt;\u0026lt;= ⤆ 15 , ⤇ ","date":"Jul 18, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/operator/","series":["C++ 入門"],"smallImg":"","tags":["C++","operator"],"title":"[C++ 入門] 1.3 運算子與表達式"},{"categories":["程式💻"],"content":"接下來的兩篇分別介紹變數型別及運算子，初學者只需大略了解相關概念，必要時再查詢相關資料即可。\n前面我們介紹如何宣告整數型別的變數，但其實變數不只有整數，其實整數也有不少種。C++ 中的基本資料型別可以分為整數、浮點數、字元及布林等等，其中因為 C++ 算是弱型別語言，字元及布林是能直接和整數轉換的。\n整數# 標準中的整數關鍵字計有：short, int, long, long long, \u0026hellip; 為何要有那麼種多整數呢？？以 ZeroJudge a002 為例，這題要求兩整數的和，相信對各位十分容易，肯定能輕易地寫出以下的程式：\n現在請 F5 執行這個程式。輸入 \\(87\\ 69\\), \\(9487\\ 666\\), \\(92\\ 89\\) 之類的顯然不會有問題，但現在試著輸入很大很大的數字。要多大呢？？\\(1000000000\\ 1000000000\\) 還是正確的，但 \\(10000000000\\ 10000000000\\) 就出事惹阿伯！！怎麼跑出一個奇怪的負數，是電腦壞惹嗎？？\n對的沒錯你的電腦壞惹 50 收 先別急著砸爛電腦。事實上，每種基本型別都有其上下限。以 int 為例，在現代電腦中通常佔據 4 個位元組 (bytes), 即 32 位元 (bits), 而其中一個位元用來表達正負，因此 int 的值域為 \\([-2^{31}, 2^{31})\\), 請注意這是一個左閉右開的區間，並不包含 \\(2^{31}\\), 原因是區間中含有 \\(0\\).\n當我們計算的值超出當前型別的最大值，稱為 Overflow. 這是一個很容易犯的錯誤，也常造成不少損失，知名案例包括波音 787, 2038 年問題、好幾年前的「江南 Style」點閱次數超過 \\(2^{31} - 1\\) 迫使 YouTube 採用 64-bit 整數等等。\nlong, 長整數，顧名思義值域應該要比 int 長吧？？如果你這麼想很正確但是錯的，這就是 C/C++ 中一些因為歷史的沉痾而肇致的討人厭共業。現今我們的電腦多數為 32-bit 或 64-bit (mostly x86_64), 然而在 C 出生的年代主流是 8-bit 或 16-bit, 因此實際上標準中對 int, long 的定義分別是至少 2 bytes (16 bits), 4 bytes (32 bits). 也就是說，夠古老的 C 教材會告訴你 int 的值域為 \\([-2^{15}, 2^{15})\\). 而在 32-bit OS int 通常是 4 bytes (32 bits), 64-bit 為惹相容性也是蕭規曹隨沿襲下去。\n麻煩的就在這個 long 喇。上面說道標準中 long 至少 4 bytes (32 bits), 對於 64-bit OS 主要有兩種 data model, LLP64 與 LP64, 其中 long 分別為 4 bytes (32 bits), 8 bytes (64 bits). 大部分的 OS 如 Linux, macOS, BSD 等等都是採取 LP64, 就微軟搞怪用 LLP64, 也就是說 64-bit Windows 上 long 的值域相當於 int 只有 \\([-2^{31}, 2^{31})\\).\n因此，標準才改版新增惹 long long 這個整數型別，保證其至少為 8 bytes (64 bits).\n回過頭來看這題說輸入的數字 \\(a, b \\Rightarrow |a| \u0026lt; 10^6, |b| \u0026lt; 10^6\\), 因此我們用 int 是沒有問題的。程式競賽與日常生活中的問題一樣，首先我們必須定義問題，問題一定有條件、範圍，然後我們據此選擇解決問題的方法。\n結論是如果 int 不夠用就用 long long 吧 至於 short 就是短整數，除非要壓空間不然應該很少用。題外話是在 32-bit OS 同樣有 LP32, ILP32 之爭，真的很討厭不要理它吧。\n另外上面有提到整數型別需要使用 1 bit 來記錄正負，而如果不需要管負數的話可以在整數前面加個 unsigned, 比如說 unsigned int, 則值域會變為 \\([0, 2^{32})\\). 現在電腦儲存負數的方式為 2-補數，以後有機會結合位元運算再加以說明。\n類題演練# 這兩題都會用到 if-else, 晚點記得回過頭來看看！！\nGreenJudge a031 TCIRC Judge c019 浮點數# 如果說程式語言中的 int 是對於數論中 \\(\\mathbb{Z}\\) 的近似，那麼浮點數就是 \\(\\mathbb{R}\\) 實數的近似。既然說是近似惹，那就一定存在誤差。因為我們目前還未學到 if-else 條件判斷所以就不示範，事實上在電腦中 \\(0.1 + 0.2 = 0.30000000000000004 \\neq 0.3\\), 下面是個 meme 博君一笑。\n原因的話很容易理解：十進位制的有限小數轉到二進位制往往變成循環小數。目前主流關於浮點數的規範是 IEEE 754, 大一程設通常會教，這邊就不多說惹。\n注意到現在編譯器預設字面常量都是 double, 不要再用 float 喇，當然還有 long double 更精準。\n使用浮點數務必小心謹慎，分享幾個因為不察浮點數誤差造就的悲劇：\nIntel Pentium FDIV bug​ (US$ 470M) Ariane 5 火箭發射意外​（2 人死亡​） 愛國者防空飛彈意外​，攔不到伊拉克飛毛腿飛彈（28 人死亡、98 人受傷​） 成大教授好文推介。\n型別轉換# 看看這段程式會輸出什麼？？\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;87 / 69 = \u0026#34; \u0026lt;\u0026lt; 87 / 69 \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 結果是 \\(1\\) 而非 \\(1.26086\u0026hellip;\\) 前面提到過 C/C++ 中，對於兩整數使用 / 是取其商，那如果要求有小數的結果呢？？我們可以使用以下語法來顯式地轉型：\n// 略 ... cout \u0026lt;\u0026lt; double(87) / 69 \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 略 ... 而以下方法則是隱式地轉型：\n// 略 ... cout \u0026lt;\u0026lt; 87 * 1.0 / 69 \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 略 ... 當兩個不同型別的變數運算時，預設會轉為比較廣泛的型別。而 C++ 還有 static_cast, const_cast, reinterpret_cast, dynamic_cast 等轉型方式，有興趣可以自行深入了解。\n類題演練# 攝氏溫度 ℃ 與華氏溫度 ℉ 的轉換，剛好各一題。\nZeroJudge e343 ZeroJudge d051 GreenJudge a008 字元# 前面我們多次使用字面常量的字串 \u0026quot;This is a string.\u0026quot; 事實上，字串的組成單元是字元；準確來說，字串其實是字元陣列，單個字元我們用單引號夾住。一個字元就代表一個西方語系符號，中日韓共同表意文字 (CJK Ideograph) 則對應二或三個字元，一個跳脫序列也會對應到一個特殊字元。\n電腦只懂二進位制，要記錄字元我們需要將之對映為數字，這個過程稱作編碼 (encoding), 知名編碼表包括 ANSI, ASCII, Unicode, UTF-8, \u0026hellip; 舉例而言，'0' 的值是 \\(48\\), 'A' 的值是 \\(65\\), 'a' 的值是 \\(97\\), '\\n' 的值是 \\(10\\), ' ' 的值是 \\(32\\). 有趣的是，大寫字母與小寫字母剛好差 \\(32\\), 就是第五位元，而 \\(32\\) 又是空白字元 ' ' 的值，因此在做大小寫轉換時可以應用位元運算。\n關於字串及陣列，往後會詳盡解釋。這裡似乎寫得有點凌亂，總之：\n字串由字元構成，字元其實是一種整數。 MISC# 最後補一些雜七雜八的東西。\nconst \u0026 constexpr# const 是 constant 的縮寫，就是常數的意思，在宣告變數時於型別前面加上 const 修飾，就可以宣告常數，之後其值就無法更改。常數仍然儲存在堆疊或堆積等記憶體中，換言之它不能節省記憶體，但可以在執行時期決定。\nconstexpr 則是 C++ 11 的新關鍵字，可以修飾變數或函數，其值在編譯時期就必須決定，或可優化程式效能。\nsizeof()# 上面談到 int, long, long long 的大小是否令你一頭霧水？？其實，我們可以使用 sizeof() 運算子得到各型別的大小：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; sizeof(short) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(int) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(long) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(long long) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(float) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(double) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(long double) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(char) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; #ifdef __SIZEOF_INT128__ \u0026lt;\u0026lt; sizeof(__int128_t) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; #endif ; return 0; } 上面的程式碼輸出八種基本型別的大小，單位是 byte. 而 __int128_t 是 gcc 提供的黑魔法，macOS 如果使用蘋果的 clang++ 則無法使用喔 o\u0026rsquo;_\u0026lsquo;o\n最後補充 \u0026lt;cstdint\u0026gt; _(\u0026lt;stdint.h\u0026gt;)_ 有提供 int8_t, int16_t, int32_t, int64_t, \u0026hellip; 這種定義。\n","date":"Jul 17, 2021","img":"https://nevikw39.cf/images/float.jpg","largeImg":"","permalink":"https://nevikw39.cf/programming/var_type/","series":["C++ 入門"],"smallImg":"","tags":["C++","variable"],"title":"[C++ 入門] 1.2 基本變數型別"},{"categories":["程式💻"],"content":"概述變數與運算# 程式在執行過程中，一如我們平時計算往往需要計算紙，總是會需要保存一下運算的過程與結果。當我們宣告一個變數，電腦就會在記憶體當中分配一個空間給予我們使用。今天我們的重點在輸入，因此先簡單介紹整數型別的變數。\n還記得 1_2 的範例中，我們輸出 \\(87 \\times 69\\) 以及 \\(9487 \\times 426 - 89 \\times 64 + 87 \\times 69\\), 我們觀察到後者其實有用到前者的結果，因此我們可以宣告一個變數紀錄前者，如下所示：\n第七行的 int n = 87 * 69; 代表我們宣告一個名為 n 的變數，其形態為整數 (int, integer), 同時我們將其值設為 \\(87 \\times 69\\). 按下 F5 執行它，你會發現結果應該與 1_2 相同。\n輸入# 目前為止，我們的程式仍然還是只能輸出固定的內容。接下來，我們看看下面這個程式：\n趕緊按下 F5 執行看看，你會發現你的程式停下來等待你輸入一個整數，按下 Enter 之後就會重複你輸入的整數。我們一樣在第七行宣告一個名為 n 的整數變數，只是這回我們沒有賦予它初始值。第八行的 cout 你現在應該頗熟悉惹，值得注意的是第九行的 cin \u0026gt;\u0026gt; n;, 就是這行程式碼讓我們可以輸入一個值傳遞給 n.\n類題演練# GreenJudge a004 剛才我們的範例都只有一個變數，那麼如果有多個呢？？比如今天我們想寫一個程式，令使用者輸入被除數及除數，而程式輸出商及餘數，可能有些人現在會這樣寫：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a; int b; cout \u0026lt;\u0026lt; \u0026#34;Please input two integers a and b: \u0026#34;; cin \u0026gt;\u0026gt; a; cin \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; \u0026#34;a/b = \u0026#34; \u0026lt;\u0026lt; a / b \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;a%b = \u0026#34; \u0026lt;\u0026lt; a % b \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; return 0; } 這樣其實也沒有錯，只是我們可以合併起來：\n注意到 % 是取模運算子，白話文就取餘數；而 C++ 中兩個整數 / 是取其商，且是向 0 取整。關於運算子們的細節，之後會再詳加說明，置紹你現在可以很直覺地使用 +, -, *, /, %。\n當然你 ,, \u0026lt;\u0026lt;, \u0026gt;\u0026gt;, /, % 前後的空格都可以省略，每行前面的縮排也非必要，甚至你高興整個 main() 函式可以擠在同一行，只是有夠醜。寫程式排版的習慣風格有很多種，比較新的語言會有官方推薦的，而 C/C++ 就是百花爭放。我自己是偏愛 BSD/Allman Style, 就是大括弧下放，兩兩成對比較有美感喇，VS Code ⇧ Shift + Alt (⌥ Opt) + F 的預設風格也衍生於此。\n類題演練# 除惹經典的 \\(A + B\\) 西元民國紀年轉換各一題，另外有幾題與時間相關可以善用 % 運算子。\nZeroJudge a002 ZeroJudge d049 ZeroJudge d050 ZeroJudge d060 ZeroJudge d073 ZeroJudge d827 GreenJudge a005 GreenJudge a006 GreenJudge a007 Debugger 的使用# 我們每次按下 F5 VS Code 底下的 status bar 都會變色，其實是執行所謂的 Debugger, 可是究竟要怎麼用？？試著在 VS Code 中對上面 1.1-2_div_n_mod.cpp 的第十行編號的前面按一下，前面應該會出現一個紅點 (break point), 這時再按下 F5 輸入兩個整數並 Enter, 程式就會停下來惹。這時看到左上會有 VS Code 自動選取的一些變數 Variables, 雙擊可以直接修改其值；左中是 Watch 雙擊可以輸入欲監看的表達式如 a + b 等，右下則是 Call Stack. 此時再按下 F5 程式又會繼續執行下去。\n動手手試看看，輸入 87 0 並在中斷點把除數的值改掉。 當然我們不可能每次都手動檢查除數是否為零，至於如何讓程式自己檢查？？且待下下回分解。\n","date":"Jul 17, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/var-n-input/","series":["C++ 入門"],"smallImg":"","tags":["C++","variable","operator","IO","debugger"],"title":"[C++ 入門] 1.1 變數與輸入"},{"categories":["程式💻"],"content":"各位準備好發環境惹嗎？？準備好惹！！那就讓我們打開 VS Code, 開啟一個你喜歡的資料夾然後創建新檔，正式開始寫程式喇！！\n不免俗地來個 hello, world. 建議自己手打一次比較有印象，不要直接複製貼上。按下 F5, 這時 Linux, Windows 使用者點選下方的 Terminal 就會看到你的程式輸出一行 hello, world, 而 macOS 則是會彈出一個 Terminal.\n接著就讓我們來細細品味、欣賞這個程式。這是 C++ 程式碼最基本的架構，雖然不必強求立刻完全理解每個細節，畢竟就跟數學、物理一樣，總是有一些基本的性質是需要背起來的，也許當下無法馬上理解也無妨，但相信多打幾次很快就可以記起來，而且未來就會逐漸體會。\n為表負責，我還是簡單說說一些目前無關緊要的細節給有興趣的人參考。首行的 #include \u0026lt;iostream\u0026gt; 代表我們引入惹 C++ 標準中 \u0026lt;iostream\u0026gt; 這個表頭檔 (header file), 裡面有稍後我們會用到的 cout. using namespace std; 表示我們要使用 std 即 standard 這個命名空間 (namespace), cout 也被定義在那裡。而 int main() { /* ... */ } 則是我們宣告惹一個函式名為 main, 它是我們程式的進入點 (entry point), 也就是我們的程式執行時作業系統會去呼叫它，然後我們用 return 0; 回傳 0 代表我們的程式正確結束。\n有些人的 main() 函式會省略 int 或改為 signed，或不 return, 這是不符合規範的。 請把焦點投注在我們的 cout, 它才是我們今天的重頭戲。cout 是個物件，我們可以透過 \u0026lt;\u0026lt; 這個重載的運算子把我們想輸出的內容傳遞給它，就可以輸出到 Terminal. 而用雙引號包起來的的稱作字串 (string), 它就是我們要說的話。\n動動手手試試看：修改雙引號內的內容，按下 F5 觀察有什麼不同？？ 類題演練# ZeroJudge d483 GreenJudge a001 錯誤訊息# 有個值得留意的小地方，就是 cout \u0026lt;\u0026lt; \u0026quot;hello, world\u0026quot;;, return 0; 後面都有個分號，這是 C++ 語法的規定。\n動動手手試試看：故意刪掉分號，再按下 F5 觀察會有什麼反應？？ 這時理論上 g++ 會發生編譯錯誤，VS Code 會告訴你相關錯誤訊息。往後遇到如此情況不必驚慌，畢竟你犯的錯通常別人早就犯過，即使讀不懂也沒關係，上網 Google 一下很快就找的到解答。\nEscape Sequence# 先別被這個小標給嚇著惹。我們回到 cout, 今天如果想要輸出的內容需要換行，比如說：\nhello, world\nhi, nevikw39\n那要怎麼辦？？直接在 \u0026quot;hello, world 後面按 Enter 然後輸入 hi, nevikw39?? 如果真的這麼做且按下 F5, 就會得到錯誤訊息，趁現在來觀察一下，我這邊的錯誤訊息會說 cout \u0026lt;\u0026lt; \u0026quot;hello, world missing terminating \u0026quot; character, hi, \u0026quot;; ‘hi’ was not declared in this scope; 簡單來說就是 C++ 中雙引號必須在同一行，所以直接在 \u0026quot;hello, world 後面按 Enter 就會導致編譯器找不到結尾的雙引號，而下一行的 hi 不在雙引號內也讓編譯器不認識它。\n所以究竟該怎麼辦喇？？這時我們就需要跳脫序列 (Escape Sequence) 的幫忙。所謂跳脫序列，指的是我們用一個特殊字元 \\ 來跳脫下一個字元，使之表現出特定功能。比如當我們要換行時，就可以使用 \\n. 下表列出一些常用的跳脫字元：\n跳脫字元 功能描述 \\n new line, 換行 \\t tab, 定位字元 \\b backspace, 游標會倒退一格 \\a alert, 電腦的蜂鳴器應該會叫一聲 \\\u0026quot; 就是 \u0026quot; \\\\ 就是 \\ 找的到 \\ 嗎？？它在 ⌫ Backspace 底下，稱作 back slash, 反過來的斜槓 程式碼很簡單就不列出惹。可以注意到跳脫字元在 VS Code 中與一般的字串字元有不同的顏色。\n類題演練# ZeroJudge e926 TCIRC Judge c001 GreenJudge a002 GreenJudge a003 有些教材會要你使用 endl, 其實可以不必管它。事實上，endl 的作用就是 put 一個 \\n 之後再 flush cout 的 buffer, 以現今的終端機而言是雞肋，在 OJ, 競賽場合更是畫蛇添足。 輸出其他內容# 每次都只輸出字串未免有些無聊，電腦的強項不是運算嗎？？試著輸出一些運算結果吧！！\n一樣按下 F5, 看看是不是得到答案惹？？不過這樣還是好單調喔，只能輸出固定的運算。因此，敬請期待下一篇介紹如何宣告變數、允許使用者輸入！！\n","date":"Jul 16, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/hello-world/","series":["C++ 入門"],"smallImg":"","tags":["C++","hello, world","IO"],"title":"[C++ 入門] 1 hello, world 與輸出"},{"categories":["程式💻"],"content":"俗諺云：｢工欲善其事，必先利其器。」在我們正式開始寫程式前，當然也必須先準備好開發的環境。所謂開發環境，指的就是我們撰寫程式中所依賴的一切。\n我們開發的既然是命令列程式，自然可以在命令列上開發，比如使用 vi 作為編輯器，再手動下 g++ 指令編譯，但那樣太電惹不適合我們。現代人一般使用整合式開發環境 (IDE, Integrated Development Enviroment), 具備文字編輯、編譯鍵置、執行偵錯、版本控制等功能的圖形化介面。\n市面上的 IDE 琳瑯滿目，像是 macOS 專用的 Xcode, 以 Java 為主但考 APCS 或 TOI 入營考拿來寫 C++ 也很舒服的 Eclipse, 在全國賽搞我的 Code::Blocks, LKK 老掉牙的 Dev-C++, 以及號稱地表最強 IDE 的 Visual Studio. 不過，我最推薦的是 Visual Studio Code.\nVisual Studio Code# Visual Studio Code, 常簡稱 VS Code, 雖然與 Visual Studio 一樣是微軟出品而名子只差惹一個詞，但兩者可謂風馬牛不相及。相比之下，VS Code 是個完全免費、開放原始碼而且輕巧許多的 IDE. 此外，VS Code 也有著活躍的社群與豐富的插件，比如在你的 Discord Status 顯示你正在寫什麼、寫惹多久。\n我覺得最實用的功能包括但不限於反白某段 code 再按下各種括弧或引號即可把它包起來、強大的 IntelliSense 可以容易地 Go to Definition, 按下 ⇧ Shift + Alt (⌥ Opt) + F 就能輕鬆自動排版得到美觀的程式碼、也可快速地重新命名變數等等，還有許多待你一一發掘，往後我們也會陸續介紹。\n接下來就分別說明各平台的安裝流程。\nLinux# 如果你用 Linux 應該很電⚡吧，就根據自己 distro 的 package manager 安裝好 g++, gdb; VS Code 的設定非常簡單，打開一個資料夾、新增一個 .cpp，它應該會問你要不要安裝 C/C++ 套件, 按下 F5 全部都用預設選項即可，記得 build task 選 g++。\nmacOS# 蘋果的話稍微麻煩一點，可以參考官方的這份文件，茲節錄重點如下：\n檢查是否有安裝 clang, 可以打開 Terminal 並執行以下指令 xcode-select --install 在 VS Code 中打開一個資料夾、新增一個 .cpp，它應該會問你要不要安裝 C/C++ 套件 按下 ⌘ Cmd + ⇧ Shift + B 進行建置（相當於編譯），選擇 C/C++ clang++ build active file. 如果你是 macOS 10.15 Catalina 或以上版本，請在這時開啟的 tasks.json 找到 \u0026ldquo;tasks\u0026rdquo;: [ 這行後面按下 Enter, 並貼上以下 code: { \u0026#34;label\u0026#34;: \u0026#34;Open Terminal\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;osascript -e \u0026#39;tell application \\\u0026#34;Terminal\\\u0026#34;\\ndo script \\\u0026#34;echo hello\\\u0026#34;\\nend tell\u0026#39;\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [] }, 貼完之後可以按下 ⇧ Shift + ⌥ Opt + F 自動排版美觀一下。然後點選 Menu Bar 的 Terminal \u0026gt; Run Tasks\u0026hellip;, 選擇 Open Terminal, 這時應該會彈出視窗要求給予權限，允許之後會跳出一個 Terminal. 按下 F5 （記得 Fn 鍵），選擇 clang++ build and debug active file, 請在這時開啟的 launch.json 找到 \u0026ldquo;externalConsole\u0026rdquo;: false, 並把 false 改為 true 大功告成，以後只要按下 F5 即可編譯並偵錯！！ 假若搞不太懂或遇到什麼困難，這裡分別是參考的 tasks.json, launch.json.\nWindows# 因為 Windows 實在很不方便開發，還好從 Windows 10 開始微軟推出惹 WSL (Windows Subsystem for Linux) 這項技術，令 Windows 使用者可以享有以非常接近 native 的方式運行 Linux 的福音，假如你未來還想學習 Python, Go, Java, Node.JS 等語言或是 git 等等，那麼不要猶豫馬上安裝 WSL 吧。\n這是微軟官方對於 WSL 安裝的說明，因為有機翻中文就不特別說明，至於要選 WSL 1 或 WSL 2 其實都可以，怕麻煩就 WSL 1 簡易許多，反正以後還可以改，在 Microsoft Store 如果不知道要裝哪種 Linux Distro 就選 Ubuntu 吧。第一次開啟後輸入 Linux 專用的帳號與密碼，等待作業系統安裝完成首先執行以下指令：\nsudo apt update sudo apt upgrade sudo apt install g++ gdb 會要你輸入剛才設定的 Linux 專用密碼。接著參照這篇文章，之後就跟上面 Linux 的步驟差不多，打開 Windows 的 VS Code, 安裝 Remote - WSL 套件，開啟一個資料夾、新增一個 .cpp，它應該會問你要不要安裝 C/C++ 套件, 按下 F5 全部都用預設選項即可，記得 build task 選 g++。\n如有遇到任何困難或問題，歡迎在底下留言或透過底下聯繫方式私訊喔 o\u0026rsquo;_\u0026lsquo;o\n","date":"Jul 16, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/environment/","series":["C++ 入門"],"smallImg":"","tags":["C++","VS Code"],"title":"[C++ 入門] 0.2 準備開發環境"},{"categories":["程式💻"],"content":"我自學 C++ 的網站# 這些是我當初自學時參考的網站，小學生都可以學起來，相信真的不會太難。\n美麗 C 世界 (C++ Version) 語言技術：C++ Gossip 程式語言教學誌 網路上還有很多很多的資源，我是認為文字還是比影片彈性自由，，不妨多看看說不定可以找到勝盒自己的。\nOnline Judge# 學惹程式之後要幹嘛？？怎麼知道自己的程式對不對？？如何增進程式設計的技巧？？Online Judge, OJ, 或譯為線上評測系統，是目前最普遍練習程式的方式。\nOnline Judge 上會有若干題目，每個題目會有一定的輸入及輸出條件及格式，要求你撰寫一個程式，在一定的時間與記憶體內，根據輸入與題目所述進行運算並輸出。\n還記得我們先前說過：一個程式最重要的就是輸入和輸出嗎？？ 也就是說， OJ 本質上是一種黑盒測試，它並不在乎你程式具體內容，只關心你最終輸出是否正確。以下是適合新手的 OJ:\nZeroJudge 台灣最廣泛的中文 OJ, 只是題目有點雜 GreenJudge 題目的順序對於初學者很棒，只是系統比較舊 UVa 歷史最悠久的 OJ, 對英文不排斥的話也很不錯 TCIRC Judge 自己家的 OJ 必須推 XD TIOJ 建中 OJ, 對新手算難 根據你提交的程式的輸出與標準答案比對後的結果可能如下：\nCode Description Note AC Accepted 完全正確 WA Wrong Answer 存在錯誤 NA Not accepted 對於多筆測資，至少有一非 AC CE Compile Error 編譯錯誤 RE Runtime Error 執行時期錯誤 TLE Time Limit Exceeded 超過時間限制 MLE Memory Limit Exceeded 超過記憶體限制 OLE Output Limit Exceeded 輸出過多 RF Restricted Functions 使用非法的函式 如何學好程式？？# 學會程式真的不是一件太艱難的事，其實與生命中許多體驗相若，只要準備好正確的態度：\n懷抱對於程式的熱忱 具備豐沛的好奇心 擁有持久的毅力 敢於犯錯、不畏挑戰的勇氣 鍥而不捨地尋求解決困難的能力，包括善用 Google 共勉之！！\n","date":"Jul 15, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/programming/resources/","series":["C++ 入門"],"smallImg":"","tags":["C++","Online Judge"],"title":"[C++ 入門] 0.1 學習程式的資源們"},{"categories":["程式💻"],"content":"最近想開始撰寫一些程式語言入門的教學。在這樣高度資訊化的社會，每個人都或多或少需要會點程式。可是網路上程式的教材多如牛毛、各種資源俯拾皆是，那麼為何我還要再寫一份呢？？原因是我覺得大部分的教材皆過於單一化，因此希望將我從小自學程式、高中社團擔任教學、解答同學常見問題以及參與一些競賽的經驗做點整理。\n在這份教材中，我將自初學者角度從 0 出發，由關於電腦的小常識、開發環境的準備開始，以及豐富的題目，一步一步建立對於程式語言的觀念。以下是本教材的目錄：\n序章 hello, world: 輸出入、變數與運算 程式流程：條件判斷與迴圈控制 C-style 指標、陣列及字串 函式與其他 而在序章中，我們會先介紹電腦與程式，接著帶各位準備好開發環境，最後說明一些其他事項。本文的介紹可以當故事看看即可，不必強求完全理解。\n何謂電腦？？# 你現在不必急著對著手機的 Google Assistant 問說：｢什麼是電腦？？」XD 如果你小時候與我相同是個好奇寶寶，就會知道維基百科上說：｢電腦，全稱電子計算機……」從英文來看 compute 意為計算，computer 當然是指計算的人或機器。\n今天畢竟是入門，就跳過穿孔卡帶、差分機，直接切入主題：現代電腦惹。世上被認為第一部電子計算機，ENIAC, 在每次運算前，必須先手動調整電路配線，才能通電運作得到結果。也就是說，ENIAC 不能儲存 ｢程式」，每次只能執行固定用途的一套 ｢程式」。\n直到馮·紐曼（馮諾伊曼，von Neumann, 你唸 IKEA 還 Costco??）基於圖靈機概念及二進位制提出同名架構，才正式奠定現今通用型電腦的根基。在馮·紐曼架構中，電腦被分為五大部門：\n控制單元 Control Unit 運算邏輯單元 Arithmetic Logic Unit 記憶體 Memory 輸入 Input 輸出 Output 其中，CU, ALU 合在一起就是我們的 CPU. 當然，我們的重點並不在此，本節核心觀念是：\n程式接受輸入，將資料儲存在記憶體，經由 CPU 運算後，將結果輸出。 程式可以幹嘛？？# Program, 原意為一套程序，看過上面電腦的簡史後，大概能體會如今我們可以透過撰寫一些指令替代原始的調整配線，使電腦進行某些運算。\n電腦是二進位制的，自然也只懂二進位制，但應該不會有太多人覺得撰寫二進位制 Op Code 是很有趣的，因此組合語言出現惹。但是這樣仍然存在諸多不便，隨著程式日益複雜，高階程式語言應運而生。\n典型的高階語言程式原始碼以較適合人類理解的語法撰寫，經過一系列預處理，編譯器、組譯器及連結器才得到電腦讀得懂的可執行檔。\nJava, C# 這類語言會先編譯成位元組碼，等到執行前才由虛擬機 Just-In-Time 編譯為可執行檔。Python, JavaScript 這類直譯語言則是在每次執行時才被直接轉譯執行。\n儘管我們日常生活中常見的都是具備圖形化介面的程式，但最早的程式是執行在命令列（終端機，Command Line, Console, Terminal），而這種程式開發起來也容易許多。\n為何（不）要學 C++??# 最後就是對於初學者，應該要學習何種程式語言？？參考 TIOBE, 可以發現 C 語言自 1970s 始終維持高超人氣而不墜，C++ 同樣也維持著不錯的成績。近年來，一些新興語言如 Python, Go, Rust 亦獲得不少關注。\n我的觀點是，在可預見的未來內，當前的主流作業系統將繼續維持與 C 的羈絆而難以撼動，因此對於志於資工的學生 C/C++ 仍是首選。而 C++ 相較於 C 對初學者更為友善且具備更多功能。雖然本教材以 C++ 為主，仍會適時註明相關 C 語法。\n假如你非本科生、資工不是你最主要的興趣，那麼 Python 就十分適合。\n","date":"Jul 14, 2021","img":"https://nevikw39.cf/images/tiobe.png","largeImg":"","permalink":"https://nevikw39.cf/programming/abstract/","series":["C++ 入門"],"smallImg":"","tags":["C++"],"title":"[C++ 入門] 0. 序：何謂電腦？？程式可以幹嘛？？"},{"categories":["申請入學"],"content":"審查資料，俗稱備審，雖然我不知道 108 新課綱還🈶️沒🈶️這項甄試，但希望本篇觀念或對學習歷程等也🈶️些許幫助。\n學校 交通 清華 中央 分數 83.67 89.75 84.33 成大備審占比為 \\(0\\%\\)，即使仍然🈶️🉐上傳，卻沒公布成績。另外，雖然中央我沒在截止期限前按下確認，但幸好事後致電確認甄委會🈶️逕予轉送。由上表🉑️以看的出來，我🉐到的分數其實偏低。追根究柢，我認為問題在於內容的呈現。\n內容# 備審的美工真的沒那麼重要，畢竟特殊選材的朋友以 Word 搭配標楷體還是上交大惹。與此相比，內容的呈現反而關鍵許多。事實上，輔導老師與模擬面試的教授都曾體醒過我的備審過於文學化，🉑️惜已經太遲惹。\n從小到大我們所接受的教育只培養出撰寫🈳洞而冗長文句的能力，殊不知教授們期望的是精簡的條列式的重點摘要。\n這或許🈶️點難，但你真的需要把你那些精心雕琢的修辭刪去。望各位學弟記取我的教訓，切莫重蹈覆轍。\n排版# 假如你看到我爛爛的成績還看到這裡並願意瞧瞧我的一點淺見，那真是太感激惹！！\n絕大多數的人或許皆是使用 Word 來做文書處理，Mac 使用者還🈶️更好用的 Pages 🉑️以考慮，而還🈶️些人是 Adobe InDesign 的愛好者。\n不曉🉐你🈶️迷🈶️聽過 \\(\\LaTeX\\)？？\n\\(\\TeX\\) 是 Donald E. Knuth 教授（對，就是 KMP 的那個 Knuth）為惹他的大作 The Art of Computer Programming 我撰寫的排版軟體。曩者 Linus 大神為惹 Linux 僅以十天開發出 git，而 Knuth 教授同樣因此創造出造福世人的軟體。\n由於其精美的排版，特別是對於數學符號及公式優雅的處理，\\(\\TeX\\) 很快成為學界普遍採用的排版軟體。因為 \\(\\TeX\\) 實在太過強大複雜，因此出現許多不同的巨集版本。\n\\\\(\\\\LaTeX\\\\)# \\(\\LaTeX\\) 是最被廣泛使用的 \\(\\TeX\\) 版本，生活中其實不乏其蹤跡，舉凡 NPSC 題目與題解簡報、 TOI 題目、酷音輸入法（如果你🈶️用過 Linux 的話應該會知道）的報告、C.L.R.S. 四人鼎鼎大名的著作 Introduction to Algorithms、Prof. Antti Laaksonen 的 Competitive Programmer\u0026rsquo;s Handbook、IOICamp 課程中央多數的簡報，聽說台大社科院的教授的上課簡報也很多是 \\(\\LaTeX\\) beamer。\n\\(\\TeX\\) 算是一種標記式語言，透過一定🈯️令、巨集來控制輸出結果。由於強大的自由開放社群，\\(\\LaTeX\\) 🈶️大量好用的 package，比如 pgfplots 能畫出精美的圖形。\n我是因為高二起管理社團 OJ 才迷上 \\(\\TeX\\)，之後的公民報告、小論文等皆作為我的 \\(\\LaTeX\\) 練習。建議🈶️志於此的同學🉑️以現在就動手嘗試。\n網路上的 \\\\(\\\\TeX\\\\)# 維基百科🉑️以使用 \\(\\LaTeX\\) 語法來對公式進行排版，各大 OnlineJudge 也都支援 MathJax 等方式呈現數學符號及公式。而 Hugo \u0026mdash; 這個 Blog，則是使用 \\(\\KaTeX\\) 來渲染。\n使用 \\\\(\\\\LaTeX\\\\) 製作備審的優點# 使用預設模板即十分美觀，且能給予 \\(\\TeX\\) 常用者熟悉感。 🉑️以把不同部分放在不同檔案，分開編輯一次 input。 多間學校🉑️以共用內容，避免到處複製貼上產生遺漏之虞。 🉑️以使用 \\if ... \\else ... \\fi 針對不同校系進行客製化。 再結🈴 git 版本控制實作備份或回復修改歷史都輕輕鬆鬆，以 shell script 一次產生所🈶️校系的備審真是方便，搭配各種工具簡直如虎添翼。 我的備審 GitHub repo，歡迎大家參觀 o\u0026rsquo;_\u0026lsquo;o\n🈶️問題🉑️以發 issue, 在這裡留言或是 Telegram, Instagram 私訊我喔！！\n","date":"May 20, 2021","img":"https://nevikw39.cf/images/bio-and-std-plan.jpg","largeImg":"","permalink":"https://nevikw39.cf/posts/bio-and-study-plan/","series":[],"smallImg":"","tags":["LaTeX","備審","成大","中央","清大","交大","APCS"],"title":"審查資料準備方向"},{"categories":["申請入學"],"content":"現今大學推行多元入學方案，入學管道百花齊放。自 107 學年度起，甄選委員會試辦一階檢定、篩選納入 APCS 成績，提供另一種入學管道。\n今年學測難度🈶️所提升，各科頂標大多下降約二、三級分，我的成績也未盡理想。所幸，我的 APCS 成績通過多數校系的門檻。\n科目 國 英 數 自 總級 級分 13 15 12 14 54 排名比 24.86 3.89 8.75 7.67 5.87 我🈸請惹交、清、成、央、政大資工系 APCS 組及成大電機，很意外的政大翻車並沒🈶️通過一階。事後，我推測應該是因為 APCS 實作四級分的人數實在過少，以至於當中即使🈶️人數學只🈶️ 11, 10 級分也能通過一階，而政大門檻三級分較多的競爭者才提高數學標準。\n學校 交通 清華 成功 中央 總分 83.93 90.47 90.27 92.16 結果 備 11 備 1 備 1 正 2 🈸️請入學分發結果：國立清華大學資訊工程學系(APCS組) 由於 APCS 組開辦不久、名額稀少，因此我想把我這次🈸請的感想稍作整理，包含各校最低正取分數、放榜提早時間等，供未來🈶️志循此管道之同學參考。\n審查資料準備方向 成大心🉐 中大心🉐 清大心🉐 交大心🉐 撞期# 我一階通過的校系中，成大與中央的甄試撞期。經過不少努力，詳細請見兩校甄試心🉐，最終很幸運地🉐到圓滿的結局。不過事實上，清交對此🈶比較齊全的規範。\n服裝# 關於面試的服裝，即使🈶️些人會穿著地非常正式，但個人覺🉐並不是太重要。首先，高中生穿西裝看起來實在很滑稽；再者，科學班的同學穿著 T-shirt 最後還是正取交大惹。由此🉑️知，對於二類科系，穿著真的不太要緊。\n自我介紹# 自我介紹是面試非常重要的環節。雖然教授或許曾看過備審，但在自介時適當地強調重點🉑️以引導教授提問的方向。比如我備審中關於網管、GitHub, 數學成績的部分著墨較少，但最終大部分都🈶透過自介彌補。\n自介的長度大約抓一分鐘。去年成大是一分鐘且🈶助教計時，今年我則是被要求兩分鐘。清大的話則是告知🉑以使用簡報五分鐘，交大就是固定的一分鐘。輔導室的面試互助小組及模擬面試等資源🉑️以善加利用，或多或少定🈶裨益。\n如🈶️任何問題，歡迎善用敝站留言功能，或是私下 Telegram, Instagram 聯繫我。\n","date":"May 20, 2021","img":"https://nevikw39.cf/images/coll-app.jpg","largeImg":"","permalink":"https://nevikw39.cf/posts/college-application-and-apcs/","series":[],"smallImg":"","tags":["APCS","備審","面試","筆試","成大","中央","清大","交大"],"title":"APCS 校系申請入學經驗分享"},{"categories":["拉麵🍜"],"content":"疫情停課後隔天，我獨自去吃原本預計段考中午要去吃的七面鳥。\n這碗是濃厚土雞白湯鹽味，雞叉燒給🉐非常大方，雞白湯真的很濃郁。🉑惜店裡很熱，吃到最後🈶點膩。\n希望疫情早日降溫，讓我繼續探訪各地拉麵。\n🏬店名 らーめん七面鳥 🏠地址 403 台中市西區中美街 331 巷 15 號 🔗連結 Facebook ","date":"May 18, 2021","img":"https://nevikw39.cf/images/shichimenchou.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/shichimenchou/","series":[],"smallImg":"","tags":["七面鳥","名店拉麵"],"title":"七面鳥"},{"categories":["拉麵🍜"],"content":"5/3 是校慶補假，我和兩位社團好友展開台中捷運拉麵巡禮。早上收到中央與清大的成績單後，頂著毛毛雨散步去大慶站，這是我第一次搭乘台中捷運綠線，乘客人數確實很冷清，不過體驗尚稱舒適。\n麵本初是貍匠拉麵四家品牌之一，主打的是魚類及貝類的拉麵。不過我並不是特別喜歡海鮮，所以我點的是雞湯拉麵。\n雖然是雞湯，但湯底當然還是少不了魚貝的鮮味，我最後甚至喝完整碗湯。魚肉叉燒非常特別，我🈶乖乖吃完。溏心蛋有用白蘭地醃漬，也很入味。\n🏬店名 麵本初純水魚貝拉麵 🏠地址 406 台中市北屯區熱河路二段 210 號 🔗連結 Instagram ","date":"May 3, 2021","img":"https://nevikw39.cf/images/fishramen.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/fishramen/","series":[],"smallImg":"","tags":["貍匠","名店拉麵"],"title":"麵本初"},{"categories":["拉麵🍜"],"content":"5/1 一中校慶園遊會，我和兩位同班朋友遊到校外 XD\n山下公園是 2020 年度台灣拉麵愛好會社團票選拉麵金賞的第四名，也是同樣高人氣的拉麵店🈶囍拉麵、Men Monster 的姊妹店。\n畢竟是週六，約莫十點即從學校出發，十一點左右抵達金典綠園道商場，但我們在三樓的市場找惹好久才找到。我們算是很早到的，只是由於不熟排隊規則，成為第二組客人。\n我點的是醬油雞豚濃湯（繁盛），舒肥雞胸叉燒🈚🉑挑剔，現場煙燻的豬五花叉燒搭配湯頭讓我暫時拋卻油脂與理智大快朵頤。\n🏬店名 山下公園 ラーメン 🏠地址 403 台中市西區健行路 1049 號 金典綠園道商場三樓 🔗連結 Instagram ","date":"May 1, 2021","img":"https://nevikw39.cf/images/yamashita.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/yamashita/","series":[],"smallImg":"","tags":["有囍","金賞拉麵"],"title":"山下公園"},{"categories":["申請入學"],"content":" 結果：備 11 項目 學測 備審 面試 總分 分數 80.00 83.67 85.33 83.93 最低正取分數：\\(91.73\\) 以下是我對於交通大學資訊工程學系 APCS 組第二階段甄試的一些心🉐。\n交大的面試比起其他學校晚惹一週，我🈶訂到來回普悠瑪以攤平個人🈸️請的成本。去清大面試吃大角拉麵時🈶聞到一股很想的咖哩，後來我查到東門市場有家小次郎咖哩也頗負盛名。原本看到店休日為週一很開心的想去嚐試，熟料店家在臉書上公告當天未營業而撲惹🈳。\n一樣搭乘藍 1 區，下惹公車站卻在大太陽下走惹二十分鐘才到校門口。面試的地點與寒訓那時相同，在工程三館，只是在三樓。現場同樣🈶️休息是，只是冷氣不甚強，也沒什麼人關心你。\n面試# 面試的時間一個人為七分鐘，含一分鐘自我介紹，其餘為三位教授問答。以下是我被握到的問題：\n付出最多努力的 GitHub 專案 我回答 Zerojudge 爬蟲 為何做這個爬蟲 快速匯出 AC codes 🈶沒🈶造成他人網站負擔 顯然🈚️ 上大學後研究方向 我提到🉑️能繼續在演算法競賽領域，對於資安也很🈶興趣。 說一個資料結構及其用途 我舉 treap 為例，說明他強大的功能包括動態第 \\(k\\) 小等。 資料結構與演算法在生活中的應用 起初我愣住，在教授引導後🈶️回答🗺地圖導航用到最短路徑演算法。 程式怎麼處理理想與現實中的誤差 我一直在打太極☯️ QQ. 最後時間到問一半就不問惹，就被請出去喇。\n總結# 交大提早一天下午就放榜惹，還是別人跟我說我排名的。交大是我的第一志願，排那麼後面挺難過的，甚至排在那些🈸️請中字輩或牛逼名校北科大備 196 的人之後。隔天看到成績但後也只能坦然接受，畢竟學測數學就是考那麼爛、備審🈶夠糟，面試表現差勁，或許我跟交大就是🈚️緣 na!!\n","date":"Apr 21, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/nctu/","series":["甄試心得"],"smallImg":"","tags":["交大","面試","APCS"],"title":"交通大學面試心得"},{"categories":["申請入學"],"content":" 結果：備 1 項目 學測 備審 面試 總分 分數 91.11 89.75 90.50 90.47 最低正取分數：\\(92.28\\) 以下是我對於清華大學資訊工程學系 APCS 組第二階段甄試的一些心🉐。\n中央筆試結束後，我先搭非常擁擠的🚌公車到達中壢車站，再轉自強號去新竹。這是我高中三年第一次坐🚆㊋車。和社團認識的竹中朋友在東門市場享用大角拉麵後，晚上住在清齋十樓會館。雖然訂房完才發現中央結束後來🉐及回家，畢竟清大面試在下午，但自高處俯視靜夜的清大是十分特別的體驗。\n簡報# 清大的面試🉑️以使用五分鐘自我介紹簡報，需至少提前兩天以 Google Form 繳交，格式為 PDF, \\(\\leq 10MiB\\). 這個要求一看就非常適🈴️使用 \\(\\LaTeX\\)，我也利用 beamer package 做出我第一個 \\(\\LaTeX\\) 簡報。\n面試# 雖然我的順序是第十四也差不多提早一小時報到，但我算來的很晚的。系上🈶️準備會議室供考生休息，現場冷期強勁且提供插座及網路。面試共分為兩關，每關個十分鐘、兩位教授。\n第一關# 第一關是五分鐘自我介紹及五分鐘教授問答。一進門後就是筆電，左後方是投影幕，而教授在左方的位置。助教會幫忙開好簡報、說明簡報筆使用方式。唯投影機品質不甚佳，我挑選的清大紫變🉐像藍色。\n我的簡報約🈶️ 25 頁，講🉐非常之趕以致於教授的⏲計時器正好在我收尾的時候響起。在自介中，教授對我重啟社團 BBS 站很🈶️反應，是我三場面試唯一一次被稍微打斷。接下來我被問的題目如下：\n數學與資工如何取捨抉擇 我的簡報最後展示我高三上數學突飛猛進的假象 (? 顯然成功引起教授興趣。數學中當然🈶️不少部分很🈶️趣，但對我而言他充其量不過是資工的方法，而非目的。 考 APCS 時遇到什麼困難 我說明為何經過多次才四級分，並檢討自己的時間分配 跟主辦方的毒瘤後測。 競賽與學業如何取🉐平衡 就是上課認真聽講 並沒🈶️，假日練習程式，🈶️提到高二上還🈶️社課壓力，令我成長不少之類的。 NPSC 分工模式為何 負責躺分與點心 因為我很爛，所以回答🉐很心虛，就只🈶️初賽做出一提水題🉑️以說嘴，決賽我負責參與討論 QQ. 還🈶️🈸️請哪些校系，清交選哪間 首先如實回答後就被追問這理所當然的必考題，然而當下我不知道腦子怎麼惹竟然回答交大跟陽明🈴️併後會🈶️很多問題，出國🉑️能會被不認識，教授表示是很特別的回答。 我應該要說中一中🈶️不少出身清大的優秀教師，予我許多深刻而長遠地的影響與教誨，比如化學、數學、國文老師等⋯⋯ 第二關# 第二關則是專業白板題，同樣從右後方的門進入，白板位在左方牆壁上。教授坐在白板前，旁邊🈶️題目放在信封袋中要抽。往年的題目🈶️兩單調數列求第 \\(k\\) 小的 \\(A_i + B_j\\)、運算式解析或走迷宮等，我原以為都不會太刁難，誰知我不幸籤亡抽中魔王題⋯⋯\n🈶️ \\(100 \\times 100\\) 棋盤，每格顏色🉑️能🈶️三種，🉑️以放三種顏色的棋子\n如果棋子跟格子一樣顏色🉐 \\(P\\) 分，如果跟上下左右配對🉐 \\(Q\\) 分\n當下我直接原地愣住，呆掉不知道多久，腦中非閃過🈚數思緒，想著我的好運終於用罄，原來就要止步於此。教室陷入一片沈默，過一陣子被教授首先打破，開始引導我思考，比如先考慮只🈶️兩種顏色的情形。\n我只能絞盡腦汁盡力擠出一些字句想法，一下子時間就到惹。教授自己說他們的題目還真🈶️趣的樣子，然後安慰我其實回答🉐不差 QQ.\n兩場面試結束後我被拖去聽 APCS 組學長分享，但當時我腦中一片🈳白，悲觀到認為已經名落孫山，根本🈚️法思考。心不在焉🉐聽一陣子，我就以趕車告辭。\n總結# 清大本來表訂下午五點放榜，結果提前至中午十二點。\n事實上清大給我印象很好，尤其是教務處招生中心，包括面試時校園內🈶️許多路標、系上學長分享、就算備取成績單也是以限時專函寄送等等，整體而言🉑️謂非常用心。\n最終我🉐以進入清大資工，真的非常幸運，內心也充滿感激！！\n","date":"Apr 17, 2021","img":"https://nevikw39.cf/images/nthu.jpg","largeImg":"","permalink":"https://nevikw39.cf/posts/nthu/","series":["甄試心得"],"smallImg":"","tags":["清大","面試","APCS","LaTeX"],"title":"清華大學面試心得"},{"categories":["申請入學"],"content":" 結果：正 2 項目 學測 備審 筆試 總分 分數 89.52 84.33 100.0 92.16 最低正取分數：\\(90.62\\) 中央 APCS 檢定門檻為觀念四級分、實作四級分，加上常與成大撞期，報考人數一向不多，去年甚至只🈶一位。以下是我對於中央大學資訊工程學系 APCS 組第二階段甄試的一些心🉐。\n撞期# 承上篇，成大面試結束後我立即招惹🚖計程車，同樣花 \\(\\$340\\) 在十點多到達高鐵站，買惹溏心蛋飯糰極立頓🇬🇧英式奶茶作為午餐，順利趕上 10:48 的高鐵。12:09 到桃園後去中央的🚕計程車則是 \\(\\$265\\)。雖然約莫 12:45 即抵達中央，但快到一點半時我才找到工程五館，那時已經不少人惹。\n筆試# 往年中央皆採面試，還🉑️以使用簡報輔助。但自今年起，改以筆試作為甄試項目。作為第一屆🐁白老鼠，對於官方所謂「考試範圍及內容以邏輯思考與及計算性思維為主，不以學科科目為命題方向」實在是摸不著頭緒。\n考試時間為下午 1:00 ~ 2:30 共九十分鐘，開始二十分鐘後不🉐入場，六十分鐘後方🉑️離場，不過🈚️人提早交卷。在二樓報到後（其實只是填問卷）才上位於三樓的考場，沒看到座位表的我只能依序看看每間教室的座位表，體驗不甚好😢。\n另外，APCS 組與一般組的題目相同，🉑️想而知針對普通高中生的題目對於 APCS 實作四級分的考生實在沒🈶鑑別度🉑️言。筆試題目內容如下。\n以下五題各 34 分請明確選擇三題作答：\n給定六筆數據各🈶三個值，試問哪個資料最🉑️能🈶誤，並說明原因 似乎是個統計題，我高一下數學段考常常不及格喇😡一開始就先 pass，後來還是放棄 數線上🈶四城市，每次造訪任一城市後都必須前往加油站。試決定加油站的位置，使🉐造訪每一城市及加油站之路程最小 這一看就是數學的多個絕對值其和之最小的問題，答案顯然在中位數，利用幾何意義證明，水題一個。 \\(Sol.\\) 我現場寫🉐很凌亂，塗塗改改拉來來去的 令數線上四城市由左而右座標依序為 \\(A(a), B(b), C(c), D(d), a \u0026lt; b \u0026lt; c \u0026lt; d\\) 設加油站座標 \\(x,\\) 則所求 \\(f(x) = |x - a| + |x - b| + |x - c| + |x - d|\\) $$\\because |x - a| + |x - d| = \\left\\{\\begin{array}||x - a| + |a - d|,\\ x \u0026lt; a\\\\|a - d|,\\ x \\in [a, d]\\\\|a - d| + |d - x|,\\ x \u0026gt; d\\end{array}\\right. \\geq |a - d|$$ $$\\therefore f(x) \\geq |a - d| + |x - b| + |x - c|$$ 同理 \\(|x - b| + |x - c| \\geq |b - c|\\ and\\ [b, c] \\subset [a, d] \\implies f(x) \\geq |a - d| + |b - c|\\) 故當 \\(x \\in [b, c]\\) 時，\\(f(x)\\) 🈶最小值 \\(|a - d| + |b - c|\\ \\blacksquare\\) 共兩子題： 以一百字描述資工 (12pt) 解一數獨 (22pt) 第五題跟第二題快速寫完後花惹不少時間在數獨上，但一直做不出來 QQ. 論述資訊科技對偏鄉遲緩兒童早療之益處，提供若干名詞如 VR, 5G, 人工智慧、大數據等 起初很不屑這題 (? 但最後分數真香 (? 簡單條列式說明之。 🈶一迷宮（附圖）試設計一解法 對於程式設計🈶基本認知的人都會馬上想到 BFS 吧。 加分題# 共三題，每題 5 分，其中二、三題依據慣用程式語言寫在紙上作答：\n你如何 Debug 超經典的老梗印星星 給定一字串，求其最後一單詞之長度（英文題） 按：你能使用一行 Python AC 嗎？？ print(len(input().split()[-1])) 現在知道為何筆試🉑️以 \\(100\\) 分惹吧ＸＤ\n總結# 中央表定早上九點放榜，但🈶稍微提早偷跑，大約八點半左右。事實上，後來才發現以我的學測成績應該也🉑️以上中央資工一般組。如果是要保底的話，也許不一定需要跟別人搶這名額。\n","date":"Apr 16, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/ncu/","series":["甄試心得"],"smallImg":"","tags":["中央","筆試","APCS"],"title":"中央大學筆試心得"},{"categories":["申請入學"],"content":" 結果：備 1 項目 學測 APCS 面試 總分 分數 90.0 90.0 90.67 90.27 最低正取分數：\\(91.47\\), 2020: \\(92.07\\) 或許是由於 APCS 觀念五級分的門檻，歷年報考人數為 \\(6, 7, 8\\) 人。以下是我對於成功大學資訊工程學系 APCS 組第二階段甄試的整體心🉐。\n撞期# 當初選填志願時就知道成大與中央的甄試撞期，當時我想說反正還🈶️政大。誰知道政大一階就被刷掉，徹底打亂我原先的規劃，因此我開始緊張起來。\n一階放榜後 (4/1) 也公布惹甄試時程，成大在早上而中央在下午，但要在三小時內台南趕赴中央堪稱不🉑️能的任務，難度直逼豐臣秀吉的中國大返還。\n由於中央是筆試，明言不受理時間調整🈸請，未參加筆試者不予錄取，學長建議我問問成大。我本來打算捎封 email 過去，國文老師知道後要我直接致電。我首先被複雜的分機系統搞🉐暈頭亂向，打惹好幾通最後隨便撥一個分機，她說他們剛好在搬系辦 QQ. 我留下我的聯絡資訊，同時也寄出 email. 此時我在 ptt SENIORHIGH 板🈶️篇發文，當時充滿對未來的不安。\n隔幾天依舊杳🈚️音信，清明連假後 (4/6) 我復致電同樣唯一存活的分機🉐到仍在搬遷系辦的答覆。此時我本來業已死心，甚至連中央備審都沒按下確認，但在 4/12 ㈠面試前四天的第三節課，成大系辦㊙️書突然來電說🉑️以幫我提早到 9:40!! 因此，我趕緊向中央確認我的備審被甄委會逕予繳交🈶️迷🈶️被接受。\n一夕之間，我的未來彷彿起死回生，柳暗花明。我真的非常幸運，成大資工系辦與教授也都很友善 （只是效率🈶️點差）。未來假若🈶️學弟遇到類似狀況，🉑️以試試打電話問問喔。\n備審# APCS 組備審占比為 \\(0\\%\\)，雖然系網🈶️給予🈯️引，限制字數 \\(600\\) 以內，但我是沒理管他的。只是每年成大備審似乎都會多一些奇怪項目，比如去年學長要繳交 P. 學習檔案，而我遇到 A. 個人資料表。其他學校🈶 A. 者皆🈶提供固定格式，唯成大完全沒🈶方向。因此，我把我的個人簡歷充當之。\n面試# 成大面試在 4/17 ㈤，我本來想試搭台中捷運到高鐵站，但爸爸直接送我過去。提早不少到站，本來我想乾脆坐早一點的車次，只是前面對號座都滿惹，換自由座還要退票真麻煩。我按照原定計畫 8:37 抵達台南，花 \\(\\$340\\) 的🚕計程車在九點左右抵達成大。抵達時系辦那邊還覺🉐我太早到ＸＤ\n面試的地點在該系滑鼠聽，進去後🈶前面🈶️三位教授，後面是白板。進去後教授要我進行兩分鐘自我介紹，比以往學長多一些。接著我被問的題目如下：\n社課教學內容 我稍微介紹上學期是基礎 C 語法，下學期 C++ 🈶帶到簡單 STL 跟演算法。 現場示範教學 起初我說平常上課都使用簡報，教授很耐心的引導我，最後以 STL set 為例。 set 在競賽中的應用 緊接著教授追問我在競賽中 set 的應用，我本來回答 YTP'20 決賽🈶題動態第 \\(k\\) 小🉑️以維護兩個 set，但我表達太爛只好趕快改成 YTP'19 初賽🈶個類似 two-sum 的題目。 接住🈶教授再問知不知道 set 的複雜度跟底層實作原理，我回答 R-B Tree 🈶獲🉐點頭。 伺服器網管經驗 在兩分鐘自我介紹所埋的線索成功被教授採納，我提到包括社團及個人的經驗。 GitHub 上最🈶代表性的專案 在自我介紹所設的梗再度被踩，我趁機介紹我的 ZeroJudge 爬蟲，教授曾問一些技術細節。 還🈶🈸請哪些校系 如實表明後我提到等等要趕往中央筆試並再次感謝教授惠予通融，教授也給我㊗️福。 面試時間表訂一人十二分鐘，不過我沒特別計時，大概 9:50 左右結束。🉑️惜的是成大連續兩年特選甲組及個🈸️ APCS 組都問的 Leetcode #169 Majority Element 跟 500 紅球 500 黑球的經典題竟然沒出，頗感意外。\n總結# 成大放榜比較不一樣，雖然早在 4/27 開放查詢成績，但直到 5/5 才正式放榜。前者事前沒公告時間，跟後者一樣早上九點分毫不差。因此我🈶請教學長他們那屆最低正取分數是 \\(92.07\\)，多一個🉑️以給學弟參考。成大是我第一個甄試的校系，雖然事後與其他學校相比等待的休息區略顯陽春，但特地為我提前時間在我心中大大加分。\n","date":"Apr 16, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/ncku/","series":["甄試心得"],"smallImg":"","tags":["成大","面試","APCS"],"title":"成功大學面試心得"},{"categories":["拉麵🍜"],"content":"大角拉麵是隱身在散發迷人的時代氣息的新竹東門市場中的一家拉麵店。\n中央筆試結束後，我在新竹待一晚，以準備清大的面試。\n約惹社團活動認識的新竹同學，作為稱職的在地向導引我穿梭宛如迷宮的東門市場，邊排隊邊聊天，一排就是四十分鐘，前面的顧客中似乎🈶穿著一中衫的學長。\n這碗雞清湯鹽味柚子拉麵，搭配以威士忌醃漬的溏心蛋，完全🈚愧於長長的人龍。\n因為中午只吃小小的便利商店飯糰又等惹好久，我難🉐地享受免費的加麵服務，但最終還是吃得太飽啊。\n🏬店名 大角拉麵 ダージャオラーメン 🏠地址 300 新竹市東區大同路 86 號 東門市場 #1022 🔗連結 Facebook ","date":"Apr 16, 2021","img":"https://nevikw39.cf/images/dajiaoramen.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/dajiao/","series":[],"smallImg":"","tags":["名店拉麵"],"title":"大角拉麵"},{"categories":["札記"],"content":"前兩篇都是複製備審自傳稍作修改而已，這篇應該會🈶️較多原創內容吧 (?\n升上高中後，為惹要🈶️一點多運動的感覺，我加入的是桌球社，也認識惹後來繁上 113 CS 的同班幹部伯蔚。雖然下學期加入電研社，但起初擔任幹部並不在我原先的想像。然而，在同班的竣翔積極勸說下，我才決定嘗試看看，在幹部徵選截止後才私下向學長提出意願。恰好當時教學的職務缺人孔急，我因而自告奮勇，毛遂自薦。\n社課# 我本身就十分喜歡分享所知，從我開始學習程式後即時常推坑朋友。擔任社團的教學不僅令我從中汲取成就感，也能夠滿足我自我實現的需求，能近一步內化、深化程式能力。此外，備課、解惑的同時，我也能重新審視自己不足的觀念，🈶️時更會激發我思考、探究新的想法。\n網管# 在高一下學期，社團的老舊伺服器 (HP Pro Liant Gen 9) 就開始討錢惹。因此，上幹後我積極尋覓獲🉐新伺服器的🉑️能。最後，找到「星城數位科技」願意捐贈我們社團。起初，其他幹部獲🈶️一些疑慮。但是最終我們成功架設全新的 Online Judge 也復活惹 BBS 站龍夢紀元。\n管理 Judge 時，我也動手修改 CSS 使之為暗色主題。而由於 ZeroJudge 🈶️些不盡人意的部分，我則學習 SQL 語法直接深入資料庫。\n在管理伺服器的過程當中，我藉由實際操作、設定網卡增進對於網路概念的理解，並愛上 Linux 作業系統的穩定、彈性與開放。\n寒訓# 一年一度與交大中友會🈴辦之中部電資聯🈴寒訓是每年社團活動的重頭戲。往年教學長一職皆由敝校學長出任，因此我也繼承傳統、承擔任務。與普通社課不同，寒訓的學員來自各個學校，如何規劃三天共九小時的學術活動是一大挑戰。\n與各友社的教學夥伴討論後，我們以 Python, PyGame 為主題，從認識基礎語法到結🈴 DFS 的踩地雷小遊戲，兼顧不同能力的學員予以不同的難度。\n這五天四夜徜徉在交大校園中是我非常難忘的經驗，也與社團的好友編織不少🉑️貴的回憶。\n","date":"Apr 6, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/club/","series":["高中生活"],"smallImg":"","tags":["程式","電研","社團","伺服器"],"title":"偶然的社團之緣"},{"categories":["札記"],"content":"升上高中不久後就是校內學科能力競賽資訊科的初試，出於嘗試看看的心態我不假思索旋即報名參加。現在回想起來，當時的我不過是個孤陋寡聞的井底之蛙，STL 中的容器僅僅概略地認識 vector，連內建的 sort() 都不會使用。想當然爾，我就此名落孫山、鎩羽而歸。\n然而，我並沒🈶️感到太大的氣餒；相反地，我立即深刻的體悟到自己的不足🈶️多巨大，痛下決心要孜孜矻矻日日苦練。2018/12/31 晚上，放下地科題本後，我註冊惹 ZeroJudge ，正式在程式競賽的汪洋上揚帆起程，並在 2019/01/01 01:01 拿到第一個 AC。此後，我利用每一天的許多零碎片刻，展開密集刷題畫。我替自己訂下目標，要在一年內成為校內榜上的第一名；事實上，我比預期的更快，在下學期就辦到了。\n此外，我也在㋿年的第一天開始在 GreenJudge 上積極尋找歷屆中投區及彰雲嘉區能競複賽試題實戰演練，期望🉐以進一步提升自己的能力。在這個階段，我感受到自己的明顯進步，並以解題為樂。\n能力競賽# 經過將近一年的準備，高二開學後，我順利通過校內筆試及上機測驗，如願獲選成為校隊，🉐以參加中投區複賽並拿下第四名，成為敝校參加資訊科決賽中唯一的普通班學生，獲🉐承辦單位師大額外加開之「潛力 Star 獎」及 \\(\\$ 500\\) 圖書禮卷。\n高三時由於日益漸重的課業壓力，我🈚️法再全心投注於程式競賽中，不過依然入選校隊，在複賽中獲🉐第九名佳作的成績。\nNPSC# 高二就曾和社團同屆的亮軒、伯蔚組隊，🉑️惜初賽僅ＡＣ兩題飲恨。高三雖然宣稱要專心準備學測，但仍然🈲不住與學弟🉐壹、博靚組隊。\n縱使我們這隊以較後段的名次晉級，但是在決賽現場我們最終作出四題、獲🉐四顆氣球，以第 \\(16\\) 名作收。\n心🉐# 我常常覺🉐，能在青少年時期接觸到程式競賽，我是多麽地幸運！在程式競賽中，除了資料結構與演算法，我學到的更多的是關於面對生命的態度。\n首先，如同父親予我的期許「謙謙君子，卑以自牧」，我應該始終保持謙遜，因為在廣大的競賽領域中，永遠🈶️學不完的技術與追不完的強者。每當我學🉐稍多一絲、爬🉐稍高一點、看🉐稍遠一些，我總是發現自己更渺小。曾經我一度驕傲，現在我羞愧不已。\n再者，我重新體認到 ``Practice makes perfect.\u0026rsquo;\u0026rsquo; 這句話絕非陳腔濫調。縱使我離完美仍然遙遠，我相信不單僅是程式，人生中的每個方面皆然，通往成功的唯一路徑只🈶️長期而且持續的練習。\n此外，程式競賽的旅程上從來不曾缺乏過挫折。我當然會感到沮喪、失望，甚至曾經想要就此放棄，但是種種的打擊從未澆熄我對程式的熱愛；相反地，恰似尼采所說：「凡殺不死我的，必使我更強大」，每一次挑戰的淬煉不僅使我成長，更堅定我對程式的信念。\n最後，一路走來我十分感激我的父母、老師、學長、朋友以及網路上的許多善人，沒🈶️他們我不🉑️能🈶️今日這麼微不足道的一點結果。我想，我真是極其幸運🉐以如宗愨乘長風破萬里浪。\n總結# 儘管或許周遭🈶️些同學誤以為我的程式能力🈶️一定水準，但我內心非常清楚地知道自己實力到底在何處。我從來不覺🉐自己🈶️多厲害，我相信我只是比常人更瘋狂、更執著地練習。我衷心認為能🈶️這些靚賽經驗十分幸運。\n","date":"Apr 5, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/contest/","series":["高中生活"],"smallImg":"","tags":["程式","能力競賽","APCS","NPSC"],"title":"幸運的競賽之旅"},{"categories":["札記"],"content":"從小，我就充滿著旺盛的好奇心，尤其對於電腦設備更是如此。由於熾烈的求知慾使然，每當遇到新鮮的事物，我總是迫不及待地想要摸索、窮盡其一切性質與功能。\n小學二年級註冊電子郵件信箱後，我仔細研究每項設定，在「簽名檔」的選項中認識了 HTML，更因而上網搜尋其語法，寫下我第一個陽春而簡單的網頁。\n小五時自學的朋友洪曄寄惹一封 email 分享他寫的 Python。我上網搜尋🉐知這是一個「高階語言」，心底不🈲一驚。\n升上六年級時，胡東寶老師開啟我程式設計的大門。在他引薦之下，我開始上網自學 C 語言，使用 Dev-C++ 從 hello, world 到🈯️標、陣列及字串。\n在國中階段，我進一步學習 C++ 的泛型模板與物件導向、基礎資料結構如 stack, queue, tree 等，以及 C#, Python, JavaScript 等語言。同時我也持續撰寫一些簡單的專案，並利用程式語言來探究、解決一些數學的問題。\n資訊活動們# 我到高二後才開始積極參與眾多資訊相關活動。不少朋友在賽後都會分享心🉐，我要趁我遺忘之前趕緊提筆記下。\nHP CodeWars# 我第一次參加的大型程式競賽是 HP 的 CodeWars，早在 ZeroJudge 上即看過其題目。HPC 的時間點在上學期初、能競複賽尚未展開之時，在南港世貿二館盛大舉行，我與社團的朋友亮軒、廷翰組隊報名，首次體驗典型程式競賽文化 \u0026mdash;\u0026mdash; T-shirt 與美食（我們不小心拿太多還🉐帶回家ＸＤ）。至於比賽結果，我們拿到 \\(180\\) 分並列第十名。\n今年 (2020) 游於武漢肺炎活動停辦，但官網被改🉐天翻地覆，歷年題目、官解、名次及作答狀況都消失惹，僅能在 Wayback Machine 上拾🉐蛛絲馬跡弔古興嘆，甚是🉑️惜。\nYTP 青少年圖靈計畫# 由精誠資訊所舉辦的 YTP 少年圖靈計畫程式挑戰營則是下學期的盛事。與 HPC 不同，必須通過線上初賽才能參加線下複賽。隨著高中程式選手越來越多，晉級複賽也越來越競爭。\n精誠資訊對於這個活動相當慷慨大方，不但提供台中及以南的參賽者全程來回高鐵票補助，在長榮基金會的會場也備🈶️大量美食，包括二十餘盒 pizza, 胖老爹炸機桶（沒搶到ＱＱ）、漢堡王堆起來的山與琳瑯滿目的飲料。\n其實 YTP 不只是程式競賽，複賽不小的前幾名還會獲🉐製作專題、接受教授🈯️導的資格，專題優異者更🉑️以赴美參訪。\nTOI 推廣計畫# 師大蔣宗哲教授（一中校友）領銜主導之 TOI 推廣計畫也很值🉐參加。\n線上練習賽# 分為新手組與潛力組，每年㋂、㋃、㋄及㋉、㋊、㋋舉行，採用主流比賽平台 CMS。新手組的題目真的都挺水的，但潛力組就沒那麼簡單惹。\n新手同好會# 而這個線下的活動似乎是在每年㋇跟㋋在師大汀州路校區。吃的就跟全國賽一樣比較普通一點，抽獎獎品還不少就是惹。比賽環境是 Windows, g++ 編譯超慢。\n我在畢旅隔一天北上，還睡過頭錯過高鐵搭下一班自由座，早餐都沒吃就攔車直奔師大。不🉐不說，去新手同好會虐菜真的還不錯呢。\nIOICamp# IOICamp 是由一群臺大資工的國手們發起的營隊，以紮實的課程、堅強的師資與美味的食物著稱。早在十二🈷️即完成報名，學測過後三日我也只能收拾心情、重作馮婦。\n五天的營隊真是非常充實與疲倦，我終於正式地學會 segment tree 的 lazy propagation、merges-split treap 的奧妙、字串的配對，見識網路流的精巧與其他技巧等等。除此之外，我也認識一些熱愛程式的新朋友，包括我的兩位好隊友及室友。\n","date":"Apr 4, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/programming/","series":["高中生活"],"smallImg":"","tags":["程式","HP CodeWars","YTP","IOICamp"],"title":"程式與我的邂逅"},{"categories":["札記"],"content":"架設惹 Blog 就是要寫作啊！！學測後耍廢那麼久總該振作惹。\n過往曾在 Medium 寫過一些文章，現在傾向於在那抒發心🉐感悟與時事觀點，而這裡則是記錄生活札記與甄試經驗，日後或許還會🈶️一些程式教學。\n之前一直想把高中生活回憶保存起來，只是我不斷拖延 QQ. 接下來我會先把備審自傳中沒說🉐過癮的部分補起來，還🈶️大學個人🈸請入學多個 APCS 組的經驗相信很值🉐分享。\n關於 hello, world 牧犬羊⁈⁉ 近期寫作展望 程式與我的邂逅 幸運的競賽之旅 難忘的社團之緣 淺談 APCS 與升學 審查資料準備方向 個人🈸請甄試心🉐 成大面試心🉐 中大筆試心🉐 清大面試心🉐 交大面試心🉐 ","date":"Apr 3, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/recent-plan/","series":[],"smallImg":"","tags":["展望"],"title":"近期寫作展望"},{"categories":["札記"],"content":" 溫柔之必要\n肯定之必要\n一點點酒和木樨花之必要\n正正經經看一名女子走過之必要\n君非海明威此一起碼認識之必要\n歐戰，雨，加農砲，天氣與紅十字會之必要\n散步之必要\n溜狗之必要\n薄荷茶之必要\n每晚七點鍾自證券交易所彼端\n草一般飄起來的謠言之必要。旋轉玻璃門\n之必要。盤尼西林之必要。暗殺之必要。晚報之必要\n穿法蘭絨長褲之必要。馬票之必要\n姑母遺產繼承之必要\n陽臺、海、微笑之必要\n懶洋洋之必要\n而既被目為一條河總🉐繼續流下去的\n世界老這樣總這樣：——\n觀音在遠遠的山上\n罌粟在罌粟的田裡\n這首詩是瘂弦的〈如歌的行板〉。\n我對藝文涉獵不多，卻很喜歡超現實主義。比如家喻戶曉的達利，其奔放熾熱的狂想及異常柔軟的筆觸實在引人入勝。\n現代詩的方面，自然最欣賞創世紀詩社的洛夫與瘂弦。其中，〈因為風的緣故〉、〈愛的辯證〉、〈上校〉等皆是我喜愛的篇章。\n雖然我的文筆拙劣又文采不彰，但我仍想臨摹試擬一首仿作〈如詩的韻律〉，聊表致敬之意，還請見笑。\n資訊之必要 程式之必要 一點點Ｃ和Ｃ＋＋之必要 序列動態修改區間第ｋ小之必要 君非高德納此一起碼認識之必要 矩陣，群，快速冪，數論與歐拉函數之必要 堆疊之必要 佇列之必要 線段樹之必要 BIT 套持久化動態開點線段樹 光一般灑下來的毒瘤之必要。費馬小定理 之必要。動態規劃之必要。ＡＣ之必要。分治之必要。 最低共同祖先之必要。遞迴之必要 最大流最小🈹之必要 樹堆、橋、🈹點之必要 並查集之必要 而既被目為一條河總🉐繼續流下去 世界老這樣總這樣：—— 電神在高高的天上 燒雞在燒雞的地裡 後記# 顯然，我始終沒🈶️抓到〈如歌的行板〉該詩真正精華之所在，只不過是像個冰冷的工匠般🈚️意義而機械式地填詞而已。我🈚️法達到瘂弦那種信手摘取隨機的詞彙卻又從容、巧妙地構築為詩的境界。\n不過，至少我對最後一節尚稱滿意。「觀音在遠遠的山上／罌粟在罌粟的田裡」對上「電神在高高的天上／燒雞在燒雞的地裡」免免強強算是🈶️點意境吧。\n","date":"Apr 2, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/andante-cantabile/","series":[],"smallImg":"","tags":["如詩的韻律"],"title":"如歌的行板 🆚 如詩的韻律"},{"categories":["札記"],"content":" 這是一篇廢文。 嗯嗯，是的沒錯，這就是一篇貨真價實的廢文。\n擔任社團幹部後，陸陸續續參加一些活動。每次最困擾我的，就是關於自己的綽號。曾經🈶️段時間，我索性使用 ``nevikw39\u0026rsquo;\u0026rsquo;，令美宣也哭笑不🉐。\n🈶️天，我突然想到「牧犬羊」這個自己新鑄的詞彙。這個隨意顛倒固🈶️語序的倒裝，竟帶來意想不到的趣味。於是，我遂以此作為綽號。\n恰好我的頭貼自國中畢業後也許久未更新；因此，我特地拜託高一同學暨社團好友，隨手簡單地發（浪）揮（費）他國中美術班、僅差兩分考上一中美術班的超群藝術天份，以精湛的電繪能力完美地詮釋惹連我也不知道長什麼樣的「牧犬羊」。\n如你所見，成品著實令人折服、驚嘆不已。我想在此再次感謝他幫我畫惹一個如此🉑️愛的頭貼，澆灌我悲劇的美感。\n至於 nevikw39 則是小學時亂打的 ID, 此後一直沿用迄今，想要改也沒辦法惹。\n附帶一提，我🈶️把頭貼稍作調整，剪裁為「超橢圓」(Superellipse)，其方程式為 $$ |x|^e + |y|^e = k $$。\n","date":"Apr 1, 2021","img":"https://nevikw39.cf/images/nevikw39.png","largeImg":"","permalink":"https://nevikw39.cf/posts/nevikw39/","series":[],"smallImg":"","tags":["nevikw39","牧犬羊"],"title":"牧犬羊⁈⁉"},{"categories":["札記"],"content":" hello, world\n撰寫 Blog 亦🈚️例外，仍以標準、傳統而熟悉的 hello, world 來開場吧。\nTL; DR# 我們這個世代，撰寫 Blog 似乎已經成為🈶️些過於老氣之舉，畢竟時下新興多媒體之發達🉑️謂雨後春筍。\n然而，我依舊深信文字的溫度與力量是🈚️🉑️抹滅的。\n同時，不少優秀的競賽選手皆保🈶️筆耕不輟的習慣。不曉🉐多少次打開 Google 尋求🈯️引總是導向一位位電神的 Blog. 雖然我是個孤陋寡聞的井底之蛙，但還是希望能盡我所能，在網路的汪洋中留下些許波痕。\n輕量級 Blog# 現在主流透過 Static Site Generator 便捷地產生靜態網頁並放上託管服務如 GitHub Pages 來作為輕量級的 Blog.\nStatic Site Generator# 常見的工具包括：Jekyll, Hexo 與 Hugo 等，分別是以 Ruby, Node.js 及 Go 撰寫。其中，Jekyll 獲🉐 GitHub 較原生的支援，不過我不甚熟悉；而臺灣🈶️許多人採用 Hexo，因為其存在豐富的中文資訊、多樣的主題及插件。\n然而，Hexo 的致命缺點在於 Node.js 作為動態語言其效能實在🈚️法恭維。在偵錯測試的過程當中，緩慢的編譯速度著實令人🈚️法忍受。\n🉐益於毫秒級的速度，Hugo 提供近乎 WYSIWYG（所見即所🉐）的體驗。\n因此，我們不難發現，網路上不少電神自 Hexo 搬遷或是直接選擇 Hugo，包括蛋餅、BB 等。\nHugo 主題# Hugo 的主題感覺更強大一點，還能提供許多額外的功能。🈶️點選擇障礙的我，起初看上 Iris 主題，不單由於簡潔的版面，也🈶️部分出自於對希臘神話中 Iris 諸神的信使之遐想（Iridescent \u0026mdash; 真是個美麗的詞彙）。而 GitHub 上獲🉐最多 Star 的 Coder 主題卻看似單調且🈚️法修改顏色，另個 m10c 又稍嫌簡陋。\n最終，我找到 Hugo Bootstrap Theme，不但提供完整的暗色主題、美觀的佈局、多樣的功能，還補足 Hugo 的弱項－搜尋。\nGitHub Pages \u0026 GitHub Actions# GitHub Pages 🉑️以讓 GitHub 上的 repo 某個 branch 的某個資料夾當作靜態網頁託管服務。\n而 GitHub Actions 的功能更為強大，比如🉑️以在 main branch 被 push 上後自動更新 submodule, 建置網站並發布。\n如此，我們🉑️以優雅地分離原始碼如 markdown, config 與結果的 HTML 至不同 branch。\n免費網域# GitHub Pages 預設🈶️提供 {{username}}.github.io 的網域，但這種 subdomain 並不方便進行 Google Analytics 與 SEO 等。\n查惹一下 *.ac, .code 等的價格實在太🉑️怕，窮學生還是乖乖用免費 domain QQ. 我之前是🈶️🈸請過 .tk 的網址，但我突然想起 念誠的 Blog，.cf 看起來也是很程式嘛 (CodeForces !?)\n但我用原本的 Freenom 帳號卻🈚️法註冊 nevikw39.cf，索性重辦一個把 nevikw39.cf, nevikw39.tk, nevikw39.ml (Machine Learning !?), nevikw39.gq （潮到出水欸💦）和 nevikw39.ga 都註冊走ＸＤ。\n那麼，我要開始寫 Blog 惹！！\n","date":"Mar 31, 2021","img":"","largeImg":"","permalink":"https://nevikw39.cf/posts/hello-world/","series":[],"smallImg":"","tags":["hugo","hugo theme","Static Site Generator","hello, world"],"title":"hello, world"},{"categories":["拉麵🍜"],"content":"🈶囍拉麵是 2020 年度台灣拉麵愛好會社團票選拉麵金賞的第九名，也是同樣高人氣的拉麵店山下公園、Men Monster 的姊妹店。\n在高二下一段考完英文的一個晚上，我已經忘記我那時為何請兩位高一社團朋友吃拉麵惹 XD\n遙想當時還是排隊十、二十分鐘就能品嘗拉麵的時候\u0026hellip;\n這碗是 2020 雞白湯拉麵，不只店面、餐具高雅舒適，香醇而濃厚的湯頭更是一絕。\n🏬店名 🈶囍 Yoshi Ramen よしラーメン 🏠地址 400 台中市中區中山路 82 號 🔗連結 Facebook ","date":"Apr 8, 2020","img":"https://nevikw39.cf/images/yoshi.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/yoshi/","series":[],"smallImg":"","tags":["有囍","金賞拉麵"],"title":"有囍拉麵"},{"categories":["拉麵🍜"],"content":"麵屋秋鳴是貍匠拉麵四家品牌之一，位於文心南路上，離我家約十分鐘步程。印象中去的時候雨勢不小，回程就漸歇惹。\n這碗是味玉清湯醬油拉麵，是我來台中後第一碗拉麵呢。過惹兩年記憶已經逐漸淡去喇。\n🏬店名 麵屋秋鳴 🏠地址 402 台中市南區文心南路 715 號 🔗連結 Facebook ","date":"Aug 26, 2019","img":"https://nevikw39.cf/images/chiumingramen.JPG","largeImg":"","permalink":"https://nevikw39.cf/ramen/chiuming/","series":[],"smallImg":"","tags":["貍匠","名店拉麵"],"title":"麵屋秋鳴"},{"categories":[],"content":" 初六 • 象曰：「謙謙君子，卑以自牧。」 \u0026mdash; 《易經 • 謙卦 ䷎》\n各位好，我是來自清大資工的 nevikw39 牜攵犬羊，歡迎來到 「如詩的韻律」！！平時的休閒活動當屬🏓打桌球，另外有一個待發掘的興趣是📷攝影，目前手上有台家裡的舊單眼 Nikon D7000📷. 以下是關於我的一點自我介紹：\n🖥 資訊# 高中時期我即是名熱愛程式的學生 o\u0026rsquo;_\u0026lsquo;o。\n🏁 競賽# 2021 ICPC Asia Taipei Regional Contest, Team Dkjistra, Silver Award 2021 ICPC Asia Taiwan Online Programming Contest (TOPC), Team Dkjistra, 29th 110 學年度全國大專院校軟體設計競賽 (NCPC, National Collegiate Programming Contest) 隊伍 Dkjistra, 決賽第 28 名 2020 網際網路程式設計大賽 (NPSC, National Problem Solving Contest on Internet) 隊伍 CRICT, 優勝，決賽第 16 名 109 學年度學科能力競賽中投區複賽資訊科 第九名 佳作 108 學年度學科能力競賽中投區複賽資訊科 第四名 108 學年度學科能力競賽全國決賽資訊科 (NHSPC, National High School Programming Contest) 第 29 名 潛力 Star 獎 大學程式先修檢測 (APCS, Advanced Placement Computer Science) Ⅴ(92) / Ⅳ(300) 🏫 社團# 108 學年度電腦資訊研習社 教學 2020 中北部電資聯🈴寒訓 教學長 🎯 活動# 2020 TOI 推廣計畫 新手同好會 第三名 109 YTP 程式挑戰營 第 46 名 2019 HP CodeWars 第十名 🍜 拉麵# 我很喜歡尋覓、品嚐各地、各式的拉麵 \u0026gt;///\u0026lt;。\n🈶些拉麵來不及捕捉他們的遺容就進肚子惹。\n豚骨拉麵 博多風龍 去日本吃的拉麵中🈶被 Google Maps Timeline 記起來的 麵屋武藏 北車本店吃過兩次 全國賽上台北時與國中同學吃的是味玉雞白湯 應該是 YTP 後與表哥約，這次換味玉武藏 荷麵亭 除夕與國中同學約，士林捷運站附近其他店如隱家、道樂都休息，幸好荷麵亭中午還🈶營業 山嵐拉麵 白湯、海湯跟赤湯都吃過，只是一張照片都沒留 臺中雖然稱一中店，但從學校要走十分鐘才會到 高二入營考的時候🈶跟兩位國中同學去古亭本店 麵屋秋鳴 🈶️囍拉麵 小川拉麵 比完 NPSC 之後和兩位國中同學去吃的，叉燒只🈶一塊比較🉑惜 豚箱拉麵 一中附近、中友對面巷子的小店 海拉麵 高三入營考跟兩位國中同學去吃的，叉燒🈶金屬光澤 大角拉麵 山下公園 七面鳥 牛庵 吞山郎 麵屋雞金 道樂商店 京都柚子豚骨拉麵 蘭丸 MEN Monster 麵屋吉光 芳賀 至於花🈷️嵐、一蘭等等就算惹ＸＤ。\n🏆 奇怪的 榮譽# 高中一年級下學期校本課程公民科專題發表會優異 高中一年級上學期公民科全年級第四名，高中必修公民全年級 \\(4%\\) 國中二、三年級國家地理知識大競賽（中國地理學會，非 NatGeo）初賽優勝 國小四、五、六年級多語文學藝競賽國語文字音字形組優等 國小二年級教師節藝文比賽優選（是畫畫喔） 🎵 樂團# 我都聽比較 old-school 的歌 QQ. 風格偏好 Soft Rock, Easy Listening. 以下列出部分我很常聽的樂團：\nAlphaville The Beatles Air Supply Queen Linkin Park And so forth\u0026hellip;\n🔗 連結# 以下是一些友站 （裝熟） 的連結，歡迎在底下的 Disqus 留言🍌流🍌流，我會在附上喔，也歡迎大家分享我的 Blog。\nBentley 念誠 櫛風 雞塊 Aann Lin 靚 CSC Howard（我是偷看惹原始碼才懂 \\( \\log 100 \\) 這個提示ＸＤ） et cetera\u0026hellip;\n","date":"Sep 5, 2002","img":"https://nevikw39.cf/images/nevikw39.jpg","largeImg":"","permalink":"https://nevikw39.cf/about/","series":[],"smallImg":"","tags":[],"title":"關於"}]