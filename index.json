[{"categories":["拉麵🍜"],"content":"千勝軒也是離家不遠的拉麵店，有空就趕緊去踩點一下。價格以拉麵而言算是平價，叉燒份量少惹點。豚骨湯頭夠濃郁，所以我後來又加點白飯配著吃。\n  🏬店名  千勝軒   🏠地址  40343 台中市西區三民路一段 29 號    🔗連結  Instagram        ","date":"Aug 11, 2021","permalink":"https://nevikw39.cf/ramen/chikatuken/","series":[],"tags":[],"title":"千勝軒"},{"categories":["拉麵🍜"],"content":"先前武漢肺炎疫情正盛之時，卻傳出惹貍匠拉麵品牌系列第五家分店吞山郎的展店消息。而在疫情疫情逐漸降溫後，貍匠拉麵旋即又決定在同一地址、吞山郎的隔壁開新店喇。\n從店名不難猜測，這家店的主打顯然是牛。我點的這碗是咖哩牛骨濃湯拉麵，雖然以往我一向認為咖哩就是只能配飯，對於咖哩炒麵之類的時常興致缺缺，但這碗拉麵實在讓我太過驚豔。首先湯頭並不是典型的日式咖哩，醇厚的牛骨味中富含各式香料，再加上蕨類的點綴及檸檬片進一步提升層次。特別的是不像常見的溏心蛋，我咬破半熟的溫泉蛋之後吸惹一下蛋汁，接著又將其打進湯頭。此外，由牛肉製成的叉燒也十分新奇。\n千萬別急著把湯喝盡，免費加點一碗白飯，倒進濃湯後就搖身一變，化成咖哩飯上菜喇。這種一湯兩吃的體驗真的好過癮！！旁邊還有附上吐司切丁，同樣是可以用以沾湯的。\n貍匠拉麵的兩家新店直接讓一中附近的美食相形見絀，唯一可惜的是在畢業之後才開始營業。我想牛庵未來無法避免成為排隊名店吧。\n  🏬店名  牛庵   🏠地址  404 台中市北區三民路三段 75 號    🔗連結  Instagram        ","date":"Aug 9, 2021","permalink":"https://nevikw39.cf/ramen/moann/","series":[],"tags":["貍匠"],"title":"牛庵"},{"categories":["程式💻"],"content":"字串是程式當中相當重要的議題，我們從 hello, world 就接觸到它，但我們始終用一種敷衍的態度點到為止。在變數型別中，提到字串其實就是字元陣列。如今我們學過陣列，終於可以好好的討論一下字串惹。\n與陣列相似，C++ 的字喘也有傳統 C 風格與現代 C++ STL 兩種。雖然競賽實務上往往用 C++ STL 方便許多，但傳統 C-style string 的設計有許多巧思，值得了解。\nC-style string 既然字串是字元陣列，那就直接宣告來用看看吧：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char str[] = \u0026#34;hello, world\u0026#34;; cout \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(str) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } \u0026#34;hello, world\u0026#34; 這段字串明明只有 12 個字元，為何長度卻是 13 呢？？  這是 C-style string 的一個特殊規則：每個字串的結尾都必須是 '\\0' 這個特殊字元。這樣有何好處？？我們在遍歷字串時就可以這麼寫：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char str[] = \u0026#34;hello, world\u0026#34;; for (int i = 0; str[i]; i++) cout \u0026lt;\u0026lt; str[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 這在字串長度為之時尤其方便，我們很快就會遇到惹。現在考慮我們接受字串的輸入，那麼問題就出現喇：字元陣列要宣告多長？？如果是在解題，題目通常會說明最大長度，我們就宣告這麼長再加一（想一想為什麼），如果是在實務場合，可能就需要一些動態配置記憶體的技巧。\nptt 的 ID 長度上限為 \\(12\\), 我們可以寫出以下程式接受輸入：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char id[12 + 1]; cin \u0026gt;\u0026gt; id; for (int i = 0; i \u0026lt; sizeof(id); i++) cout \u0026lt;\u0026lt; id[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 我們使用最常見的陣列遍歷方法遍歷字串。但這個程式有點問題，試著輸入 ID 越短越好，會發現輸出可能怪怪的，原因是 C/C++ 宣告基本型別變數及陣列時不會初始化，電腦給我們的記憶體可能還留有上個程式的資料。正確的寫法應該是這樣：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { char id[12 + 1]; cin \u0026gt;\u0026gt; id; for (int i = 0; i \u0026lt; sizeof(id) \u0026amp;\u0026amp; id[i]; i++) cout \u0026lt;\u0026lt; id[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 現在你知道為什麼字串的結尾必須是 '\\0' 惹。 由於程式執行過程中字串長度可能小於最大程度，因此我們用 \u0026#39;\\0\u0026#39; 表示字串的結束。  這個概念挺有意思的，對照先前所說陣列的左閉右開的特性，右端點就是 '\\0'. 往後我們遇到 STL 容器的迭代器， .end() 扮演的角色就有異曲同工之妙。\n字串的操作 由於字串就是字元陣列，而我們知道陣列不能直接複製、比較 \u0026hellip;, 因此有函式庫 \u0026lt;cstring\u0026gt; 幫我們寫好這些功能，比如 strcpy() 用以複製、strcmp() 用以比較、strcat() 用以串接等等，這些函式都離不開指標，有興趣請自行研究，這裡就姑且略過不提惹。\nstd::string 看完上面半篇暈惹嗎？？還好 C++ STL 有提供 string 這玩意兒。基本上你可以把 std::string 之於 C-style string 對應到 std::vector\u0026lt;\u0026gt; 之於 C-style array. 也許有人好奇 std::string 為何少惹 \u0026lt;\u0026gt;?? 原因是 std::string 其實是 std::basic_string\u0026lt;char\u0026gt;. 實際用起來就是這麼簡單：\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;string\u0026gt; using namespace std; int main() { string s; s = \u0026#34;QQ\u0026#34;; cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; cin \u0026gt;\u0026gt; s; cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 別管什麼最大長度或動態配置記憶體惹，C++ 幫我們處理得好好的。std::string 亦可使用 [] 取得某個字元，而我們可以用 .lrngth() 取得字串長度：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { string s; cin \u0026gt;\u0026gt; s; cout \u0026lt;\u0026lt; s.length() \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; for (int i = 0; i \u0026lt; s.length(); i++) cout \u0026lt;\u0026lt; s[i]; cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 字串的操作 與 vector\u0026lt;\u0026gt; 類似，我們可以直接用 = 來複製字串、用 == 來判斷兩字串是否相等，我們甚至可以用 + 來串接兩字串：\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;string\u0026gt; using namespace std; int main() { string a = \u0026#34;AAA\u0026#34;, b = \u0026#34;BBB\u0026#34;; char c = \u0026#39;c\u0026#39;; cout \u0026lt;\u0026lt; a + b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; a + b + c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; a + \u0026#34;XXX\u0026#34; \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#39;Y\u0026#39; + b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 注意在 C++ 中 \u0026quot;...\u0026quot; 仍是 C-style string, 因此 \u0026quot;AAA\u0026quot; + \u0026quot;BBB\u0026quot; 是錯誤的。\n注意到平常 cin 以空白分割輸入，如果輸入的字串可能包含空白，必須使用 getline(cin, s);. 呼叫前須留意如果先前有使用過 cin, 必須 cin.ignore();.\n類題演練  ZeroJudge a001  ZeroJudge b968  ZeroJudge c185  ZeroJudge c186  ZeroJudge c659  ZeroJudge c716  ZeroJudge c717  ZeroJudge c726  ZeroJudge e051  ZeroJudge e456  GreenJudge b006  GreenJudge b007  GreenJudge b008  GreenJudge b009  GreenJudge b010  GreenJudge b011  GreenJudge b012  GreenJudge b013  GreenJudge b014   ","date":"Aug 8, 2021","permalink":"https://nevikw39.cf/programming/string/","series":["C++ 入門"],"tags":["C++","C","string","array","pointer","IO"],"title":"[C++ 入門] 3.2 string"},{"categories":["拉麵🍜"],"content":"疫情警戒降回二級的第二天，我終於又再次於店內享用拉麵的美味。儘管政府已開放內用，但有不少店家還未準備好。隱身在熱鬧西區中的寧靜小路公正路上的渡山樓，符合實聯制、體溫量測、出入店消毒、梅花坐與隔板等等的防疫措施，因此是少數提供拉麵迷解饞的內用服務。\n我點的是雞豚濃厚雞白湯，一端上來真的是開心感動極惹。湯頭的部分就典型的雞白湯，中規中矩的。叉燒的部分有雞有豬，以 \\(\\$210\\) 的價格而言算是給得非常大方，留待免費加麵一次配著吃都還足夠。此外比較特別的是還有附檸檬片，我是等到替玉之後才加，檸檬汁的點綴下雞白湯的層次就更豐富惹。\n在此時此刻能有一碗內用拉麵，我覺得真的非常幸運。我們真的要好好感謝所有奮戰的醫護以及其他前線人員、中央與地方政府的共同努力，當然還有全民團結的合作。在解封放風的同時，絕對切莫忘記依然要繼續恪遵防疫規範。\n  🏬店名  渡山樓   🏠地址  40360 台灣台中市西區公正路 170 號    🔗連結  Facebook        ","date":"Jul 28, 2021","permalink":"https://nevikw39.cf/ramen/dushanlou/","series":[],"tags":[],"title":"渡山樓"},{"categories":["拉麵🍜"],"content":"狸匠拉麵的本店離我家也不遠，一直是我想嚐試的店家之一。本來想說畢業之後會有許多時間開發新店，無奈武漢肺炎爆發打亂一切。所幸台灣疫情逐漸降溫受控，在降回二級前夕我訂惹一碗深夜拉麵的外送以慶祝，只是送達時已經降級惹 XD\n這碗是激辛豚骨大盛，湯頭十分醇厚順口，最後我直接喝完；不愧是大盛，叉燒不僅大片亦很足夠。此外，溏心蛋的水準也是不錯。總結來說，真是完美的宵夜啊！！\n目前四家狸匠體系已經集滿三家，就剩下在太平的激勵軒。希望外來都能自由無慮地在店內享用拉麵。\n  🏬店名  狸匠拉麵 - 深夜拉麵   🏠地址  402 台灣台中市南區建成路 1053 號    🔗連結  Facebook        ","date":"Jul 27, 2021","permalink":"https://nevikw39.cf/ramen/zhongxiao/","series":[],"tags":["貍匠"],"title":"狸匠拉麵"},{"categories":["程式💻"],"content":"C-style array 有時我們會需要紀錄大量同樣型別的變數，比如 GreenJudge c041 , 題目輸入 \\(N\\) 及 \\(N\\) 個人的現金，那我們要怎麼儲存呢？？我們可以使用陣列 (array):\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; int arr[n]; // ...  return 0; } 第九行的 int arr[n]; 宣告整數型別的陣列，其長度為 n. 之後，我們就能以 arr[0], arr[1], \u0026hellip;, arr[n - 1] 陣列中的元素 (element) 來存取陣列中的元素。回頭看看 GreenJudge c041, 我們容易知道最小的現金流動會是 \\(\\frac{1}{2}\\sum{|a_i - \\bar{a}|}\\), 其中 \\(a_i\\) 是第 \\(i\\) 個人的現金：  現在讓我們稍微深入一點的討論。所謂的陣列，就是一塊連續的記憶體空間。那我們要怎麼存取一塊連續的記憶體呢？？\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int arr[5] = {4, 3, 2, 1, 0}; // int arr[] = {4, 3, 2, 1, 0};  cout \u0026lt;\u0026lt; arr \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 我們先宣告一個長度為 \\(5\\) 的 int 陣列，並用 {...} 初始化，然後直接輸出 arr, 有沒有發現結果跟輸出指標類似？？其實它根本就是指標啊！！ 本質上，C 風格的陣列就是指標。  前面我們介紹過指標可以用 * 運算子來解析，其實指標本身還可以做 +, - 運算，代表指向後一個或前一個單位的地址。指標也可用關係運算子來比較所指向記憶體位址的前後。  上面的程式碼中，我們先以典型的方式賦值予陣列，接著故意以指標的方式輸出其值。事實上，對於編譯器而言，arr[i] 會被視為 *(arr + i), 更進一步說，我們知道加法有交換律，也就是說，arr + i 等價於 i + arr, arr[i] 亦與 i[arr] 完全等價。\n遍歷陣列 陣列的用途為紀錄大量同樣型別的變數，我們自然往往會需要對他們進行類似的操作，這時迴圈就是絕佳的拍檔。以下我們用讀入十個數字在依序寫出這個例子來示範常見的遍歷方法。\nfor \u0026amp; array index  最典型的存取方式，就不多做說明。\nfor \u0026amp; pointer  稍微進階一點的方式，也是指標的應用。注意到我們在輸出時特別用的是 const 的指標，由於第二個 for 我們沒有修改值的必要，因此我們告訴編譯器，避免不小心修改。當然，不加 const 其實也無所謂，但第一個 for 輸入時加上 const 編譯就會報錯，可以自行試試。\n 以上兩者是 C 當中皆有的基本方法。\nC++11: range-based for  Range-based for loop 是 C++11 的新功能，很類似 Python 的那種 for. 其實作的方式相當於以 iterator（算是包裝過的 pointer）迭代遍歷過容器，在 C++ STL 中十分方便。注意到有 for (int i : arr), for (int \u0026amp;i : arr) 等形式，前者的 i 為 arr 當中元素的複製，即修改該 i 並不會修改到 arr 內的元素；後者之 i 則為 arr 當中元素的參考，即修改該 i 會修改到 arr 內的元素。此外，加上 const修飾的作用就如同以指標遍歷。\n同場加映：輸出入 stream iterator  這邊示範以 C++ \u0026lt;iterator\u0026gt;, \u0026lt;algorithm\u0026gt; 當中的函式優雅的寫法跟你分享供你欣賞，有興趣可以自行深入研究。\n可變長陣列 我們一開始舉的例子宣告長度為 n 此一變數的陣列，是所謂的可變長陣列 (variable length array), 我認為翻譯成變數長度陣列比較好，在早期的 C 當中是不支援的，必須以 malloc() 等動態配置記憶體的手段。在 C99 及大部分編譯器實作的 C++, 我們是可以把陣列長度宣告為變數，但這其實還不是動態長度的陣列，更多現代的功能，改用 vector\u0026lt;\u0026gt; 會比較理想。\n多維陣列 有時資料不只是一維的，會是二維會是更多維的，我們一樣可以宣告成陣列。比如說今天我們要處理 \\(2 \\times 3 \\) 的矩陣：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int matrix[2][3] = {{87, 69, 19}, {64, 89, 92}}; return 0; } 我們宣告惹 \\(2 \\times 3 \\) 的二維陣列，也可以說是一個長度為 \\(2\\) 的「長度 \\(3\\) 陣列」陣列 (2-legnth array of 3-length array). 多維陣列還是陣列，只是它每個元素都也是陣列。大部分程式的多維陣列是 row-major 的，也就是說與數學上類似，是先 row 再 column. 操作的方法同樣離不開迴圈，有幾維就幾層迴圈。\n類題演練  GreenJudge b001  GreenJudge b002  GreenJudge b003  GreenJudge b004  GreenJudge b005   vector\u0026lt;\u0026gt; C-style array 的本質是指標，相較於其他現代語言的陣列，許多方面麻煩不少，比如若要比較兩個陣列，arr0 == arr1 的意義是判斷兩者所指向的位址是否相等，而非元素是否一致；欲複製陣列中的元素，亦無法直接使用 =. 因此，在 C++ 我們有 STL 提供的容器 vector, 它的行為比較類似其他現代語言的陣列。STL 當中的容器都應用惹 C++ 物件導向及泛型這兩的特性，日後有機會再作說明。vector 的基本用法如下：  首先第二行我們 #include \u0026lt;vector\u0026gt; 才能使用 vector. 接著第九行我們先只介紹四種初始化的方式：\n vector\u0026lt;int\u0026gt; 的 \u0026lt;int\u0026gt; 代表我們這個 vector 是 int 的，此為泛型之語法\n  v0(5) 表示我們宣告的這個 vector 初始長度為 \\(5\\), 且值都為 \\(0\\). 有兩點值得注意：\n這裡要用 () 而非 [], 技術上來說我們是在呼叫 vector 的建構式，否則變成宣告 array of vector 其實 C-style array 不會初始化，也就是說 int arr[5]; 一開始 arr 的值可能會是別的程式殘留的值，但 vector 會初始化為 \\(0\\)    v1(5, 87) 跟 v0(5) 不同之處，在於初始化的值改成我們指定的 \\(87\\)\n  v2 = {4, 3, 2, 1, 0} 類似於 arr[] = {4, 3, 2, 1, 0}, 稱為以 initializer list 初始化，C++11 後才支援，編譯器會自己計算長度\n  v3 = v2 就是把 v2 的內容複製給 v3, 但注意 C-style array 是不能 arr1 = arr0 的，原因是 C-style array 並非可修改的 lvalue\n  然後，對應到先前介紹的四種遍歷方法，我們依序用 for 搭配 vector 的 index, for 搭配迭代器 (iterator, 可以視作 STL 容器的 pointer), range-based for loop, 以及 output stream iterator 來遍歷四個 vector. 礙於篇幅限制，本文目前只教到將 vector 代替 C-style array 使用，未來在以專文介紹。\n","date":"Jul 24, 2021","permalink":"https://nevikw39.cf/programming/array/","series":["C++ 入門"],"tags":["C++","C","array","pointer","for","vector"],"title":"[C++ 入門] 3.1 C-style array \u0026 vector"},{"categories":["程式💻"],"content":"在開始前先看一段程式碼：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a = 87, b; b = a; a = 69; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 猜猜看，以上程式碼的輸出為何？？  可能會有人以為是 69 69, 但實際上是 69 87, 原因是我們宣告 a, b 兩個整數變數，他們分別儲存在記憶體的不同位置，而我們強調過： 程式語言中 a = b; 的涵義為將 a 的值設定為 b.  第八行 b = a; 將 b 的值設為 a 當時的值也就是 \\(87\\), 之後第九行將 a 的值設為 \\(69\\), 此時對 b 的值毫無影響。那麼假如我們真的有綁定變數的需求，要如何實做呢？？\n指標 指標向來被視為 C/C++ 中令人聞風喪膽的魔王 (? 其實我覺得沒那麼恐怖。簡單而言，一個變數的指標，就是其在記憶體的地址。看看下面的例子：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n = 87, *ptr = \u0026amp;n; cout \u0026lt;\u0026lt; \u0026#34;n = \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34;, \u0026amp;n = \u0026#34; \u0026lt;\u0026lt; \u0026amp;n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;ptr = \u0026#34; \u0026lt;\u0026lt; ptr \u0026lt;\u0026lt; \u0026#34;, *ptr = \u0026#34; \u0026lt;\u0026lt; *ptr \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 注意到第七行 int *ptr = \u0026amp;n, 我們在變數名稱前加上 * 宣告一個整數的指標變數，透過在 n 前方加上 \u0026amp; 取得 n 的記憶體位置並使 ptr 指向 n. 接著第八行我們輸出 n 值與其記憶體位置，最後輸出 ptr 指向的位置及利用 * 取得其指向的內容。  這次我們修改 n 的值，會發現連帶地 ptr 所指向的值當然也隨之變化。所以指標第一個麻煩的地方，就是，* 既拿來做為宣告指標，又用作解析指標的內容。\nconst T*, T* const, const T* const 前面我們有介紹過常數變數，不知道還有迷有印象？？沒有也沒關係喇 這邊就隨便帶一下，const T\\* ptr0; 是常數變數的指標，它自身指向某個常數變數，但它不是常數，所以它可以被修改，指向別的常數變數；T\\* const ptr1; 是變數的常數指標，它自身是常數，因此它初始化指向一個變數後，就不能再指向其他變數，但那個變數當然還是可以被修改；const T\\* const ptr2; 是常數變數的常數指標，它自身是常數，因此它初始化指向一個常數後，就不能再指向其他常數，而且那個常數當然不能被修改。\n到這邊暈惹嗎？？舉個例子好惹：  這邊可能需要慢慢體會。\n指標的指標的… \u0026amp; MISC 指標除惹指向整數、浮點數、字元等等基本型別，當然還可以指向另一個指標，怎麼樣，好玩吧？？\n注意到各種整數、浮點數、字元、指標的指標等等其實殊途同歸，本質上是一樣的，都是關於記憶體位置的變數，你可以用介紹過的 sizeof() 確認看看。非常危險地，它們彼此之間是可以互相轉換的，更概括的說，所有指標都可以被視為 void *, 需要強調型別的原因是因為不同型別記憶體儲存的內容當然不一樣，錯誤的解析會引發 Undefined Behaviors.\n另外，當我們宣告一個指標，在確定它指向誰之前，不應該去嘗試存取它的值，這同樣是非常危險的。C 傳統上以 NULL 這個巨集表示空指標，通常會被展開為 0, 但還是需要小心使用；C++11 新推出的 nullptr 是個好東西，請多愛用它。\n最後，指標還有許多妙用，是陣列、字串及動態配置記憶體的基礎，也是 C++ STL iterator 的精神，等到我們遇見函式在來介紹函式指標吧。\n成大教授好文 推介。\n參照 指標這種直接碰觸到記憶體的操作，是比較底層、低階的，雖然非常方便同時也十分不安全，因此現代高階語言多半使用參照這個技巧，或譯為參考。\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a = 87, \u0026amp;b = a; a = 69; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; b = 426; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 在 int \u0026amp;b = a; 這行，我們用 \u0026amp;b 表示 b 是個參照，參考到 a 的值，因此當 a 修改時，b 也會隨之更動；同樣地，當 b 修改時，a 也會隨之更動。\n實務上，參照的實作通常就是指標，雖然比較安全，但也少惹許多彈性，包括一定要立即初始化且無法改參考其他的變數。\n另外 C++11 新增惹 r-value reference, 不過我們應該很久以後才會討論它。\n","date":"Jul 24, 2021","permalink":"https://nevikw39.cf/programming/pointer/","series":["C++ 入門"],"tags":["C++","C","pointer","reference"],"title":"[C++ 入門] 3. 指標與參照"},{"categories":["程式💻"],"content":"學完 if-else, while, for 之後我們已經可以解決許多問題惹。作為程序流程的最後一篇，今天介紹一個幾乎很少使用的語法：goto.\n如果妳有寫過 batch 或 bash script 的經驗，應該不會對 goto 感到陌生。我們可以在程式碼當中的任意處加上 label:, 再用 goto label; 跳轉到該label:. 乍看之下很方便，但是在程式碼當中大量濫用 goto 將會肇致許多麻煩，因此被多數人視為洪水猛獸，包括 MISRA 等機構建議不要使用，有些人或許甚至沒學過。\n事實上，if-else, while, for 等程序流程在編譯後，於組合語言當中，也都是各式各樣的跳轉指令 (jxx), goto 就是太過於底層一些。然而，偶而使用 goto 還是可以帶來好處。比如先前我們介紹 break; 時舉的線性搜尋數列的例子，如果今天變成二為版本呢？？break; 一次只能跳離一個迴圈，因此我們需要多用一個變數：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n, m, k; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; k; for (int i = 0; i \u0026lt; n; i++) { bool found = false; for (int j = 0; j \u0026lt; m; j++) { int a; cin \u0026gt;\u0026gt; a; if (a == k) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#39; \u0026#39; \u0026lt;\u0026lt; j \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; found = true; break; } } if (found) break; } return 0; } 如果我們善用 goto:  可以看到我們省掉一個變數 found 與 \\(O(n)\\) 次 if. 當然這兩個例子因為很單純，其實能直接 return 0;, 以後遇到更複雜的狀況，也可以另外寫個函式 return, 只是另外寫函式還要考慮傳值的問題。俗話說水能載舟亦能覆舟，goto 提供的方便與帶來的隱憂，這就是自己要取捨的部分惹。\n成大教授好文 推介。\n變數作用域 在程序流程這章中，我們介紹許多用大括弧包起來的區塊陳述。我們看過在 for 中宣告變數：for (int i = 0; i \u0026lt; n; i++), 那麼我們可以在迴圈外使用 i 這個變數嗎？？ 動手手試看看，在迴圈外使用迴圈內宣告的變數。  很遺憾的是，答案顯然為否。閱讀一下編譯器的錯誤訊息，看起來式編譯器並不認得它。原來，我們宣告的變數都有其作用域，簡單來說一個變數被宣告後原則上只活在它所在的大括弧中，離開後編譯器就不認得惹，我們也不該使用奇怪的方式嘗試去存取它。\n那如果我們把變數宣告在大括弧之外呢？？沒錯，我們可以把變數宣告為與 main() 同一階層，是為全域變數。全域變數很方便沒錯，許多競賽選手都喜歡大量使用，但這在業界也是同樣不被歡迎的。當然有時我們非得用全域變數不可，比如宣告很大的陣列或是遞迴很深時，因為全域變數儲存在 heap 而非 stack.\n最後注意 C/C++ 可以在不同的區塊宣告同名的變數，這可能會導致麻煩，比如在 main() 宣告 int x; 再 while 中又宣告 int x;, 這時在 while 中的 x 都跟外面的 x 毫無關係，不可不慎。\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int x = 87; do { int x; x = 69; } while (false); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 動手手試看看，以上程式碼的輸出為何？？  ","date":"Jul 20, 2021","permalink":"https://nevikw39.cf/programming/goto/","series":["C++ 入門"],"tags":["C++","control flow"],"title":"[C++ 入門] 2.2 程序流程：goto 跳轉與其他"},{"categories":["程式💻"],"content":"我們現在會輸出一行字串，對吧？？如果要輸出兩行呢？？複製貼上，搞定。可是要是是 \\(100, 1000\\), 甚至是 \\(n\\) 次呢？？電腦的專長除惹計算，還有做重複的事，這時我們可以運用迴圈。\nwhile while 的語法有點像 if:\nwhile (condition) { // ... } 與 if 的不同在於 while 會重複執行大括弧內的陳述，直到 condition 為零。來看個範例吧  這個程式首先模擬丟擲一顆骰子，產生閉區間 \\([1, 6]\\) 內的偽隨機數為 val, 之後讓使用者輸入 n, 當 n != val 就讓使用者繼續猜。第二、八、九及十行前半是產生亂數的方法，可以先不理它。而第十行後半的 n = 0 很重要，它是一個變數初始化的作用，當我們宣告一個變數卻未賦予它值，存在一個極低的機率它的值剛好會是 val. 動手手試看看，我們同樣在第十一行前方點一下設置中斷點，偷偷觀察我們骰子擲到的 val, 按 F10 Step Over 逐步執行，看看下一行會跳至何處。  回到本文開頭的引子，如何寫出輸出 n 次字串的程式？？  還記得遞減運算子嗎？？這裡我們應用一個小小技巧，對於一個正整數 n, 經過 n 次 --, 其值會變為 \\(0\\). 但注意 n 最終的值會是 -1 原因是當 n 為零時還會進入 while(), 判斷的時候又會 --. 如果你現在一頭霧水，顯然還沒是沒有學好遞減運算子，不過也沒關係，等下用 for 迴圈改寫比較直觀易懂。\ndo-while do-while 的語法如下：\ndo { // ... } while (condition); 與 while 的不同在於 do-while 會至少執行一次大括弧的內容。我們的擲骰子程式可以這樣改寫：  注意到因為我們在取 n 的值判斷 n != val 前必定執行過 cin \u0026gt;\u0026gt; n 賦值，因此第十行不予初始化也是安全的。\n例題解析  GreenJudge c046  這題要求小數點後前 n 位，就用迴圈模擬我們的長除法        GreenJudge c040  一樣是模擬題，即使沒聽過輾轉相除法也沒關係，照題目說的就對惹         類題演練  GreenJudge a021  GreenJudge a022  GreenJudge a023  GreenJudge a024  GreenJudge a025  GreenJudge a041  GreenJudge a043   for for 也是迴圈流程，它做得到的事其實 while 也都做得到，某方面而言算是一種語法糖。\nfor (initial; condition; afterthought) { // ... } 其中，initial 是初始化的陳述，C++ 跟現代的 C 允許在此宣告變數；condition 跟 while 一樣，變成 \\(0\\) 就會離開迴圈；而 afterthought 是每次執行完大括弧內陳述之後會做的運算。我們的輸出 n 次字串的程式 for ver.:  我們外加一個小功能，就是輸出這是第幾遍，順帶一提， for 中的 i 是 index 編號的意思。 動手手試看看，你能不能寫出 while 版本而且帶有編號的程式？？  動手手試看看，我們於第九行前方點一下設置中斷點，按 F10 Step Over 逐步執行，看看下一行會跳至何處。  0-indexed numbering 到這裡裡可能很納悶，我們的 for 怎麼不寫成 for (int i = 1; i \u0026lt;= n; i++)?? 其實這樣當然也對，但在程式設計中我們傾向使用 0-indexed numbering, 包括先前我們看過 int, long long 的值域的表達，往往都是用一個左閉右開的區間 \\([a, b)\\)，是因為有這些好處：\n 區間長度即為 \\(b - a\\), 沒有討人厭的國小植樹問題 將區間一分為二時可以輕易地得到 \\([a, \\frac{a+b}{2})\\), \\([\\frac{a+b}{2}, b)\\), 不用再 \\(+1\\) 還記得國二數學等差數列與級數嗎？？ \\(a_n = a_1 + (n - 1)d,\\ S_n = \\frac{n}{2}(2a_1 + (n - 1)d)\\), 如果我們改用 0-indexed numbering, 公式變成 \\(a_n = a_0 + nd,\\ S_n = \\frac{n+1}{2}(2a_0 + nd)\\), 是不是漂亮許多？？  歷史上 \\(0\\) 這個概念於人類文明中算是比較晚的突破性創新，至今我們甚至都還不是很習慣它。等到後面進入陣列與指標之後，相信會對 0-indexed numbering 更有感覺。發明最短路徑演算法的 Dijkstra 寫過一篇短文 可以看看。\n例題解析  GreenJudge c004  因為這題我們需要知道是迴圈第幾次，所以用 for 而非 while. 注意到這題的數字都擠在一起沒有空白，因此我們用讀入字元的方式，再減去 0 的字元值就可以轉回整數。         類題演練  ZeroJudge a005  ZeroJudge b791  ZeroJudge c184  ZeroJudge d010  ZeroJudge d498  GreenJudge a026  GreenJudge a027  GreenJudge a028  GreenJudge a029  GreenJudge a030  TCIRC Judge c003   break \u0026amp; continue 考慮下面的問題：\n 給定一數列 \\(A\\) 及一整數 \\(K\\), 求 \\(K\\) 最早出現的下標，保證 \\(K \\in A\\), 注意 \\(K\\) 可能重複出現多次。\n輸入的第一行有兩個整數 \\(N, K\\), 其中 \\(N\\) 為 \\(A\\) 的長度，接著一行有 \\(N\\) 個數字，分別是 \\(A_0, A_1, \u0026hellip;, A_{N-1}\\). 試輸出一整數，為 \\(K\\) 最早出現的下標。\n 寫個迴圈讀 \\(N\\) 個數進來判斷是否等於 \\(K\\) 對我們而言不難，關鍵在於需要避免重複。我們可以使用 break; 語句跳離當前的迴圈：  我們在 switch-case 就遇過 break; 惹，而它也可以用在 while, for.\n接著考慮另一個問題。小時候大家都會數數，不過在某些地方某些數字很敏感，需要被屏蔽。示範一下從 \\(0\\) 數到 \\(99\\), 並用 continue; 跳過敏感數字：  巢狀迴圈 與 if-else 相同，我們當然可以結合多個迴圈。注意巢狀迴圈執行順序，是由外而內，再由內而外。底下示範印出九九乘法表：  由於乘積有一位數也有兩位數，因此我們使用 \u0026lt;iomanip\u0026gt; 中的 setw() 來做排版。\n類題演練  ZeroJudge c418  ZeroJudge c419  ZeroJudge c420  ZeroJudge d649  GreemJudge a046  GreemJudge a047  GreemJudge a048  GreemJudge a049  GreemJudge a050   Online Judge 的輸入 在此之前我們做 Online Judge 的題目大多是只有一筆測資，但有些題目可能有一次多筆測資，我們就需要應用迴圈。底下列出兩個系列題讓大家感受一下，之後做題都要看清楚題目敘述。\n 格瑞哥里的煩惱  ZeroJudge d067  ZeroJudge d069  ZeroJudge d070  ZeroJudge d071  ZeroJudge d072    公平的戰役  GreemJudge a036  GreemJudge a037  GreemJudge a038  GreemJudge a039  GreemJudge a040     ","date":"Jul 19, 2021","permalink":"https://nevikw39.cf/programming/loop/","series":["C++ 入門"],"tags":["C++","control flow","while","for","debugger"],"title":"[C++ 入門] 2.1 程序流程：while \u0026 for 迴圈控制"},{"categories":["程式💻"],"content":"先前我們的程式很單純，就是順順得執行下去。再來的幾篇文章要介紹的陳述能讓我們的程式多些變化，並解決更多問題。\nif-else 條件判斷 還記得1.1 的範例 嗎？？我們寫惹個程式，允許使用者輸入兩個整數，而我們輸出兩者相除之商與餘數。然而，如果今天有人很 87 輸入87 0, 那麼會發生什麼事？？ 動手手試看看，讓電腦除以 0 會怎樣？？  電腦會爆炸嗎？？顯然不會。如果你在 VS Code 按下 F5 偵錯，這時程式回停下來告訴你 Exception has occurred. Arithmetic exception. 如果直接在終端機執行，會輸出 floating point exception 之類的。總之，程式不正常得提前結束惹。\n這邊我們稍微補充一下，平常我們 main() 函式都 return 0; 代表正常結束，但這次會回傳 136, 確認的方法是在終端機輸入 echo $?. 原因是當我們的程式發生例外而不處理時，會觸發若干 Signal, 像是執行到一半按下 ⌃Ctrl + C 會觸發 SIGINT (2) 使程式中斷、程式被 abort （比如 assert 沒過）會觸發 SIGABRT (6), 錯誤地存取記憶體會觸發 SIGSEGV (11), 而本例致命的算術運算錯誤觸發 SIGFPE (8). 這些都是日後我們常遇到的錯誤。發生例外回傳值就不為 0, 而會是 128 + (n). 其它的 exit code 包括 126 權限不足、127 command not found, \u0026hellip;\n回過頭來我們的問題。在設計程式時，必須盡可能考慮一切狀況，畢竟使用者是沒有下限地 (? 因此，我們需要檢查除數不可為零。if statement 派上用場惹。首先看看它的語法：\nif (condition) { // ... } 其中 condition 是個表達式，如果表達式非零，就會執行大括弧的內容，否則直接跳過。因此我們可以改進我們的除法計算器：  如果大括弧內只有一個 statement (1 semicolon) 可以偷懶省略。其實在 C/C++ 中，非零就是 true, 因此也能寫成 if (b) cout \u0026lt;\u0026lt; ..., 就是省略 != 0 的部分。現在再執行一次，故意輸入 87 0, 程式不再發生錯誤，但直接結束好像有點怪怪的怪怪的欸？？所以我們可以應用 else:\nif (condition) { // ... } else { // ... } 如果 condition 非零，就會執行 if 大括弧的內容，否則執行 else 大括弧的內容，最後繼續執行下去。我們再次改進我們的除法計算器：  這次再有 87 輸入 87 0, 就會告訴他除數不可為零惹。當然我們的 condition 不見得只是一個關係運算式，還可以結合前一篇介紹的邏輯運算子等等。我們可以一樣在第十行前方點一下設置中斷點，這次不要急著按 F5 繼續執行，改按 F10 Step Over 逐步執行，看看下一行會跳至何處。\n類題演練  ZeroJudge d064  GreenJudge a011  GreenJudge a012  GreenJudge a013   多重與巢狀 if-else 你以為 if-else 就這樣？？不不不。我們的 if-else 還可以跟 if-else 自己結合，當然也可以跟下篇介紹的迴圈結合。自己結合的方式有並排的也有巢狀的：\nif (condition_0) { // ... } else if (condition_1) { // ... } else { // .. } if (condition_0) { if (condition_1) { // ...  } else { // ...  } } else { if (condition_2) { // ...  } else { // ...  } } 這邊應該都還很好理解，就給各位自行體驗惹。做些例題可以確認自己是否真的了解惹。\n範例解析  GreenJudge c032  大家應該多少有聽過學年學分制，本題輸入兩學期成績，要求計算所得學分數。簡單的想法是先計算兩學期平均是否大於六十，再判斷各自是否大於六十，但注意的整數的除法，所以我們可以移項。      另解甚至根本不用 if-else, 歡迎細細品味        GreenJudge c014  這題最單純的想法就是乖乖照題目的條件列式，注意 b 有可能小於 a      這邊同樣提供不用 if-else 的另解         類題演練  GreenJudge a014  GreenJudge a015  GreenJudge a016  GreenJudge a017  GreenJudge a018  GreenJudge a019  GreenJudge a020  TCIRC Judge c002   switch-case 分支結構 switch-case 感覺比較少用，但還是介紹一下。舉例來說高三上開始一週補習四天，每次想晚餐吃什麼這個大哉問實在太痛苦惹，於是我們決定週二吃 SUKIYA、週三吃那個那個飯、週四吃癡麵、週日吃 Burger King. 現在寫個程式，輸入一個整數代表是週幾，其中 0, 7 皆表示週日，輸出晚餐要吃什麼。\n我們現在會 if-else, 當然可以寫出以下程式：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int day; cin \u0026gt;\u0026gt; day; if (day == 2) cout \u0026lt;\u0026lt; \u0026#34;SUKIYA\\n\u0026#34;; else if (day == 3) cout \u0026lt;\u0026lt; \u0026#34;那個那個飯\\n\u0026#34;; else if (day == 4) cout \u0026lt;\u0026lt; \u0026#34;癡麵\\n\u0026#34;; else if (day == 0 || day == 7) cout \u0026lt;\u0026lt; \u0026#34;Burger King\\n\u0026#34;; else cout \u0026lt;\u0026lt; \u0026#34;No cram school today.\\n\u0026#34;; return 0; } 但這樣有點囉嗦，是吧。所以我們可以用 switch-case 改寫之：  程式碼的可讀性好惹一些，只是注意每個 case 結束後如果沒有 break; 預設會進入下個 case. 另外，C/C++ 的 switch-case 僅支援整數包含字元。乍看之下用 switch-case 程式碼似乎比較冗長，但理論上執行時，if-else 在最糟情況下會遍歷 \\(n\\) 個判斷，時間複雜度是 \\(O(n)\\) 線性的，但 switch-case 編譯時可能使用 jump table, lookup table; 達到 \\(O(\\log n)\\) 對數的甚至 \\(O(1)\\) 常數的時間複雜度。當然大部分情況下差異微乎其微，只是 switch-case 還有許多妙用。\n類題演練  TCIRC Judge c005   另外 gcc 有提供 case range 可以這樣用：\nswitch (n) { // ... case 69 ... 87: cout \u0026lt;\u0026lt; \u0026#34;skr skr\\n\u0026#34;; break; // ... } 跟 __int128_t 一樣，macOS 如果用蘋果的 clang 應該無法使用。\n","date":"Jul 18, 2021","permalink":"https://nevikw39.cf/programming/branch/","series":["C++ 入門"],"tags":["C++","control flow","if-else","switch-case","debugger"],"title":"[C++ 入門] 2. 程序流程：if-else 條件判斷 \u0026 switch-case 分支結構"},{"categories":["程式💻"],"content":"其實在正式介紹之前，其實前面我們就有偷偷用過運算子惹，沒錯就是熟悉的 +, -, *, / 喇。接下來趕快來看看還有哪些運算子！！\n算術運算子 +, -, *, /, % 屬之，就不多說惹。\n指派運算子 這對新手是比較需要注意部分。在多數程式語言中，= 的意義與數學中的等號不同，一個表達式 a = b; 的涵義為將 a 的值設定為 b. 請在心中默念十六遍，開始！！ 程式語言中 a = b; 的涵義為將 a 的值設定為 b.  簡單舉個例子：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a = 87, b = 69; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; a = b; cout \u0026lt;\u0026lt; \u0026#34;a = \u0026#34; \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34;, b = \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 執行後的輸出應該是這樣：\n a = 87, b = 69\na = 69, b = 69\n 複合指派運算子 既然 a = b; 的涵義為將 a 的值設定為 b, 那麼看看下面這個式子：\n\\[n = n + 92;\\]\n你可以接受嗎？？數學家馬上暴跳如雷，將 \\(n\\) 移項消去得到 \\(0 = 92\\), \\(n\\) 根本不存在！！如果這麼想，那麼你應該在唸十六次： 程式語言中 a = b; 的涵義為將 a 的值設定為 b.  事實上，n = n + 92; 在程式語言當中的涵義，就把 n 的值設為 n 原先的值再加 \\(92\\). 實際執行一次吧！！\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n = 0; cout \u0026lt;\u0026lt; \u0026#34;n = \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; n = n + 92; cout \u0026lt;\u0026lt; \u0026#34;n = \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 希望你搞懂惹。而由於這樣寫有點麻煩，所以我們有這些複合的指派運算子：\n += -= *= /= %= \u0026amp;= |= ^= \u0026lt;\u0026lt;= \u0026gt;\u0026gt;=  簡單來說 a _= b 相當於 a = a _ b, 其中 _ 是某種二元運算子。\n遞增、遞減運算子 複合的指派運算子是拿來偷懶的，可是這樣還不夠。程式執行的過程中變數往往需要 +1, -1; 一堆 c += 1, c -= 1 還是好煩喔，所以我們有遞增、遞減運算子分別是 ++, --; 特別的是 ++, -- 可以放在變數前也可以在後，但作用會有些許不同：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int c = 0; cout \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;c++ = \u0026#34; \u0026lt;\u0026lt; c++ \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; c = 0; cout \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;++c = \u0026#34; \u0026lt;\u0026lt; ++c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;c = \u0026#34; \u0026lt;\u0026lt; c \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 注意到第九、十四行我們將運算式輸出，這是合乎語法的，你也可以試試 cout \u0026lt;\u0026lt; c += 92;. 觀察上下兩者有何不同，細細品味一下。++ 後置時，先回傳原本的值才將變數遞增；前置時則先遞增再回傳遞增後的值。-- 同理，不多做說明，可以自己動手試試。\n如果這樣你就很頭痛的話真是抱歉，但以後我們可是要寫出 if (!--ht[*itr]) --k; 之類的程式碼喔 o'_\u0026lsquo;o\n關係運算子 介紹關係運算子與邏輯運算子是在為下一篇 if-else 條件判斷 鋪路。數學上我們有 \\(\u0026gt;, \\geq , =, \\leq , \u0026lt;, \\neq\\) 等關係運算子，對於 \\(87 \u0026gt; 69\\) 這個式子我們會說它是真的，而 \\(92 \\leq 64\\) 顯然是錯的。在程式語言中，我們也能寫出各式各樣的表達式，它們或真或假。C++ 關係運算子的結果是布林型別，即 true or false, 只是 cout 預設只會輸出 1 or 0, 所以我們可以丟給 cout boolalpha 這個 manipulator.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; boolalpha; cout \u0026lt;\u0026lt; \u0026#34;87 \u0026gt; 69 is \u0026#34; \u0026lt;\u0026lt; (87 \u0026gt; 69) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;92 \u0026lt;= 64 is \u0026#34; \u0026lt;\u0026lt; (92 \u0026lt;= 64) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 要特別注意的是，上面說過 = 是拿來賦值的，判斷 a 是否等於 b 要用 a == b，而不等於則是 a != b. 程式語言中 a = b; 的涵義為將 a 的值設定為 b.  程式語言中判斷兩數是否相等要用 a == b  如果你怕會忘記，趕緊多唸幾遍。\n類題演練  ZeroJudge d058  ZeroJudge d063  ZeroJudge d064  ZeroJudge d068   邏輯運算子 程式語言中，我們也有數學上的邏輯運算，像是一元的 \\(\\neg\\) (not) 為 !, 二元的 \\(\\land\\) (and), \\(\\lor\\) (or) 分別是 \u0026amp;\u0026amp;, ||.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; boolalpha; cout \u0026lt;\u0026lt; \u0026#34;!true is \u0026#34; \u0026lt;\u0026lt; !true \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;!false is \u0026#34; \u0026lt;\u0026lt; !false \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true \u0026amp;\u0026amp; true is \u0026#34; \u0026lt;\u0026lt; (true \u0026amp;\u0026amp; true) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true \u0026amp;\u0026amp; false is \u0026#34; \u0026lt;\u0026lt; (true \u0026amp;\u0026amp; false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;false \u0026amp;\u0026amp; false is \u0026#34; \u0026lt;\u0026lt; (false \u0026amp;\u0026amp; false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true || true is \u0026#34; \u0026lt;\u0026lt; (true || true) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;true || false is \u0026#34; \u0026lt;\u0026lt; (true || false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; \u0026#34;false || false is \u0026#34; \u0026lt;\u0026lt; (false || false) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 出於 encoding 相容的緣故，C++ 也支援以 not, and, or 替代關鍵字，意外的好處是比較好閱讀。值得留意的是多數程式語言存在短路運算的功能，即對於 a \u0026amp;\u0026amp; b 如果 a 已經是 false 則 b 的值完全不予計算，同理 a || b 如果如果 a 已經是 true 則 b 的值亦完全不予計算。\n類題演練  ZeroJudge d460   位元運算子 位元運算與條件運算可能算是最鮮為人知的基本運算子。位元運算子與二進位制息息相關，共有六種：~ (bitwise not, 1\u0026rsquo;s complement), \u0026amp; (bitwise and), | (bitwise or), ^ (exclusive-or, xor), \u0026lt;\u0026lt;, \u0026gt;\u0026gt;. 其中前三種皆能與邏輯運算子對應，差別在於位元運算子的作用對象通常是兩個整數，而且是對於兩者的二進位制形式，逐位元去運算。\n比如說 \\(87 = 1010111_2\\), \\(92 = 1011100_2\\); 則 \\(87 \\\u0026amp; 92 = 84 = 1010100_2\\), \\(87 | 92 = 95 = 10111110_2\\); \\(69 = 0000000001000101_2 \\Rightarrow \\sim 69 = -70 = 1111111110111010_2\\). 至於 XOR 大家可能稍微比較陌生，其真值表如下：\n   a b a ^ b     0 0 1   0 1 0   1 0 1   1 1 0    因此，\\(87 \\verb|^| 92 = 11 = 0001011_2\\). 而 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 是左移與右移運算子，對於整數的二進位制形式往左或右位移幾個位元，比如 \\(69 \\ll 1 = 138 = 10001010_2\\), \\(69 \\gg 1 = 34 = 100010_2\\). 在十進位制中，如果我們把 \\(69\\) 左移一位並補零會得到 \\(690\\), 相當於乘以十；而將 \\(69\\) 右移一位並捨去會得到 \\(6\\), 相當於除以十的商。同理，在二進位制中我們可以使用位移運算子來實現 \\(* 2^n\\) 與 \\(/ 2^n\\).\n此外，我們知道所有的偶數可以寫為 \\(2n, n \\in \\mathbb{Z}\\) 的形式、而奇數可以寫為 \\(2n + 1, n \\in \\mathbb{Z}\\) 的形式；因此，我們可以知道所有偶數最低位元必然是 \\(0\\), 所有奇數最低位元必然是 \\(1\\), 換言之我們可以用 x \u0026amp; 1 判斷 x 是否為奇數。再更進一步，我們知道 x \u0026amp; 1 == x % 2, 甚至可以導出 \\(x \\pmod{2^n} \\equiv x \\\u0026amp; (2^n - 1)\\).\n注意到這裡的 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 與先前我們在 cout, cin 所用的毫無關聯，如果你是用 VS Code, 應該會觀察到 cout, cin 的 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 與整數的 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 顏色有所不同。技術上來說，cout, cin 是物件，他們重載惹 \u0026lt;\u0026lt;, \u0026gt;\u0026gt; 運算子，賦予其完全不同的意義。\n位元運算還可以實現很多高效運算，比如取絕對值、取最大最小值等等，其他奇技淫巧就留給各位慢慢研究惹。當然上面舉的例子不少不用位元運算也可以達成，只是用位元運算理論上效率較高，而且顯得你很潮。\n成大教授好文 推介。\n條件運算子 條件運算子是唯一的三元運算子，因此也常常直接用以指代。其語法是這樣：condition ? value_if_true : value_otherwise. 其中，condition 是個表達式，如果它非零為真則回傳 value_if_true 的值，否則回傳 value_otherwise. 某種程度來說，它是我們下一篇要介紹的 if-else 條件判斷 的簡化特例版。\n它還可以再簡化成 a ?: b, 這在處理指標時很有用，比如：\ntreap *merge(treap *a, treap *b) { if (!a || !b) return a ?: b; if (a-\u0026gt;pri \u0026lt; b-\u0026gt;pri) { a-\u0026gt;tr = merge(a-\u0026gt;tr, b); a-\u0026gt;pull(); return a; } else { b-\u0026gt;tl = merge(a, b-\u0026gt;tl); b-\u0026gt;pull(); return b; } } 類題演練  ZeroJudge d066   運算子優先順序和結合性 數學上我們有先乘除、後加減，C++ 中的運算子亦有一定優先順序。如果我們用的有點問題，通常編譯器會提醒可能需要加個括弧。\n   Precedence Operator Associativity     1 () [] . -\u0026gt; ++ -- suffix ⤇   2 ! ~ ++ -- prefix + - sign * dereference \u0026amp; address​ ⤆   3 * / % ⤇   4 + - ⤇   5 \u0026gt;\u0026gt; \u0026lt;\u0026lt;​ ⤇   6 \u0026gt; \u0026gt;= \u0026lt;= \u0026lt; ⤇   7 == != ⤇   8 \u0026amp; ⤇   9 ^ ⤇   10 | ⤇   11 \u0026amp;\u0026amp; ⤇   12 |||| ⤇   13 ?: ⤇   14 = += -= *= /= %= \u0026amp;= |= ^= \u0026gt;\u0026gt;= \u0026lt;\u0026lt;= ⤆   15 , ⤇    ","date":"Jul 18, 2021","permalink":"https://nevikw39.cf/programming/operator/","series":["C++ 入門"],"tags":["C++","operator"],"title":"[C++ 入門] 1.3 運算子與表達式"},{"categories":["程式💻"],"content":"接下來的兩篇分別介紹變數型別及運算子，初學者只需大略了解相關概念，必要時再查詢相關資料即可。\n前面我們介紹如何宣告整數型別的變數，但其實變數不只有整數，其實整數也有不少種。C++ 中的基本資料型別可以分為整數、浮點數、字元及布林等等，其中因為 C++ 算是弱型別語言，字元及布林是能直接和整數轉換的。\n整數 標準中的整數關鍵字計有：short, int, long, long long, \u0026hellip; 為何要有那麼種多整數呢？？以 ZeroJudge a002 為例，這題要求兩整數的和，相信對各位十分容易，肯定能輕易地寫出以下的程式：\n 現在請 F5 執行這個程式。輸入 \\(87\\ 69\\), \\(9487\\ 666\\), \\(92\\ 89\\) 之類的顯然不會有問題，但現在試著輸入很大很大的數字。要多大呢？？\\(1000000000\\ 1000000000\\) 還是正確的，但 \\(10000000000\\ 10000000000\\) 就出事惹阿伯！！怎麼跑出一個奇怪的負數，是電腦壞惹嗎？？\n對的沒錯你的電腦壞惹 50 收 先別急著砸爛電腦。事實上，每種基本型別都有其上下限。以 int 為例，在現代電腦中通常佔據 4 個位元組 (bytes), 即 32 位元 (bits), 而其中一個位元用來表達正負，因此 int 的值域為 \\([-2^{31}, 2^{31})\\), 請注意這是一個左閉右開的區間，並不包含 \\(2^{31}\\), 原因是區間中含有 \\(0\\).\n當我們計算的值超出當前型別的最大值，稱為 Overflow. 這是一個很容易犯的錯誤，也常造成不少損失，知名案例包括波音 787, 2038 年問題、好幾年前的「江南 Style」點閱次數超過 \\(2^{31} - 1\\) 迫使 YouTube 採用 64-bit 整數等等。\nlong, 長整數，顧名思義值域應該要比 int 長吧？？如果你這麼想很正確但是錯的，這就是 C/C++ 中一些因為歷史的沉痾而肇致的討人厭共業。現今我們的電腦多數為 32-bit 或 64-bit (mostly x86_64), 然而在 C 出生的年代主流是 8-bit 或 16-bit, 因此實際上標準中對 int, long 的定義分別是至少 2 bytes (16 bits), 4 bytes (32 bits). 也就是說，夠古老的 C 教材會告訴你 int 的值域為 \\([-2^{15}, 2^{15})\\). 而在 32-bit OS int 通常是 4 bytes (32 bits), 64-bit 為惹相容性也是蕭規曹隨沿襲下去。\n麻煩的就在這個 long 喇。上面說道標準中 long 至少 4 bytes (32 bits), 對於 64-bit OS 主要有兩種 data model, LLP64 與 LP64, 其中 long 分別為 4 bytes (32 bits), 8 bytes (64 bits). 大部分的 OS 如 Linux, macOS, BSD 等等都是採取 LP64, 就微軟搞怪用 LLP64, 也就是說 64-bit Windows 上 long 的值域相當於 int 只有 \\([-2^{31}, 2^{31})\\).\n因此，標準才改版新增惹 long long 這個整數型別，保證其至少為 8 bytes (64 bits).\n回過頭來看這題說輸入的數字 \\(a, b \\Rightarrow |a| \u0026lt; 10^6, |b| \u0026lt; 10^6\\), 因此我們用 int 是沒有問題的。程式競賽與日常生活中的問題一樣，首先我們必須定義問題，問題一定有條件、範圍，然後我們據此選擇解決問題的方法。\n結論是如果 int 不夠用就用 long long 吧  至於 short 就是短整數，除非要壓空間不然應該很少用。題外話是在 32-bit OS 同樣有 LP32, ILP32 之爭，真的很討厭不要理它吧。\n另外上面有提到整數型別需要使用 1 bit 來記錄正負，而如果不需要管負數的話可以在整數前面加個 unsigned, 比如說 unsigned int, 則值域會變為 \\([0, 2^{32})\\). 現在電腦儲存負數的方式為 2-補數，以後有機會結合位元運算再加以說明。\n類題演練 這兩題都會用到 if-else, 晚點記得回過頭來看看！！\n GreenJudge a031  TCIRC Judge c019   浮點數 如果說程式語言中的 int 是對於數論中 \\(\\mathbb{Z}\\) 的近似，那麼浮點數就是 \\(\\mathbb{R}\\) 實數的近似。既然說是近似惹，那就一定存在誤差。因為我們目前還未學到 if-else 條件判斷所以就不示範，事實上在電腦中 \\(0.1 + 0.2 = 0.30000000000000004 \\neq 0.3\\), 下面是個 meme 博君一笑。\n  原因的話很容易理解：十進位制的有限小數轉到二進位制往往變成循環小數。目前主流關於浮點數的規範是 IEEE 754, 大一程設通常會教，這邊就不多說惹。\n注意到現在編譯器預設字面常量都是 double, 不要再用 float 喇，當然還有 long double 更精準。\n使用浮點數務必小心謹慎，分享幾個因為不察浮點數誤差造就的悲劇：\nIntel Pentium FDIV bug​ (US$ 470M) Ariane 5 火箭發射意外​（2 人死亡​） 愛國者防空飛彈意外​，攔不到伊拉克飛毛腿飛彈（28 人死亡、98 人受傷​）  成大教授好文 推介。\n型別轉換 看看這段程式會輸出什麼？？\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;87 / 69 = \u0026#34; \u0026lt;\u0026lt; 87 / 69 \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; return 0; } 結果是 \\(1\\) 而非 \\(1.26086\u0026hellip;\\) 前面提到過 C/C++ 中，對於兩整數使用 / 是取其商，那如果要求有小數的結果呢？？我們可以使用以下語法來顯式地轉型：\n// 略 ... cout \u0026lt;\u0026lt; double(87) / 69 \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 略 ... 而以下方法則是隱式地轉型：\n// 略 ... cout \u0026lt;\u0026lt; 87 * 1.0 / 69 \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 略 ... 當兩個不同型別的變數運算時，預設會轉為比較廣泛的型別。而 C++ 還有 static_cast, const_cast, reinterpret_cast, dynamic_cast 等轉型方式，有興趣可以自行深入了解。\n類題演練 攝氏溫度 ℃ 與華氏溫度 ℉ 的轉換，剛好各一題。\n ZeroJudge e343  ZeroJudge d051  GreenJudge a008   字元 前面我們多次使用字面常量的字串 \u0026quot;This is a string.\u0026quot; 事實上，字串的組成單元是字元；準確來說，字串其實是字元陣列，單個字元我們用單引號夾住。一個字元就代表一個西方語系符號，中日韓共同表意文字 (CJK Ideograph) 則對應二或三個字元，一個跳脫序列也會對應到一個特殊字元。\n電腦只懂二進位制，要記錄字元我們需要將之對映為數字，這個過程稱作編碼 (encoding), 知名編碼表包括 ANSI, ASCII, Unicode, UTF-8, \u0026hellip; 舉例而言，'0' 的值是 \\(48\\), 'A' 的值是 \\(65\\), 'a' 的值是 \\(97\\), '\\n' 的值是 \\(10\\), ' ' 的值是 \\(32\\). 有趣的是，大寫字母與小寫字母剛好差 \\(32\\), 就是第五位元，而 \\(32\\) 又是空白字元 ' ' 的值，因此在做大小寫轉換時可以應用位元運算。\n關於字串及陣列，往後會詳盡解釋。這裡似乎寫得有點凌亂，總之：\n字串由字元構成，字元其實是一種整數。  MISC 最後補一些雜七雜八的東西。\nconst \u0026amp; constexpr const 是 constant 的縮寫，就是常數的意思，在宣告變數時於型別前面加上 const 修飾，就可以宣告常數，之後其值就無法更改。常數仍然儲存在堆疊或堆積等記憶體中，換言之它不能節省記憶體，但可以在執行時期決定。\nconstexpr 則是 C++ 11 的新關鍵字，可以修飾變數或函數，其值在編譯時期就必須決定，或可優化程式效能。\nsizeof() 上面談到 int, long, long long 的大小是否令你一頭霧水？？其實，我們可以使用 sizeof() 運算子得到各型別的大小：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; sizeof(short) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(int) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(long) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(long long) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(float) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(double) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(long double) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; \u0026lt;\u0026lt; sizeof(char) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; #ifdef __SIZEOF_INT128__  \u0026lt;\u0026lt; sizeof(__int128_t) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39; #endif  ; return 0; } 上面的程式碼輸出八種基本型別的大小，單位是 byte. 而 __int128_t 是 gcc 提供的黑魔法，macOS 如果使用蘋果的 clang++ 則無法使用喔 o'_\u0026lsquo;o\n最後補充 \u0026lt;cstdint\u0026gt; _(\u0026lt;stdint.h\u0026gt;)_ 有提供 int8_t, int16_t, int32_t, int64_t, \u0026hellip; 這種定義。\n","date":"Jul 17, 2021","permalink":"https://nevikw39.cf/programming/var_type/","series":["C++ 入門"],"tags":["C++","variable"],"title":"[C++ 入門] 1.2 基本變數型別"},{"categories":["程式💻"],"content":"概述變數與運算 程式在執行過程中，一如我們平時計算往往需要計算紙，總是會需要保存一下運算的過程與結果。當我們宣告一個變數，電腦就會在記憶體當中分配一個空間給予我們使用。今天我們的重點在輸入，因此先簡單介紹整數型別的變數。\n還記得 1_2 的範例中，我們輸出 \\(87 \\times 69\\) 以及 \\(9487 \\times 426 - 89 \\times 64 + 87 \\times 69\\), 我們觀察到後者其實有用到前者的結果，因此我們可以宣告一個變數紀錄前者，如下所示：\n 第七行的 int n = 87 * 69; 代表我們宣告一個名為 n 的變數，其形態為整數 (int, integer), 同時我們將其值設為 \\(87 \\times 69\\). 按下 F5 執行它，你會發現結果應該與 1_2 相同。\n輸入 目前為止，我們的程式仍然還是只能輸出固定的內容。接下來，我們看看下面這個程式：\n 趕緊按下 F5 執行看看，你會發現你的程式停下來等待你輸入一個整數，按下 Enter 之後就會重複你輸入的整數。我們一樣在第七行宣告一個名為 n 的整數變數，只是這回我們沒有賦予它初始值。第八行的 cout 你現在應該頗熟悉惹，值得注意的是第九行的 cin \u0026gt;\u0026gt; n;, 就是這行程式碼讓我們可以輸入一個值傳遞給 n.\n類題演練  GreenJudge a004    剛才我們的範例都只有一個變數，那麼如果有多個呢？？比如今天我們想寫一個程式，令使用者輸入被除數及除數，而程式輸出商及餘數，可能有些人現在會這樣寫：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a; int b; cout \u0026lt;\u0026lt; \u0026#34;Please input two integers a and b: \u0026#34;; cin \u0026gt;\u0026gt; a; cin \u0026gt;\u0026gt; b; cout \u0026lt;\u0026lt; \u0026#34;a/b = \u0026#34; \u0026lt;\u0026lt; a / b \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;a%b = \u0026#34; \u0026lt;\u0026lt; a % b \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; return 0; } 這樣其實也沒有錯，只是我們可以合併起來：\n 注意到 % 是取模運算子，白話文就取餘數；而 C++ 中兩個整數 / 是取其商，且是向 0 取整。關於運算子們的細節，之後會再詳加說明，置紹你現在可以很直覺地使用 +, -, *, /, %。\n當然你 ,, \u0026lt;\u0026lt;, \u0026gt;\u0026gt;, /, % 前後的空格都可以省略，每行前面的縮排也非必要，甚至你高興整個 main() 函式可以擠在同一行，只是有夠醜。寫程式排版的習慣風格有很多種，比較新的語言會有官方推薦的，而 C/C++ 就是百花爭放。我自己是偏愛 BSD/Allman Style, 就是大括弧下放，兩兩成對比較有美感喇，VS Code ⇧ Shift + Alt (⌥ Opt) + F 的預設風格也衍生於此。\n類題演練 除惹經典的 \\(A + B\\) 西元民國紀年轉換各一題，另外有幾題與時間相關可以善用 % 運算子。\n ZeroJudge a002  ZeroJudge d049  ZeroJudge d050  ZeroJudge d060  ZeroJudge d073  ZeroJudge d827  GreenJudge a005  GreenJudge a006  GreenJudge a007   Debugger 的使用 我們每次按下 F5 VS Code 底下的 status bar 都會變色，其實是執行所謂的 Debugger, 可是究竟要怎麼用？？試著在 VS Code 中對上面 1.1-2_div_n_mod.cpp 的第十行編號的前面按一下，前面應該會出現一個紅點 (break point), 這時再按下 F5 輸入兩個整數並 Enter, 程式就會停下來惹。這時看到左上會有 VS Code 自動選取的一些變數 Variables, 雙擊可以直接修改其值；左中是 Watch 雙擊可以輸入欲監看的表達式如 a + b 等，右下則是 Call Stack. 此時再按下 F5 程式又會繼續執行下去。\n動手手試看看，輸入 87 0 並在中斷點把除數的值改掉。  當然我們不可能每次都手動檢查除數是否為零，至於如何讓程式自己檢查？？且待下下回分解。\n","date":"Jul 17, 2021","permalink":"https://nevikw39.cf/programming/var-n-input/","series":["C++ 入門"],"tags":["C++","variable","operator","IO","debugger"],"title":"[C++ 入門] 1.1 變數與輸入"},{"categories":["程式💻"],"content":"各位準備好發環境惹嗎？？準備好惹！！那就讓我們打開 VS Code, 開啟一個你喜歡的資料夾然後創建新檔，正式開始寫程式喇！！\n 不免俗地來個 hello, world. 建議自己手打一次比較有印象，不要直接複製貼上。按下 F5, 這時 Linux, Windows 使用者點選下方的 Terminal 就會看到你的程式輸出一行 hello, world, 而 macOS 則是會彈出一個 Terminal.\n接著就讓我們來細細品味、欣賞這個程式。這是 C++ 程式碼最基本的架構，雖然不必強求立刻完全理解每個細節，畢竟就跟數學、物理一樣，總是有一些基本的性質是需要背起來的，也許當下無法馬上理解也無妨，但相信多打幾次很快就可以記起來，而且未來就會逐漸體會。\n為表負責，我還是簡單說說一些目前無關緊要的細節給有興趣的人參考。首行的 #include \u0026lt;iostream\u0026gt; 代表我們引入惹 C++ 標準中 \u0026lt;iostream\u0026gt; 這個表頭檔 (header file), 裡面有稍後我們會用到的 cout. using namespace std; 表示我們要使用 std 即 standard 這個命名空間 (namespace), cout 也被定義在那裡。而 int main() { /* ... */ } 則是我們宣告惹一個函式名為 main, 它是我們程式的進入點 (entry point), 也就是我們的程式執行時作業系統會去呼叫它，然後我們用  return 0; 回傳 0 代表我們的程式正確結束。\n有些人的 main() 函式會省略 int 或改為 signed，或不 return, 這是不符合規範的。  請把焦點投注在我們的 cout, 它才是我們今天的重頭戲。cout 是個物件，我們可以透過 \u0026lt;\u0026lt; 這個重載的運算子把我們想輸出的內容傳遞給它，就可以輸出到 Terminal. 而用雙引號包起來的的稱作字串 (string), 它就是我們要說的話。\n動動手手試試看：修改雙引號內的內容，按下 F5 觀察有什麼不同？？  類題演練  ZeroJudge d483  GreenJudge a001   錯誤訊息 有個值得留意的小地方，就是 cout \u0026lt;\u0026lt; \u0026quot;hello, world\u0026quot;;, return 0; 後面都有個分號，這是 C++ 語法的規定。\n動動手手試試看：故意刪掉分號，再按下 F5 觀察會有什麼反應？？  這時理論上 g++ 會發生編譯錯誤，VS Code 會告訴你相關錯誤訊息。往後遇到如此情況不必驚慌，畢竟你犯的錯通常別人早就犯過，即使讀不懂也沒關係，上網 Google 一下很快就找的到解答。\nEscape Sequence 先別被這個小標給嚇著惹。我們回到 cout, 今天如果想要輸出的內容需要換行，比如說：\n hello, world\nhi, nevikw39\n 那要怎麼辦？？直接在 \u0026quot;hello, world 後面按 Enter 然後輸入 hi, nevikw39?? 如果真的這麼做且按下 F5, 就會得到錯誤訊息，趁現在來觀察一下，我這邊的錯誤訊息會說 cout \u0026lt;\u0026lt; \u0026quot;hello, world missing terminating \u0026quot; character, hi, \u0026quot;; ‘hi’ was not declared in this scope; 簡單來說就是 C++ 中雙引號必須在同一行，所以直接在 \u0026quot;hello, world 後面按 Enter 就會導致編譯器找不到結尾的雙引號，而下一行的 hi 不在雙引號內也讓編譯器不認識它。\n所以究竟該怎麼辦喇？？這時我們就需要跳脫序列 (Escape Sequence) 的幫忙。所謂跳脫序列，指的是我們用一個特殊字元 \\ 來跳脫下一個字元，使之表現出特定功能。比如當我們要換行時，就可以使用 \\n. 下表列出一些常用的跳脫字元：\n   跳脫字元 功能描述     \\n new line, 換行   \\t tab, 定位字元   \\b backspace, 游標會倒退一格   \\a alert, 電腦的蜂鳴器應該會叫一聲   \\\u0026quot; 就是 \u0026quot;   \\\\ 就是 \\    找的到 \\ 嗎？？它在 ⌫ Backspace 底下，稱作 back slash, 反過來的斜槓  程式碼 很簡單就不列出惹。可以注意到跳脫字元在 VS Code 中與一般的字串字元有不同的顏色。\n類題演練  ZeroJudge e926  TCIRC Judge c001  GreenJudge a002  GreenJudge a003    有些教材會要你使用 endl, 其實可以不必管它。事實上，endl 的作用就是 put 一個 \\n 之後再 flush cout 的 buffer, 以現今的終端機而言是雞肋，在 OJ, 競賽場合更是畫蛇添足。  輸出其他內容 每次都只輸出字串未免有些無聊，電腦的強項不是運算嗎？？試著輸出一些運算結果吧！！\n 一樣按下 F5, 看看是不是得到答案惹？？不過這樣還是好單調喔，只能輸出固定的運算。因此，敬請期待下一篇介紹如何宣告變數、允許使用者輸入！！\n","date":"Jul 16, 2021","permalink":"https://nevikw39.cf/programming/hello-world/","series":["C++ 入門"],"tags":["C++","hello, world","IO"],"title":"[C++ 入門] 1 hello, world 與輸出"},{"categories":["程式💻"],"content":"俗諺云：｢工欲善其事，必先利其器。」在我們正式開始寫程式前，當然也必須先準備好開發的環境。所謂開發環境，指的就是我們撰寫程式中所依賴的一切。\n我們開發的既然是命令列程式，自然可以在命令列上開發，比如使用 vi 作為編輯器，再手動下 g++ 指令編譯，但那樣太電惹不適合我們。現代人一般使用整合式開發環境 (IDE, Integrated Development Enviroment), 具備文字編輯、編譯鍵置、執行偵錯、版本控制等功能的圖形化介面。\n市面上的 IDE 琳瑯滿目，像是 macOS 專用的 Xcode, 以 Java 為主但考 APCS 或 TOI 入營考拿來寫 C++ 也很舒服的 Eclipse, 在全國賽搞我的 Code::Blocks, LKK 老掉牙的 Dev-C++, 以及號稱地表最強 IDE 的 Visual Studio. 不過，我最推薦的是 Visual Studio Code.\nVisual Studio Code Visual Studio Code , 常簡稱 VS Code, 雖然與 Visual Studio 一樣是微軟出品而名子只差惹一個詞，但兩者可謂風馬牛不相及。相比之下，VS Code 是個完全免費、開放原始碼而且輕巧許多的 IDE. 此外，VS Code 也有著活躍的社群與豐富的插件，比如在你的 Discord Status 顯示你正在寫什麼、寫惹多久。\n我覺得最實用的功能包括但不限於反白某段 code 再按下各種括弧或引號即可把它包起來、強大的 IntelliSense 可以容易地 Go to Definition, 按下 ⇧ Shift + Alt (⌥ Opt) + F 就能輕鬆自動排版得到美觀的程式碼、也可快速地重新命名變數等等，還有許多待你一一發掘，往後我們也會陸續介紹。\n接下來就分別說明各平台的安裝流程。\nLinux 如果你用 Linux 應該很電⚡吧，就根據自己 distro 的 package manager 安裝好 g++, gdb; VS Code 的設定非常簡單，打開一個資料夾、新增一個 .cpp，它應該會問你要不要安裝 C/C++ 套件, 按下 F5 全部都用預設選項即可，記得 build task 選 g++。\nmacOS 蘋果的話稍微麻煩一點，可以參考官方的這份文件 ，茲節錄重點如下：\n檢查是否有安裝 clang, 可以打開 Terminal 並執行以下指令 xcode-select --install  在 VS Code 中打開一個資料夾、新增一個 .cpp，它應該會問你要不要安裝 C/C++ 套件 按下 ⌘ Cmd + ⇧ Shift + B 進行建置（相當於編譯），選擇 C/C++ clang++ build active file. 如果你是 macOS 10.15 Catalina 或以上版本，請在這時開啟的 tasks.json 找到 \u0026ldquo;tasks\u0026rdquo;: [ 這行後面按下 Enter, 並貼上以下 code: { \u0026#34;label\u0026#34;: \u0026#34;Open Terminal\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;osascript -e \u0026#39;tell application \\\u0026#34;Terminal\\\u0026#34;\\ndo script \\\u0026#34;echo hello\\\u0026#34;\\nend tell\u0026#39;\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [] }, 貼完之後可以按下 ⇧ Shift + ⌥ Opt + F 自動排版美觀一下。然後點選 Menu Bar 的 Terminal \u0026gt; Run Tasks\u0026hellip;, 選擇 Open Terminal, 這時應該會彈出視窗要求給予權限，允許之後會跳出一個 Terminal.\n 按下 F5 （記得 Fn 鍵），選擇 clang++ build and debug active file, 請在這時開啟的 launch.json 找到 \u0026ldquo;externalConsole\u0026rdquo;: false, 並把 false 改為 true 大功告成，以後只要按下 F5 即可編譯並偵錯！！  假若搞不太懂或遇到什麼困難，這裡分別是參考的 tasks.json , launch.json .\nWindows 因為 Windows 實在很不方便開發，還好從 Windows 10 開始微軟推出惹 WSL (Windows Subsystem for Linux) 這項技術，令 Windows 使用者可以享有以非常接近 native 的方式運行 Linux 的福音，假如你未來還想學習 Python, Go, Java, Node.JS 等語言或是 git 等等，那麼不要猶豫馬上安裝 WSL 吧。\n這是微軟官方對於 WSL 安裝的說明 ，因為有機翻中文就不特別說明，至於要選 WSL 1 或 WSL 2 其實都可以，怕麻煩就 WSL 1 簡易許多，反正以後還可以改，在 Microsoft Store 如果不知道要裝哪種 Linux Distro 就選 Ubuntu 吧。第一次開啟後輸入 Linux 專用的帳號與密碼，等待作業系統安裝完成首先執行以下指令：\nsudo apt update sudo apt upgrade sudo apt install g++ gdb 會要你輸入剛才設定的 Linux 專用密碼。接著參照這篇文章 ，之後就跟上面 Linux 的步驟差不多，打開 Windows 的 VS Code, 安裝 Remote - WSL 套件，開啟一個資料夾、新增一個 .cpp，它應該會問你要不要安裝 C/C++ 套件, 按下 F5 全部都用預設選項即可，記得 build task 選 g++。\n 如有遇到任何困難或問題，歡迎在底下留言或透過底下聯繫方式私訊喔 o'_\u0026lsquo;o\n","date":"Jul 16, 2021","permalink":"https://nevikw39.cf/programming/environment/","series":["C++ 入門"],"tags":["C++","VS Code"],"title":"[C++ 入門] 0.2 準備開發環境"},{"categories":["程式💻"],"content":"我自學 C++ 的網站 這些是我當初自學時參考的網站，小學生都可以學起來，相信真的不會太難。\n 美麗 C 世界 (C++ Version)  語言技術：C++ Gossip  程式語言教學誌   網路上還有很多很多的資源，我是認為文字還是比影片彈性自由，，不妨多看看說不定可以找到勝盒自己的。\nOnline Judge 學惹程式之後要幹嘛？？怎麼知道自己的程式對不對？？如何增進程式設計的技巧？？Online Judge, OJ, 或譯為線上評測系統，是目前最普遍練習程式的方式。\nOnline Judge 上會有若干題目，每個題目會有一定的輸入及輸出條件及格式，要求你撰寫一個程式，在一定的時間與記憶體內，根據輸入與題目所述進行運算並輸出。\n還記得我們先前說過：一個程式最重要的就是輸入和輸出嗎？？  也就是說， OJ 本質上是一種黑盒測試，它並不在乎你程式具體內容，只關心你最終輸出是否正確。以下是適合新手的 OJ:\n ZeroJudge  台灣最廣泛的中文 OJ, 只是題目有點雜   GreenJudge  題目的順序對於初學者很棒，只是系統比較舊   UVa  歷史最悠久的 OJ, 對英文不排斥的話也很不錯   TCIRC Judge  自己家的 OJ 必須推 XD   TIOJ  建中 OJ, 對新手算難    根據你提交的程式的輸出與標準答案比對後的結果可能如下：\n   Code Description Note     AC Accepted 完全正確   WA Wrong Answer 存在錯誤   NA Not accepted 對於多筆測資，至少有一非 AC   CE Compile Error 編譯錯誤   RE Runtime Error 執行時期錯誤   TLE Time Limit Exceeded 超過時間限制   MLE Memory Limit Exceeded 超過記憶體限制   OLE Output Limit Exceeded 輸出過多   RF Restricted Functions 使用非法的函式    如何學好程式？？ 學會程式真的不是一件太艱難的事，其實與生命中許多體驗相若，只要準備好正確的態度：\n懷抱對於程式的熱忱 具備豐沛的好奇心 擁有持久的毅力 敢於犯錯、不畏挑戰的勇氣 鍥而不捨地尋求解決困難的能力，包括善用 Google  共勉之！！\n","date":"Jul 15, 2021","permalink":"https://nevikw39.cf/programming/resources/","series":["C++ 入門"],"tags":["C++","Online Judge"],"title":"[C++ 入門] 0.1 學習程式的資源們"},{"categories":["程式💻"],"content":"最近想開始撰寫一些程式語言入門的教學。在這樣高度資訊化的社會，每個人都或多或少需要會點程式。可是網路上程式的教材多如牛毛、各種資源俯拾皆是，那麼為何我還要再寫一份呢？？原因是我覺得大部分的教材皆過於單一化，因此希望將我從小自學程式、高中社團擔任教學、解答同學常見問題以及參與一些競賽的經驗做點整理。\n在這份教材中，我將自初學者角度從 0 出發，由關於電腦的小常識、開發環境的準備開始，以及豐富的題目，一步一步建立對於程式語言的觀念。以下是本教材的目錄：\n序章 hello, world: 輸出入、變數與運算 程式流程：條件判斷與迴圈控制 C-style 指標、陣列及字串 函式與其他  而在序章中，我們會先介紹電腦與程式，接著帶各位準備好開發環境，最後說明一些其他事項。本文的介紹可以當故事看看即可，不必強求完全理解。\n何謂電腦？？ 你現在不必急著對著手機的 Google Assistant 問說：｢什麼是電腦？？」XD 如果你小時候與我相同是個好奇寶寶，就會知道維基百科上說：｢電腦，全稱電子計算機……」從英文來看 compute 意為計算，computer 當然是指計算的人或機器。\n今天畢竟是入門，就跳過穿孔卡帶、差分機，直接切入主題：現代電腦惹。世上被認為第一部電子計算機，ENIAC, 在每次運算前，必須先手動調整電路配線，才能通電運作得到結果。也就是說，ENIAC 不能儲存 ｢程式」，每次只能執行固定用途的一套 ｢程式」。\n直到馮·紐曼（馮諾伊曼，von Neumann, 你唸 IKEA 還 Costco??）基於圖靈機概念及二進位制提出同名架構，才正式奠定現今通用型電腦的根基。在馮·紐曼架構中，電腦被分為五大部門：\n控制單元 Control Unit 運算邏輯單元 Arithmetic Logic Unit 記憶體 Memory 輸入 Input 輸出 Output  其中，CU, ALU 合在一起就是我們的 CPU. 當然，我們的重點並不在此，本節核心觀念是：\n程式接受輸入，將資料儲存在記憶體，經由 CPU 運算後，將結果輸出。  程式可以幹嘛？？ Program, 原意為一套程序，看過上面電腦的簡史後，大概能體會如今我們可以透過撰寫一些指令替代原始的調整配線，使電腦進行某些運算。\n電腦是二進位制的，自然也只懂二進位制，但應該不會有太多人覺得撰寫二進位制 Op Code 是很有趣的，因此組合語言出現惹。但是這樣仍然存在諸多不便，隨著程式日益複雜，高階程式語言應運而生。\n典型的高階語言程式原始碼以較適合人類理解的語法撰寫，經過一系列預處理，編譯器、組譯器及連結器才得到電腦讀得懂的可執行檔。\nJava, C# 這類語言會先編譯成位元組碼，等到執行前才由虛擬機 Just-In-Time 編譯為可執行檔。Python, JavaScript 這類直譯語言則是在每次執行時才被直接轉譯執行。\n儘管我們日常生活中常見的都是具備圖形化介面的程式，但最早的程式是執行在命令列（終端機，Command Line, Console, Terminal），而這種程式開發起來也容易許多。\n為何（不）要學 C++?? 最後就是對於初學者，應該要學習何種程式語言？？參考 TIOBE , 可以發現 C 語言自 1970s 始終維持高超人氣而不墜，C++ 同樣也維持著不錯的成績。近年來，一些新興語言如 Python, Go, Rust 亦獲得不少關注。\n  我的觀點是，在可預見的未來內，當前的主流作業系統將繼續維持與 C 的羈絆而難以撼動，因此對於志於資工的學生 C/C++ 仍是首選。而 C++ 相較於 C 對初學者更為友善且具備更多功能。雖然本教材以 C++ 為主，仍會適時註明相關 C 語法。\n假如你非本科生、資工不是你最主要的興趣，那麼 Python 就十分適合。\n","date":"Jul 14, 2021","permalink":"https://nevikw39.cf/programming/abstract/","series":["C++ 入門"],"tags":["C++"],"title":"[C++ 入門] 0. 序：何謂電腦？？程式可以幹嘛？？"},{"categories":["申請入學"],"content":"審查資料，俗稱備審，雖然我不知道 108 新課綱還🈶️沒🈶️這項甄試，但希望本篇觀念或對學習歷程等也🈶️些許幫助。\n   學校 交通 清華 中央     分數 83.67 89.75 84.33    成大備審占比為 \\(0\\%\\)，即使仍然🈶️🉐上傳，卻沒公布成績。另外，雖然中央我沒在截止期限前按下確認，但幸好事後致電確認甄委會🈶️逕予轉送。由上表🉑️以看的出來，我🉐到的分數其實偏低。追根究柢，我認為問題在於內容的呈現。\n內容 備審的美工真的沒那麼重要，畢竟特殊選材的朋友以 Word 搭配標楷體還是上交大惹。與此相比，內容的呈現反而關鍵許多。事實上，輔導老師與模擬面試的教授都曾體醒過我的備審過於文學化，🉑️惜已經太遲惹。\n從小到大我們所接受的教育只培養出撰寫🈳洞而冗長文句的能力，殊不知教授們期望的是精簡的條列式的重點摘要。\n這或許🈶️點難，但你真的需要把你那些精心雕琢的修辭刪去。望各位學弟記取我的教訓，切莫重蹈覆轍。\n排版 假如你看到我爛爛的成績還看到這裡並願意瞧瞧我的一點淺見，那真是太感激惹！！\n絕大多數的人或許皆是使用 Word 來做文書處理，Mac 使用者還🈶️更好用的 Pages 🉑️以考慮，而還🈶️些人是 Adobe InDesign 的愛好者。\n不曉🉐你🈶️迷🈶️聽過 \\(\\LaTeX\\)？？\n\\(\\TeX\\) 是 Donald E. Knuth 教授（對，就是 KMP 的那個 Knuth）為惹他的大作 The Art of Computer Programming 我撰寫的排版軟體。曩者 Linus 大神為惹 Linux 僅以十天開發出 git，而 Knuth 教授同樣因此創造出造福世人的軟體。\n由於其精美的排版，特別是對於數學符號及公式優雅的處理，\\(\\TeX\\) 很快成為學界普遍採用的排版軟體。因為 \\(\\TeX\\) 實在太過強大複雜，因此出現許多不同的巨集版本。\n\\(\\LaTeX\\) \\(\\LaTeX\\) 是最被廣泛使用的 \\(\\TeX\\) 版本，生活中其實不乏其蹤跡，舉凡 NPSC 題目與題解簡報、 TOI 題目、酷音輸入法（如果你🈶️用過 Linux 的話應該會知道）的報告 、C.L.R.S. 四人鼎鼎大名的著作 Introduction to Algorithms、Prof. Antti Laaksonen 的 Competitive Programmer\u0026rsquo;s Handbook、IOICamp 課程中央多數的簡報，聽說台大社科院的教授的上課簡報也很多是 \\(\\LaTeX\\) beamer。\n\\(\\TeX\\) 算是一種標記式語言，透過一定🈯️令、巨集來控制輸出結果。由於強大的自由開放社群，\\(\\LaTeX\\) 🈶️大量好用的 package，比如 pgfplots 能畫出精美的圖形。\n我是因為高二起管理社團 OJ 才迷上 \\(\\TeX\\)，之後的公民報告、小論文等皆作為我的 \\(\\LaTeX\\) 練習。建議🈶️志於此的同學🉑️以現在就動手嘗試。\n網路上的 \\(\\TeX\\) 維基百科🉑️以使用 \\(\\LaTeX\\) 語法來對公式進行排版，各大 OnlineJudge 也都支援 MathJax 等方式呈現數學符號及公式。而 Hugo \u0026mdash; 這個 Blog，則是使用 \\(\\KaTeX\\) 來渲染。\n使用 \\(\\LaTeX\\) 製作備審的優點  使用預設模板即十分美觀，且能給予 \\(\\TeX\\) 常用者熟悉感。 🉑️以把不同部分放在不同檔案，分開編輯一次 input。 多間學校🉑️以共用內容，避免到處複製貼上產生遺漏之虞。 🉑️以使用 \\if ... \\else ... \\fi 針對不同校系進行客製化。 再結🈴 git 版本控制實作備份或回復修改歷史都輕輕鬆鬆，以 shell script 一次產生所🈶️校系的備審真是方便，搭配各種工具簡直如虎添翼。   我的備審 GitHub repo ，歡迎大家參觀 o'_\u0026lsquo;o\n🈶️問題🉑️以發 issue, 在這裡留言或是 Telegram, Instagram 私訊我喔！！\n","date":"May 20, 2021","permalink":"https://nevikw39.cf/posts/bio-and-study-plan/","series":[],"tags":["LaTeX","備審","成大","中央","清大","交大"],"title":"審查資料準備方向"},{"categories":["申請入學"],"content":"現今大學推行多元入學方案，入學管道百花齊放。自 107 學年度起，甄選委員會試辦一階檢定、篩選納入 APCS 成績，提供另一種入學管道。\n今年學測難度🈶️所提升，各科頂標大多下降約二、三級分，我的成績也未盡理想。所幸，我的 APCS 成績通過多數校系的門檻。\n   科目 國 英 數 自 總級     級分 13 15 12 14 54   排名比 24.86 3.89 8.75 7.67 5.87    我🈸請惹交、清、成、央、政大資工系 APCS 組及成大電機，很意外的政大翻車並沒🈶️通過一階。事後，我推測應該是因為 APCS 實作四級分的人數實在過少，以至於當中即使🈶️人數學只🈶️ 11, 10 級分也能通過一階，而政大門檻三級分較多的競爭者才提高數學標準。\n   學校 交通 清華 成功 中央     總分 83.93 90.47 90.27 92.16   結果 備 11 備 1 備 1 正 2    🈸️請入學分發結果：國立清華大學資訊工程學系(APCS組)  由於 APCS 組開辦不久、名額稀少，因此我想把我這次🈸請的感想稍作整理，包含各校最低正取分數、放榜提早時間等，供未來🈶️志循此管道之同學參考。\n 審查資料準備方向  成大心🉐  中大心🉐  清大心🉐  交大心🉐   撞期    我一階通過的校系中，成大 與中央 的甄試撞期。經過不少努力，詳細請見兩校甄試心🉐，最終很幸運地🉐到圓滿的結局。不過事實上，清交對此🈶比較齊全的規範。\n服裝 關於面試的服裝，即使🈶️些人會穿著地非常正式，但個人覺🉐並不是太重要。首先，高中生穿西裝看起來實在很滑稽；再者，科學班的同學穿著 T-shirt 最後還是正取交大惹。由此🉑️知，對於二類科系，穿著真的不太要緊。\n自我介紹 自我介紹是面試非常重要的環節。雖然教授或許曾看過備審，但在自介時適當地強調重點🉑️以引導教授提問的方向。比如我備審中關於網管、GitHub, 數學成績的部分著墨較少，但最終大部分都🈶透過自介彌補。\n自介的長度大約抓一分鐘。去年成大是一分鐘且🈶助教計時，今年我則是被要求兩分鐘。清大的話則是告知🉑以使用簡報五分鐘，交大就是固定的一分鐘。輔導室的面試互助小組及模擬面試等資源🉑️以善加利用，或多或少定🈶裨益。\n 如🈶️任何問題，歡迎善用敝站留言功能，或是私下 Telegram, Instagram 聯繫我。\n","date":"May 20, 2021","permalink":"https://nevikw39.cf/posts/college-application-and-apcs/","series":[],"tags":["APCS","備審","面試","筆試","成大","中央","清大","交大"],"title":"APCS 校系申請入學經驗分享"},{"categories":["拉麵🍜"],"content":"疫情停課後隔天，我獨自去吃原本預計段考中午要去吃的七面鳥。\n這碗是濃厚土雞白湯鹽味，雞叉燒給🉐非常大方，雞白湯真的很濃郁。🉑惜店裡很熱，吃到最後🈶點膩。\n希望疫情早日降溫，讓我繼續探訪各地拉麵。\n  🏬店名  らーめん七面鳥   🏠地址  403 台中市西區中美街 331 巷 15 號    🔗連結  Facebook        ","date":"May 18, 2021","permalink":"https://nevikw39.cf/ramen/shichimenchou/","series":[],"tags":["名店拉麵"],"title":"七面鳥"},{"categories":["拉麵🍜"],"content":"5/3 是校慶補假，我和兩位社團好友展開台中捷運拉麵巡禮。早上收到中央 與清大 的成績單後，頂著毛毛雨散步去大慶站，這是我第一次搭乘台中捷運綠線，乘客人數確實很冷清，不過體驗尚稱舒適。\n麵本初是貍匠拉麵四家品牌之一，主打的是魚類及貝類的拉麵。不過我並不是特別喜歡海鮮，所以我點的是雞湯拉麵。\n雖然是雞湯，但湯底當然還是少不了魚貝的鮮味，我最後甚至喝完整碗湯。魚肉叉燒非常特別，我🈶乖乖吃完。溏心蛋有用白蘭地醃漬，也很入味。\n  🏬店名  麵本初純水魚貝拉麵   🏠地址  406 台中市北屯區熱河路二段 210 號    🔗連結  Instagram        ","date":"May 3, 2021","permalink":"https://nevikw39.cf/ramen/fishramen/","series":[],"tags":["貍匠","名店拉麵"],"title":"麵本初"},{"categories":["拉麵🍜"],"content":"5/1 一中校慶園遊會，我和兩位同班朋友遊到校外 XD\n山下公園是 2020 年度台灣拉麵愛好會社團票選拉麵金賞的第四名，也是同樣高人氣的拉麵店🈶囍拉麵 、Men Monster 的姊妹店。\n畢竟是週六，約莫十點即從學校出發，十一點左右抵達金典綠園道商場，但我們在三樓的市場找惹好久才找到。我們算是很早到的，只是由於不熟排隊規則，成為第二組客人。\n我點的是醬油雞豚濃湯（繁盛），舒肥雞胸叉燒🈚🉑挑剔，現場煙燻的豬五花叉燒搭配湯頭讓我暫時拋卻油脂與理智大快朵頤。\n  🏬店名  山下公園 ラーメン   🏠地址  403 台中市西區健行路 1049 號 金典綠園道商場三樓    🔗連結  Instagram        ","date":"May 1, 2021","permalink":"https://nevikw39.cf/ramen/yamashita/","series":[],"tags":["有囍","金賞拉麵"],"title":"山下公園"},{"categories":["申請入學"],"content":"結果：備 11     項目 學測 備審 面試 總分     分數 80.00 83.67 85.33 83.93    最低正取分數：\\(91.73\\)  以下是我對於交通大學資訊工程學系 APCS 組第二階段甄試的一些心🉐。\n交大的面試比起其他學校晚惹一週，我🈶訂到來回普悠瑪以攤平個人🈸️請的成本。去清大面試吃大角拉麵時🈶聞到一股很想的咖哩，後來我查到東門市場有家小次郎咖哩也頗負盛名。原本看到店休日為週一很開心的想去嚐試，熟料店家在臉書上公告當天未營業而撲惹🈳。\n一樣搭乘藍 1 區，下惹公車站卻在大太陽下走惹二十分鐘才到校門口。面試的地點與寒訓那時相同，在工程三館，只是在三樓。現場同樣🈶️休息是，只是冷氣不甚強，也沒什麼人關心你。\n面試 面試的時間一個人為七分鐘，含一分鐘自我介紹，其餘為三位教授問答。以下是我被握到的問題：\n 付出最多努力的 GitHub 專案  我回答 Zerojudge 爬蟲  為何做這個爬蟲  快速匯出 AC codes  🈶沒🈶造成他人網站負擔  顯然🈚️           上大學後研究方向  我提到🉑️能繼續在演算法競賽領域，對於資安也很🈶興趣。   說一個資料結構及其用途  我舉 treap 為例，說明他強大的功能包括動態第 \\(k\\) 小等。   資料結構與演算法在生活中的應用  起初我愣住，在教授引導後🈶️回答🗺地圖導航用到最短路徑演算法。   程式怎麼處理理想與現實中的誤差  我一直在打太極☯️ QQ.    最後時間到問一半就不問惹，就被請出去喇。\n總結 交大提早一天下午就放榜惹，還是別人跟我說我排名的。交大是我的第一志願，排那麼後面挺難過的，甚至排在那些🈸️請中字輩或牛逼名校北科大備 196 的人之後。隔天看到成績但後也只能坦然接受，畢竟學測數學就是考那麼爛、備審🈶夠糟，面試表現差勁，或許我跟交大就是🈚️緣 na!!\n","date":"Apr 21, 2021","permalink":"https://nevikw39.cf/posts/nctu/","series":["甄試心得"],"tags":["交大","面試"],"title":"交通大學面試心得"},{"categories":["申請入學"],"content":"結果：備 1     項目 學測 備審 面試 總分     分數 91.11 89.75 90.50 90.47    最低正取分數：\\(92.28\\)  以下是我對於清華大學資訊工程學系 APCS 組第二階段甄試的一些心🉐。\n中央筆試結束後，我先搭非常擁擠的🚌公車到達中壢車站，再轉自強號去新竹。這是我高中三年第一次坐🚆㊋車。和社團認識的竹中朋友在東門市場享用大角拉麵後，晚上住在清齋十樓會館。雖然訂房完才發現中央結束後來🉐及回家，畢竟清大面試在下午，但自高處俯視靜夜的清大是十分特別的體驗。\n簡報 清大的面試🉑️以使用五分鐘自我介紹簡報，需至少提前兩天以 Google Form 繳交，格式為 PDF, \\(\\leq 10MiB\\). 這個要求一看就非常適🈴️使用 \\(\\LaTeX\\)，我也利用 beamer package 做出我第一個 \\(\\LaTeX\\) 簡報 。\n面試 雖然我的順序是第十四也差不多提早一小時報到，但我算來的很晚的。系上🈶️準備會議室供考生休息，現場冷期強勁且提供插座及網路。面試共分為兩關，每關個十分鐘、兩位教授。\n第一關 第一關是五分鐘自我介紹及五分鐘教授問答。一進門後就是筆電，左後方是投影幕，而教授在左方的位置。助教會幫忙開好簡報、說明簡報筆使用方式。唯投影機品質不甚佳，我挑選的清大紫變🉐像藍色。\n我的簡報約🈶️ 25 頁，講🉐非常之趕以致於教授的⏲計時器正好在我收尾的時候響起。在自介中，教授對我重啟社團 BBS 站很🈶️反應，是我三場面試唯一一次被稍微打斷。接下來我被問的題目如下：\n 數學與資工如何取捨抉擇  我的簡報最後展示我高三上數學突飛猛進的假象 (? 顯然成功引起教授興趣。數學中當然🈶️不少部分很🈶️趣，但對我而言他充其量不過是資工的方法，而非目的。   考 APCS 時遇到什麼困難  我說明為何經過多次才四級分，並檢討自己的時間分配 跟主辦方的毒瘤後測。   競賽與學業如何取🉐平衡  就是上課認真聽講 並沒🈶️，假日練習程式，🈶️提到高二上還🈶️社課壓力，令我成長不少之類的。   NPSC 分工模式為何  負責躺分與點心 因為我很爛，所以回答🉐很心虛，就只🈶️初賽做出一提水題🉑️以說嘴，決賽我負責參與討論 QQ.   還🈶️🈸️請哪些校系，清交選哪間  首先如實回答後就被追問這理所當然的必考題，然而當下我不知道腦子怎麼惹竟然回答交大跟陽明🈴️併後會🈶️很多問題，出國🉑️能會被不認識，教授表示是很特別的回答。 我應該要說中一中🈶️不少出身清大的優秀教師，予我許多深刻而長遠地的影響與教誨，比如化學、數學、國文老師等⋯⋯    第二關 第二關則是專業白板題，同樣從右後方的門進入，白板位在左方牆壁上。教授坐在白板前，旁邊🈶️題目放在信封袋中要抽。往年的題目🈶️兩單調數列求第 \\(k\\) 小的 \\(A_i + B_j\\)、運算式解析或走迷宮等，我原以為都不會太刁難，誰知我不幸籤亡抽中魔王題⋯⋯\n 🈶️ \\(100 \\times 100\\) 棋盤，每格顏色🉑️能🈶️三種，🉑️以放三種顏色的棋子\n如果棋子跟格子一樣顏色🉐 \\(P\\) 分，如果跟上下左右配對🉐 \\(Q\\) 分\n 當下我直接原地愣住，呆掉不知道多久，腦中非閃過🈚數思緒，想著我的好運終於用罄，原來就要止步於此。教室陷入一片沈默，過一陣子被教授首先打破，開始引導我思考，比如先考慮只🈶️兩種顏色的情形。\n我只能絞盡腦汁盡力擠出一些字句想法，一下子時間就到惹。教授自己說他們的題目還真🈶️趣的樣子，然後安慰我其實回答🉐不差 QQ.\n 兩場面試結束後我被拖去聽 APCS 組學長分享，但當時我腦中一片🈳白，悲觀到認為已經名落孫山，根本🈚️法思考。心不在焉🉐聽一陣子，我就以趕車告辭。\n總結 清大本來表訂下午五點放榜，結果提前至中午十二點。\n事實上清大給我印象很好，尤其是教務處招生中心，包括面試時校園內🈶️許多路標、系上學長分享、就算備取成績單也是以限時專函寄送等等，整體而言🉑️謂非常用心。\n最終我🉐以進入清大資工，真的非常幸運，內心也充滿感激！！\n","date":"Apr 17, 2021","permalink":"https://nevikw39.cf/posts/nthu/","series":["甄試心得"],"tags":["清大","面試","LaTeX"],"title":"清華大學面試心得"},{"categories":["申請入學"],"content":"結果：正 2     項目 學測 備審 筆試 總分     分數 89.52 84.33 100.0 92.16    最低正取分數：\\(90.62\\)  中央 APCS 檢定門檻為觀念四級分、實作四級分，加上常與成大撞期，報考人數一向不多，去年甚至只🈶一位。以下是我對於中央大學資訊工程學系 APCS 組第二階段甄試的一些心🉐。\n撞期 承上篇 ，成大面試結束後我立即招惹🚖計程車，同樣花 \\(\\$340\\) 在十點多到達高鐵站，買惹溏心蛋飯糰極立頓🇬🇧英式奶茶作為午餐，順利趕上 10:48 的高鐵。12:09 到桃園後去中央的🚕計程車則是 \\(\\$265\\)。雖然約莫 12:45 即抵達中央，但快到一點半時我才找到工程五館，那時已經不少人惹。\n筆試 往年中央皆採面試，還🉑️以使用簡報輔助。但自今年起，改以筆試作為甄試項目。作為第一屆🐁白老鼠，對於官方所謂「考試範圍及內容以邏輯思考與及計算性思維為主，不以學科科目為命題方向」實在是摸不著頭緒。\n考試時間為下午 1:00 ~ 2:30 共九十分鐘，開始二十分鐘後不🉐入場，六十分鐘後方🉑️離場，不過🈚️人提早交卷。在二樓報到後（其實只是填問卷）才上位於三樓的考場，沒看到座位表的我只能依序看看每間教室的座位表，體驗不甚好😢。\n另外，APCS 組與一般組的題目相同，🉑️想而知針對普通高中生的題目對於 APCS 實作四級分的考生實在沒🈶鑑別度🉑️言。筆試題目內容如下。\n以下五題各 34 分請明確選擇三題作答：\n 給定六筆數據各🈶三個值，試問哪個資料最🉑️能🈶誤，並說明原因  似乎是個統計題，我高一下數學段考常常不及格喇😡一開始就先 pass，後來還是放棄   數線上🈶四城市，每次造訪任一城市後都必須前往加油站。試決定加油站的位置，使🉐造訪每一城市及加油站之路程最小  這一看就是數學的多個絕對值其和之最小的問題，答案顯然在中位數，利用幾何意義證明，水題一個。 \\(Sol.\\) 我現場寫🉐很凌亂，塗塗改改拉來來去的  令數線上四城市由左而右座標依序為 \\(A(a), B(b), C(c), D(d), a \u0026lt; b \u0026lt; c \u0026lt; d\\) 設加油站座標 \\(x,\\) 則所求 \\(f(x) = |x - a| + |x - b| + |x - c| + |x - d|\\) $$\\because |x - a| + |x - d| = \\left\\{\\begin{array}||x - a| + |a - d|,\\ x \u0026lt; a\\\\|a - d|,\\ x \\in [a, d]\\\\|a - d| + |d - x|,\\ x \u0026gt; d\\end{array}\\right. \\geq |a - d|$$ $$\\therefore f(x) \\geq |a - d| + |x - b| + |x - c|$$ 同理 \\(|x - b| + |x - c| \\geq |b - c|\\ and\\ [b, c] \\subset [a, d] \\implies f(x) \\geq |a - d| + |b - c|\\) 故當 \\(x \\in [b, c]\\) 時，\\(f(x)\\) 🈶最小值 \\(|a - d| + |b - c|\\ \\blacksquare\\)     共兩子題：  以一百字描述資工 (12pt) 解一數獨 (22pt)   第五題跟第二題快速寫完後花惹不少時間在數獨上，但一直做不出來 QQ.   論述資訊科技對偏鄉遲緩兒童早療之益處，提供若干名詞如 VR, 5G, 人工智慧、大數據等  起初很不屑這題 (? 但最後分數真香 (? 簡單條列式說明之。   🈶一迷宮（附圖）試設計一解法  對於程式設計🈶基本認知的人都會馬上想到 BFS 吧。    加分題 共三題，每題 5 分，其中二、三題依據慣用程式語言寫在紙上作答：\n 你如何 Debug 超經典的老梗印星星 給定一字串，求其最後一單詞之長度（英文題）  按：你能使用一行 Python AC 嗎？？    print(len(input().split()[-1]))  現在知道為何筆試🉑️以 \\(100\\) 分惹吧ＸＤ\n總結 中央表定早上九點放榜，但🈶稍微提早偷跑，大約八點半左右。事實上，後來才發現以我的學測成績應該也🉑️以上中央資工一般組。如果是要保底的話，也許不一定需要跟別人搶這名額。\n","date":"Apr 16, 2021","permalink":"https://nevikw39.cf/posts/ncu/","series":["甄試心得"],"tags":["中央","筆試"],"title":"中央大學筆試心得"},{"categories":["申請入學"],"content":"結果：備 1     項目 學測 APCS 面試 總分     分數 90.0 90.0 90.67 90.27    最低正取分數：\\(91.47\\), 2020: \\(92.07\\)  或許是由於 APCS 觀念五級分的門檻，歷年報考人數為 \\(6, 7, 8\\) 人。以下是我對於成功大學資訊工程學系 APCS 組第二階段甄試的整體心🉐。\n撞期   當初選填志願時就知道成大與中央的甄試撞期，當時我想說反正還🈶️政大。誰知道政大一階就被刷掉，徹底打亂我原先的規劃，因此我開始緊張起來。\n一階放榜後 (4/1) 也公布惹甄試時程，成大在早上而中央在下午，但要在三小時內台南趕赴中央堪稱不🉑️能的任務，難度直逼豐臣秀吉的中國大返還。\n由於中央是筆試，明言不受理時間調整🈸請，未參加筆試者不予錄取，學長建議我問問成大。我本來打算捎封 email 過去，國文老師知道後要我直接致電。我首先被複雜的分機系統搞🉐暈頭亂向，打惹好幾通最後隨便撥一個分機，她說他們剛好在搬系辦 QQ. 我留下我的聯絡資訊，同時也寄出 email. 此時我在 ptt SENIORHIGH 板🈶️篇發文 ，當時充滿對未來的不安。\n隔幾天依舊杳🈚️音信，清明連假後 (4/6) 我復致電同樣唯一存活的分機🉐到仍在搬遷系辦的答覆。此時我本來業已死心，甚至連中央備審都沒按下確認，但在 4/12 ㈠面試前四天的第三節課，成大系辦㊙️書突然來電說🉑️以幫我提早到 9:40!! 因此，我趕緊向中央確認我的備審被甄委會逕予繳交🈶️迷🈶️被接受。\n一夕之間，我的未來彷彿起死回生，柳暗花明。我真的非常幸運，成大資工系辦與教授也都很友善 （只是效率🈶️點差）。未來假若🈶️學弟遇到類似狀況，🉑️以試試打電話問問喔。\n備審 APCS 組備審占比為 \\(0\\%\\)，雖然系網🈶️給予🈯️引，限制字數 \\(600\\) 以內，但我是沒理管他的。只是每年成大備審似乎都會多一些奇怪項目，比如去年學長要繳交 P. 學習檔案，而我遇到 A. 個人資料表。其他學校🈶 A. 者皆🈶提供固定格式，唯成大完全沒🈶方向。因此，我把我的個人簡歷充當之。\n面試 成大面試在 4/17 ㈤，我本來想試搭台中捷運到高鐵站，但爸爸直接送我過去。提早不少到站，本來我想乾脆坐早一點的車次，只是前面對號座都滿惹，換自由座還要退票真麻煩。我按照原定計畫 8:37 抵達台南，花 \\(\\$340\\) 的🚕計程車在九點左右抵達成大。抵達時系辦那邊還覺🉐我太早到ＸＤ\n面試的地點在該系滑鼠聽，進去後🈶前面🈶️三位教授，後面是白板。進去後教授要我進行兩分鐘自我介紹，比以往學長多一些。接著我被問的題目如下：\n 社課教學內容  我稍微介紹上學期是基礎 C 語法，下學期 C++ 🈶帶到簡單 STL 跟演算法。   現場示範教學  起初我說平常上課都使用簡報，教授很耐心的引導我，最後以 STL set 為例。   set 在競賽中的應用  緊接著教授追問我在競賽中 set 的應用，我本來回答 YTP'20 決賽🈶題動態第 \\(k\\) 小🉑️以維護兩個 set，但我表達太爛只好趕快改成 YTP'19 初賽🈶個類似 two-sum 的題目。 接住🈶教授再問知不知道 set 的複雜度跟底層實作原理，我回答 R-B Tree 🈶獲🉐點頭。   伺服器網管經驗  在兩分鐘自我介紹所埋的線索成功被教授採納，我提到包括社團及個人的經驗。   GitHub 上最🈶代表性的專案  在自我介紹所設的梗再度被踩，我趁機介紹我的 ZeroJudge 爬蟲，教授曾問一些技術細節。   還🈶🈸請哪些校系  如實表明後我提到等等要趕往中央筆試並再次感謝教授惠予通融，教授也給我㊗️福。    面試時間表訂一人十二分鐘，不過我沒特別計時，大概 9:50 左右結束。🉑️惜的是成大連續兩年特選甲組及個🈸️ APCS 組都問的 Leetcode #169 Majority Element 跟 500 紅球 500 黑球的經典題竟然沒出，頗感意外。\n總結 成大放榜比較不一樣，雖然早在 4/27 開放查詢成績，但直到 5/5 才正式放榜。前者事前沒公告時間，跟後者一樣早上九點分毫不差。因此我🈶請教學長他們那屆最低正取分數是 \\(92.07\\)，多一個🉑️以給學弟參考。成大是我第一個甄試的校系，雖然事後與其他學校相比等待的休息區略顯陽春，但特地為我提前時間在我心中大大加分。\n","date":"Apr 16, 2021","permalink":"https://nevikw39.cf/posts/ncku/","series":["甄試心得"],"tags":["成大","面試"],"title":"成功大學面試心得"},{"categories":["拉麵🍜"],"content":"大角拉麵是隱身在散發迷人的時代氣息的新竹東門市場中的一家拉麵店。\n中央筆試 結束後，我在新竹待一晚，以準備清大的面試 。\n約惹社團活動認識的新竹同學，作為稱職的在地向導引我穿梭宛如迷宮的東門市場，邊排隊邊聊天，一排就是四十分鐘，前面的顧客中似乎🈶穿著一中衫的學長。\n這碗雞清湯鹽味柚子拉麵，搭配以威士忌醃漬的溏心蛋，完全🈚愧於長長的人龍。\n因為中午只吃小小的便利商店飯糰又等惹好久，我難🉐地享受免費的加麵服務，但最終還是吃得太飽啊。\n  🏬店名  大角拉麵 ダージャオラーメン   🏠地址  300 新竹市東區大同路 86 號 東門市場 #1022    🔗連結  Facebook        ","date":"Apr 16, 2021","permalink":"https://nevikw39.cf/ramen/dajiao/","series":[],"tags":["名店拉麵"],"title":"大角拉麵"},{"categories":["札記"],"content":"前兩篇都是複製備審自傳稍作修改而已，這篇應該會🈶️較多原創內容吧 (?\n 升上高中後，為惹要🈶️一點多運動的感覺，我加入的是桌球社，也認識惹後來繁上 113 CS 的同班幹部伯蔚。雖然下學期加入電研社，但起初擔任幹部並不在我原先的想像。然而，在同班的竣翔積極勸說下，我才決定嘗試看看，在幹部徵選截止後才私下向學長提出意願。恰好當時教學的職務缺人孔急，我因而自告奮勇，毛遂自薦。\n社課 我本身就十分喜歡分享所知，從我開始學習程式後即時常推坑朋友。擔任社團的教學不僅令我從中汲取成就感，也能夠滿足我自我實現的需求，能近一步內化、深化程式能力。此外，備課、解惑的同時，我也能重新審視自己不足的觀念，🈶️時更會激發我思考、探究新的想法。\n網管 在高一下學期，社團的老舊伺服器 (HP Pro Liant Gen 9) 就開始討錢惹。因此，上幹後我積極尋覓獲🉐新伺服器的🉑️能。最後，找到「星城數位科技」願意捐贈我們社團。起初，其他幹部獲🈶️一些疑慮。但是最終我們成功架設全新的 Online Judge 也復活惹 BBS 站龍夢紀元。\n管理 Judge 時，我也動手修改 CSS 使之為暗色主題。而由於 ZeroJudge 🈶️些不盡人意的部分，我則學習 SQL 語法直接深入資料庫。\n在管理伺服器的過程當中，我藉由實際操作、設定網卡增進對於網路概念的理解，並愛上 Linux 作業系統的穩定、彈性與開放。\n寒訓 一年一度與交大中友會🈴辦之中部電資聯🈴寒訓是每年社團活動的重頭戲。往年教學長一職皆由敝校學長出任，因此我也繼承傳統、承擔任務。與普通社課不同，寒訓的學員來自各個學校，如何規劃三天共九小時的學術活動是一大挑戰。\n與各友社的教學夥伴討論後，我們以 Python, PyGame 為主題，從認識基礎語法到結🈴 DFS 的踩地雷小遊戲，兼顧不同能力的學員予以不同的難度。\n這五天四夜徜徉在交大校園中是我非常難忘的經驗，也與社團的好友編織不少🉑️貴的回憶。\n","date":"Apr 6, 2021","permalink":"https://nevikw39.cf/posts/club/","series":["高中生活"],"tags":["程式","電研","社團","伺服器"],"title":"偶然的社團之緣"},{"categories":["札記"],"content":"升上高中不久後就是校內學科能力競賽資訊科的初試，出於嘗試看看的心態我不假思索旋即報名參加。現在回想起來，當時的我不過是個孤陋寡聞的井底之蛙，STL 中的容器僅僅概略地認識 vector，連內建的 sort() 都不會使用。想當然爾，我就此名落孫山、鎩羽而歸。\n然而，我並沒🈶️感到太大的氣餒；相反地，我立即深刻的體悟到自己的不足🈶️多巨大，痛下決心要孜孜矻矻日日苦練。2018/12/31 晚上，放下地科題本後，我註冊惹 ZeroJudge ，正式在程式競賽的汪洋上揚帆起程，並在 2019/01/01 01:01 拿到第一個 AC。此後，我利用每一天的許多零碎片刻，展開密集刷題畫。我替自己訂下目標，要在一年內成為校內榜上的第一名；事實上，我比預期的更快，在下學期就辦到了。\n此外，我也在㋿年的第一天開始在 GreenJudge 上積極尋找歷屆中投區及彰雲嘉區能競複賽試題實戰演練，期望🉐以進一步提升自己的能力。在這個階段，我感受到自己的明顯進步，並以解題為樂。\n能力競賽 經過將近一年的準備，高二開學後，我順利通過校內筆試及上機測驗，如願獲選成為校隊，🉐以參加中投區複賽並拿下第四名，成為敝校參加資訊科決賽中唯一的普通班學生，獲🉐承辦單位師大額外加開之「潛力 Star 獎」及 \\(\\$ 500\\) 圖書禮卷。\n高三時由於日益漸重的課業壓力，我🈚️法再全心投注於程式競賽中，不過依然入選校隊，在複賽中獲🉐第九名佳作的成績。\nNPSC 高二就曾和社團同屆的亮軒、伯蔚組隊，🉑️惜初賽僅ＡＣ兩題飲恨。高三雖然宣稱要專心準備學測，但仍然🈲不住與學弟🉐壹、博靚組隊。\n縱使我們這隊以較後段的名次晉級，但是在決賽現場我們最終作出四題、獲🉐四顆氣球，以第 \\(16\\) 名作收。\n心🉐 我常常覺🉐，能在青少年時期接觸到程式競賽，我是多麽地幸運！在程式競賽中，除了資料結構與演算法，我學到的更多的是關於面對生命的態度。\n首先，如同父親予我的期許「謙謙君子，卑以自牧」，我應該始終保持謙遜，因為在廣大的競賽領域中，永遠🈶️學不完的技術與追不完的強者。每當我學🉐稍多一絲、爬🉐稍高一點、看🉐稍遠一些，我總是發現自己更渺小。曾經我一度驕傲，現在我羞愧不已。\n再者，我重新體認到 ``Practice makes perfect.'' 這句話絕非陳腔濫調。縱使我離完美仍然遙遠，我相信不單僅是程式，人生中的每個方面皆然，通往成功的唯一路徑只🈶️長期而且持續的練習。\n此外，程式競賽的旅程上從來不曾缺乏過挫折。我當然會感到沮喪、失望，甚至曾經想要就此放棄，但是種種的打擊從未澆熄我對程式的熱愛；相反地，恰似尼采所說：「凡殺不死我的，必使我更強大」，每一次挑戰的淬煉不僅使我成長，更堅定我對程式的信念。\n最後，一路走來我十分感激我的父母、老師、學長、朋友以及網路上的許多善人，沒🈶️他們我不🉑️能🈶️今日這麼微不足道的一點結果。我想，我真是極其幸運🉐以如宗愨乘長風破萬里浪。\n總結 儘管或許周遭🈶️些同學誤以為我的程式能力🈶️一定水準，但我內心非常清楚地知道自己實力到底在何處。我從來不覺🉐自己🈶️多厲害，我相信我只是比常人更瘋狂、更執著地練習。我衷心認為能🈶️這些靚賽經驗十分幸運。\n","date":"Apr 5, 2021","permalink":"https://nevikw39.cf/posts/contest/","series":["高中生活"],"tags":["程式","能力競賽","APCS","NPSC"],"title":"幸運的競賽之旅"},{"categories":["札記"],"content":"從小，我就充滿著旺盛的好奇心，尤其對於電腦設備更是如此。由於熾烈的求知慾使然，每當遇到新鮮的事物，我總是迫不及待地想要摸索、窮盡其一切性質與功能。\n小學二年級註冊電子郵件信箱後，我仔細研究每項設定，在「簽名檔」的選項中認識了 HTML，更因而上網搜尋其語法，寫下我第一個陽春而簡單的網頁。\n小五時自學的朋友洪曄寄惹一封 email 分享他寫的 Python。我上網搜尋🉐知這是一個「高階語言」，心底不🈲一驚。\n升上六年級時，胡東寶老師開啟我程式設計的大門。在他引薦之下，我開始上網自學 C 語言，使用 Dev-C++ 從 hello, world 到🈯️標、陣列及字串。\n在國中階段，我進一步學習 C++ 的泛型模板與物件導向、基礎資料結構如 stack, queue, tree 等，以及 C#, Python, JavaScript 等語言。同時我也持續撰寫一些簡單的專案，並利用程式語言來探究、解決一些數學的問題。\n資訊活動們 我到高二後才開始積極參與眾多資訊相關活動。不少朋友在賽後都會分享心🉐，我要趁我遺忘之前趕緊提筆記下。\nHP CodeWars 我第一次參加的大型程式競賽是 HP 的 CodeWars ，早在 ZeroJudge 上即看過其題目。HPC 的時間點在上學期初、能競複賽尚未展開之時，在南港世貿二館盛大舉行，我與社團的朋友亮軒、廷翰組隊報名，首次體驗典型程式競賽文化 \u0026mdash;\u0026mdash; T-shirt 與美食（我們不小心拿太多還🉐帶回家ＸＤ）。至於比賽結果，我們拿到 \\(180\\) 分並列第十名。\n今年 (2020) 游於武漢肺炎活動停辦，但官網被改🉐天翻地覆，歷年題目、官解、名次及作答狀況都消失惹，僅能在 Wayback Machine 上拾🉐蛛絲馬跡弔古興嘆，甚是🉑️惜。\nYTP 青少年圖靈計畫 由精誠資訊所舉辦的 YTP 少年圖靈計畫 程式挑戰營則是下學期的盛事。與 HPC 不同，必須通過線上初賽才能參加線下複賽。隨著高中程式選手越來越多，晉級複賽也越來越競爭。\n精誠資訊對於這個活動相當慷慨大方，不但提供台中及以南的參賽者全程來回高鐵票補助，在長榮基金會的會場也備🈶️大量美食，包括二十餘盒 pizza, 胖老爹炸機桶（沒搶到ＱＱ）、漢堡王堆起來的山與琳瑯滿目的飲料。\n其實 YTP 不只是程式競賽，複賽不小的前幾名還會獲🉐製作專題、接受教授🈯️導的資格，專題優異者更🉑️以赴美參訪。\nTOI 推廣計畫 師大蔣宗哲教授（一中校友）領銜主導之 TOI 推廣計畫 也很值🉐參加。\n線上練習賽 分為新手組與潛力組，每年㋂、㋃、㋄及㋉、㋊、㋋舉行，採用主流比賽平台 CMS。新手組的題目真的都挺水的，但潛力組就沒那麼簡單惹。\n新手同好會 而這個線下的活動似乎是在每年㋇跟㋋在師大汀州路校區。吃的就跟全國賽一樣比較普通一點，抽獎獎品還不少就是惹。比賽環境是 Windows, g++ 編譯超慢。\n我在畢旅隔一天北上，還睡過頭錯過高鐵搭下一班自由座，早餐都沒吃就攔車直奔師大。不🉐不說，去新手同好會虐菜真的還不錯呢。\nIOICamp IOICamp 是由一群臺大資工的國手們發起的營隊，以紮實的課程、堅強的師資與美味的食物著稱。早在十二🈷️即完成報名，學測過後三日我也只能收拾心情、重作馮婦。\n五天的營隊真是非常充實與疲倦，我終於正式地學會 segment tree 的 lazy propagation、merges-split treap 的奧妙、字串的配對，見識網路流的精巧與其他技巧等等。除此之外，我也認識一些熱愛程式的新朋友，包括我的兩位好隊友及室友。\n","date":"Apr 4, 2021","permalink":"https://nevikw39.cf/posts/programming/","series":["高中生活"],"tags":["程式","HP CodeWars","YTP","IOICamp"],"title":"程式與我的邂逅"},{"categories":["札記"],"content":"架設惹 Blog 就是要寫作啊！！學測後耍廢那麼久總該振作惹。\n過往曾在 Medium 寫過一些文章，現在傾向於在那抒發心🉐感悟與時事觀點，而這裡則是記錄生活札記與甄試經驗，日後或許還會🈶️一些程式教學。\n之前一直想把高中生活回憶保存起來，只是我不斷拖延 QQ. 接下來我會先把備審自傳中沒說🉐過癮的部分補起來，還🈶️大學個人🈸請入學多個 APCS 組的經驗相信很值🉐分享。\n 關於 hello, world 牧犬羊⁈⁉ 近期寫作展望 程式與我的邂逅 幸運的競賽之旅 難忘的社團之緣 淺談 APCS 與升學 審查資料準備方向 個人🈸請甄試心🉐 成大面試心🉐 中大筆試心🉐 清大面試心🉐 交大面試心🉐  ","date":"Apr 3, 2021","permalink":"https://nevikw39.cf/posts/recent-plan/","series":[],"tags":["展望"],"title":"近期寫作展望"},{"categories":["札記"],"content":" 溫柔之必要\n肯定之必要\n一點點酒和木樨花之必要\n正正經經看一名女子走過之必要\n君非海明威此一起碼認識之必要\n歐戰，雨，加農砲，天氣與紅十字會之必要\n散步之必要\n溜狗之必要\n薄荷茶之必要\n每晚七點鍾自證券交易所彼端\n草一般飄起來的謠言之必要。旋轉玻璃門\n之必要。盤尼西林之必要。暗殺之必要。晚報之必要\n穿法蘭絨長褲之必要。馬票之必要\n姑母遺產繼承之必要\n陽臺、海、微笑之必要\n懶洋洋之必要\n而既被目為一條河總🉐繼續流下去的\n世界老這樣總這樣：——\n觀音在遠遠的山上\n罌粟在罌粟的田裡\n 這首詩是瘂弦的〈如歌的行板〉。\n我對藝文涉獵不多，卻很喜歡超現實主義。比如家喻戶曉的達利，其奔放熾熱的狂想及異常柔軟的筆觸實在引人入勝。\n現代詩的方面，自然最欣賞創世紀詩社的洛夫與瘂弦。其中，〈因為風的緣故〉、〈愛的辯證〉、〈上校〉等皆是我喜愛的篇章。\n雖然我的文筆拙劣又文采不彰，但我仍想臨摹試擬一首仿作〈如詩的韻律〉，聊表致敬之意，還請見笑。\n資訊之必要 程式之必要 一點點Ｃ和Ｃ＋＋之必要 序列動態修改區間第ｋ小之必要 君非高德納此一起碼認識之必要 矩陣，群，快速冪，數論與歐拉函數之必要 堆疊之必要 佇列之必要 線段樹之必要 BIT 套持久化動態開點線段樹 光一般灑下來的毒瘤之必要。費馬小定理 之必要。動態規劃之必要。ＡＣ之必要。分治之必要。 最低共同祖先之必要。遞迴之必要 最大流最小🈹之必要 樹堆、橋、🈹點之必要 並查集之必要 而既被目為一條河總🉐繼續流下去 世界老這樣總這樣：—— 電神在高高的天上 燒雞在燒雞的地裡 後記 顯然，我始終沒🈶️抓到〈如歌的行板〉該詩真正精華之所在，只不過是像個冰冷的工匠般🈚️意義而機械式地填詞而已。我🈚️法達到瘂弦那種信手摘取隨機的詞彙卻又從容、巧妙地構築為詩的境界。\n不過，至少我對最後一節尚稱滿意。「觀音在遠遠的山上／罌粟在罌粟的田裡」對上「電神在高高的天上／燒雞在燒雞的地裡」免免強強算是🈶️點意境吧。\n","date":"Apr 2, 2021","permalink":"https://nevikw39.cf/posts/andante-cantabile/","series":[],"tags":["如詩的韻律"],"title":"如歌的行板 🆚 如詩的韻律"},{"categories":["札記"],"content":"這是一篇廢文。  嗯嗯，是的沒錯，這就是一篇貨真價實的廢文。\n擔任社團幹部後，陸陸續續參加一些活動。每次最困擾我的，就是關於自己的綽號。曾經🈶️段時間，我索性使用 ``nevikw39''，令美宣也哭笑不🉐。\n🈶️天，我突然想到「牧犬羊」這個自己新鑄的詞彙。這個隨意顛倒固🈶️語序的倒裝，竟帶來意想不到的趣味。於是，我遂以此作為綽號。\n恰好我的頭貼自國中畢業後也許久未更新；因此，我特地拜託高一同學暨社團好友，隨手簡單地發（浪）揮（費）他國中美術班、僅差兩分考上一中美術班的超群藝術天份，以精湛的電繪能力完美地詮釋惹連我也不知道長什麼樣的「牧犬羊」。\n如你所見，成品著實令人折服、驚嘆不已。我想在此再次感謝他幫我畫惹一個如此🉑️愛的頭貼，澆灌我悲劇的美感。\n至於 nevikw39 則是小學時亂打的 ID, 此後一直沿用迄今，想要改也沒辦法惹。\n附帶一提，我🈶️把頭貼稍作調整，剪裁為「超橢圓」(Superellipse)，其方程式為 $$ |x|^e + |y|^e = k $$。\n","date":"Apr 1, 2021","permalink":"https://nevikw39.cf/posts/nevikw39/","series":[],"tags":["nevikw39","牧犬羊"],"title":"牧犬羊⁈⁉"},{"categories":["札記"],"content":" hello, world\n 撰寫 Blog 亦🈚️例外，仍以標準、傳統而熟悉的 hello, world 來開場吧。\nTL; DR 我們這個世代，撰寫 Blog 似乎已經成為🈶️些過於老氣之舉，畢竟時下新興多媒體之發達🉑️謂雨後春筍。\n然而，我依舊深信文字的溫度與力量是🈚️🉑️抹滅的。\n同時，不少優秀的競賽選手皆保🈶️筆耕不輟的習慣。不曉🉐多少次打開 Google 尋求🈯️引總是導向一位位電神的 Blog. 雖然我是個孤陋寡聞的井底之蛙，但還是希望能盡我所能，在網路的汪洋中留下些許波痕。\n輕量級 Blog 現在主流透過 Static Site Generator 便捷地產生靜態網頁並放上託管服務如 GitHub Pages 來作為輕量級的 Blog.\nStatic Site Generator 常見的工具包括：Jekyll, Hexo 與 Hugo 等，分別是以 Ruby, Node.js 及 Go 撰寫。其中，Jekyll 獲🉐 GitHub 較原生的支援，不過我不甚熟悉；而臺灣🈶️許多人採用 Hexo，因為其存在豐富的中文資訊、多樣的主題及插件。\n然而，Hexo 的致命缺點在於 Node.js 作為動態語言其效能實在🈚️法恭維。在偵錯測試的過程當中，緩慢的編譯速度著實令人🈚️法忍受。\n🉐益於毫秒級的速度，Hugo 提供近乎 WYSIWYG（所見即所🉐）的體驗。\n因此，我們不難發現，網路上不少電神自 Hexo 搬遷或是直接選擇 Hugo，包括蛋餅、BB 等。\nHugo 主題 Hugo 的主題感覺更強大一點，還能提供許多額外的功能。🈶️點選擇障礙的我，起初看上 Iris 主題，不單由於簡潔的版面，也🈶️部分出自於對希臘神話中 Iris 諸神的信使之遐想（Iridescent \u0026mdash; 真是個美麗的詞彙）。而 GitHub 上獲🉐最多 Star 的 Coder 主題卻看似單調且🈚️法修改顏色，另個 m10c 又稍嫌簡陋。\n最終，我找到 Hugo Bootstrap Theme ，不但提供完整的暗色主題、美觀的佈局、多樣的功能，還補足 Hugo 的弱項－搜尋。\nGitHub Pages \u0026amp; GitHub Actions  GitHub Pages 🉑️以讓 GitHub 上的 repo 某個 branch 的某個資料夾當作靜態網頁託管服務。\n而 GitHub Actions 的功能更為強大，比如🉑️以在 main branch 被 push 上後自動更新 submodule, 建置網站並發布。\n如此，我們🉑️以優雅地分離原始碼如 markdown, config 與結果的 HTML 至不同 branch。\n免費網域 GitHub Pages 預設🈶️提供 {{username}}.github.io 的網域，但這種 subdomain 並不方便進行 Google Analytics 與 SEO 等。\n查惹一下 *.ac, .code 等的價格實在太🉑️怕，窮學生還是乖乖用免費 domain QQ. 我之前是🈶️🈸請過 .tk 的網址，但我突然想起 念誠的 Blog ，.cf 看起來也是很程式嘛 (CodeForces !?)\n但我用原本的 Freenom 帳號卻🈚️法註冊 nevikw39.cf，索性重辦一個把 nevikw39.cf, nevikw39.tk , nevikw39.ml (Machine Learning !?), nevikw39.gq （潮到出水欸💦）和 nevikw39.ga 都註冊走ＸＤ。\n 那麼，我要開始寫 Blog 惹！！\n","date":"Mar 31, 2021","permalink":"https://nevikw39.cf/posts/hello-world/","series":[],"tags":["hugo","hugo theme","Static Site Generator","hello, world"],"title":"hello, world"},{"categories":["拉麵🍜"],"content":"🈶囍拉麵是 2020 年度台灣拉麵愛好會社團票選拉麵金賞的第九名，也是同樣高人氣的拉麵店山下公園 、Men Monster 的姊妹店。\n在高二下一段考完英文的一個晚上，我已經忘記我那時為何請兩位高一社團朋友吃拉麵惹 XD\n遙想當時還是排隊十、二十分鐘就能品嘗拉麵的時候\u0026hellip;\n這碗是 2020 雞白湯拉麵，不只店面、餐具高雅舒適，香醇而濃厚的湯頭更是一絕。\n  🏬店名  🈶囍 Yoshi Ramen よしラーメン   🏠地址  400 台中市中區中山路 82 號    🔗連結  Facebook        ","date":"Apr 8, 2020","permalink":"https://nevikw39.cf/ramen/yoshi/","series":[],"tags":["有囍","金賞拉麵"],"title":"有囍拉麵"},{"categories":["拉麵🍜"],"content":"麵屋秋鳴是貍匠拉麵四家品牌之一，位於文心南路上，離我家約十分鐘步程。印象中去的時候雨勢不小，回程就漸歇惹。\n這碗是味玉清湯醬油拉麵，是我來台中後第一碗拉麵呢。過惹兩年記憶已經逐漸淡去喇。\n  🏬店名  麵屋秋鳴   🏠地址  402 台中市南區文心南路 715 號    🔗連結  Facebook        ","date":"Aug 26, 2019","permalink":"https://nevikw39.cf/ramen/chiuming/","series":[],"tags":["貍匠","名店拉麵"],"title":"麵屋秋鳴"},{"categories":[],"content":" 初六 • 象曰：「謙謙君子，卑以自牧。」 \u0026mdash; 《易經 • 謙卦 ䷎》\n 各位好，我是來自清大資工的 nevikw39 牜攵犬羊，歡迎來到 「如詩的韻律」！！以下是關於我的一點自我介紹：\n🖥 資訊 高中時期我即是名熱愛程式的學生 o'_\u0026lsquo;o。\n🏁 競賽  108 學年度學科能力競賽中投區複賽資訊科 第四名 108 學年度學科能力競賽全國決賽資訊科 第 29 名 潛力 Star 獎 109 學年度學科能力競賽中投區複賽資訊科 第九名 佳作 2020 網際網路程式設計大賽 (NPSC) 優勝，決賽第 16 名 大學程式先修檢測 (APCS) Ⅴ(92) / Ⅳ(300)  🏫 社團  108 學年度電腦資訊研習社 教學 2020 中北部電資聯🈴寒訓 教學長  🎯 活動  2019 HP CodeWars 第十名 109 YTP 程式挑戰營 第 46 名 2020 TOI 推廣計畫 新手同好會 第三名  🍜 拉麵 我很喜歡尋覓、品嚐各地、各式的拉麵 \u0026gt;///\u0026lt;。\n🈶些拉麵來不及捕捉牠們的遺容就進肚子惹。\n 豚骨拉麵 博多風龍  去日本吃的拉麵中🈶被 Google Maps Timeline 記起來的   麵屋武藏  北車本店吃過兩次  全國賽上台北時與國中同學吃的是味玉雞白湯 應該是 YTP 後與表哥約，這次換味玉武藏     荷麵亭  除夕與國中同學約，士林捷運站附近其他店如隱家、道樂都休息，幸好荷麵亭中午還🈶營業   山嵐拉麵  白湯、海湯跟赤湯都吃過，只是一張照片都沒留 臺中雖然稱一中店，但從學校要走十分鐘才會到 高二入營考的時候🈶跟兩位國中同學去古亭本店   麵屋秋鳴  🈶️囍拉麵  小川拉麵  比完 NPSC 之後和兩位國中同學去吃的，叉燒只🈶一塊比較🉑惜   豚箱拉麵  一中附近、中友對面巷子的小店   海拉麵  高三入營考跟兩位國中同學去吃的，叉燒🈶金屬光澤   大角拉麵  山下公園  麵本初  七面鳥  狸匠拉麵  渡山樓  牛庵  千勝軒   至於花🈷️嵐、一蘭等等就算惹ＸＤ。\n🏆 奇怪的 榮譽  國小二年級教師節藝文比賽優選（是畫畫喔） 國小四、五、六年級多語文學藝競賽國語文字音字形組優等 國中二、三年級國家地理知識大競賽（中國地理學會，非 NatGeo）初賽優勝 高中一年級上學期公民科全年級第四名，高中必修公民全年級 \\(4%\\) 高中一年級下學期校本課程公民科專題發表會優異  🎵 樂團 我都聽比較 old-school 的歌 QQ. 風格偏好 Soft Rock, Easy Listening. 以下列出部分我很常聽的樂團：\n Alphaville The Beatles Air Supply Queen Linkin Park  And so forth\u0026hellip;\n🔗 連結 以下是一些友站 （裝熟） 的連結，歡迎在底下的 Disqus 留言🍌流🍌流，我會在附上喔，也歡迎大家分享我的 Blog。\n Bentley  念誠  櫛風  雞塊  Aann Lin  靚  CSC  Howard （我是偷看惹原始碼才懂 \\( \\log 100 \\) 這個提示ＸＤ）  et cetera\u0026hellip;\n","date":"Sep 5, 2002","permalink":"https://nevikw39.cf/about/","series":[],"tags":[],"title":"關於"}]